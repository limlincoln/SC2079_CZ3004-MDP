/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "ICM20948.h"
#include "math.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "../../PeripheralDriver/Inc/oled.h"
#include "../../PeripheralDriver/Src/oled.c"
#include <stdio.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart3;

ICM20948 imu;
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for OLED */
osThreadId_t OLEDHandle;
const osThreadAttr_t OLED_attributes = {
  .name = "OLED",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MotorTask */
osThreadId_t MotorTaskHandle;
const osThreadAttr_t MotorTask_attributes = {
  .name = "MotorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for EncoderTask */
osThreadId_t EncoderTaskHandle;
const osThreadAttr_t EncoderTask_attributes = {
  .name = "EncoderTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for motorTasktwo */
osThreadId_t motorTasktwoHandle;
const osThreadAttr_t motorTasktwo_attributes = {
  .name = "motorTasktwo",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for servoMotor */
osThreadId_t servoMotorHandle;
const osThreadAttr_t servoMotor_attributes = {
  .name = "servoMotor",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for EncoderTask2 */
osThreadId_t EncoderTask2Handle;
const osThreadAttr_t EncoderTask2_attributes = {
  .name = "EncoderTask2",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Ultrasonicsenso */
osThreadId_t UltrasonicsensoHandle;
const osThreadAttr_t Ultrasonicsenso_attributes = {
  .name = "Ultrasonicsenso",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for GyroTask */
osThreadId_t GyroTaskHandle;
const osThreadAttr_t GyroTask_attributes = {
  .name = "GyroTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_I2C1_Init(void);
void StartDefaultTask(void *argument);
void Show(void *argument);
void motors(void *argument);
void encoder_task(void *argument);
void motorTwo(void *argument);
void servomotor(void *argument);
void encoder_Task2(void *argument);
void Ultrasonicsensor(void *argument);
void Gyroscopetask(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* RPi transmit */
uint8_t aRxBuffer[100]; //RPi
uint8_t UART_RX_CHAR;
uint8_t tr[20]="Stop"; //String to transmit to RPi

/* Motors */
uint16_t pwmval=1000;
int spdL; // Trying PID (Encoder)

/* Ultrasonic Sensor */
uint32_t Echo_Val1 = 0;
uint32_t Echo_Val2 = 0;
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;
uint8_t Distance  = 0; //Ultrasound distance

/*Gyroscope*/

float pitch_gyro=0;
float roll_gyro=0;

/* Functions */
void stop()
{
	//Stop both wheels
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
}

void forward()
{
	//PID
	//struct PIDController motorL_PID, motorR_PID;

	//PIDController_Init(&motorL_PID);
	//PIDController_Init(&motorR_PID);

	//Left motor
	htim1.Instance->CCR4=153; //Center before starting
    HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
//	pwmval=PIDController_Update(&motorL_PID,pwmval,spdL);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmval);

	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmval);
}

void reverse()
{
	//Left motor
	htim1.Instance->CCR4=153; //Center before starting
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmval);
	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmval);
}

void fullLeftForward()
{
	//Time taken=3.5s
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(3400);
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullRightForward()
{
	//Time taken=3.95s
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(3850);
	htim1.Instance->CCR4=153; //Center
	stop();
}

void slowRightForward()
{
	htim1.Instance->CCR4=153; //Center before starting
	HAL_Delay(500);

	forward();
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(1500);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	reverse();
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(1500);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	forward();
	HAL_Delay(8000);

	forward();
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(2000);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	reverse();
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(1500);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	forward();
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(1500);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	reverse();
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(1500);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);

	forward();
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(2350);
	htim1.Instance->CCR4=153; //Center before stop
	stop();
	HAL_Delay(1000);
	reverse();
	HAL_Delay(1000);
	stop();
	HAL_Delay(1000);

	HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100); //Transmit to RPi (String)
//	forward();
//	htim1.Instance->CCR4=260; //Extreme right
//	HAL_Delay(1800);
//	stop();
//	htim1.Instance->CCR4=153; //Center before starting
}

void fullRight90()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(4050); //90 degrees

	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullRight180()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(7500);//180 degrees
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullRight270()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right

	HAL_Delay(11800);

	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullRight360()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(15800);//360 degrees
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullLeft90()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(3400); //90 degrees
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullLeft180()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(6500); //180 degrees
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullLeft270()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(9500);   //270 degrees
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullLeft360()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(12600); //360 degree
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullLeftReverse()
{
	//Time taken=3.25s
	htim1.Instance->CCR4=153; //Center before starting
	reverse();
	HAL_Delay(100);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(3150);
	htim1.Instance->CCR4=153; //Center
	stop();
}

void fullRightReverse()
{
	//Time taken=4.15s
	htim1.Instance->CCR4=153; //Center before starting
	reverse();
	HAL_Delay(100);
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(4050);
	htim1.Instance->CCR4=153; //Center
	stop();
}

void threePtTurn()
{
	//Time taken=8.9s
	htim1.Instance->CCR4=153; //Center before starting
	HAL_Delay(500);
	fullLeftReverse(); //3.25s
	reverse();
	HAL_Delay(1000);
	stop();
	HAL_Delay(200);
	fullRightForward(); //3.95s
	htim1.Instance->CCR4=153; //Center
	stop();
}

void reverseTurnRight()
{
	//Time taken=5.95s
	reverse();
	HAL_Delay(2000);
	stop();
	fullRightForward(); //3.95s
}

void reverseTurnLeft()
{
	//Time taken=5.5s
	reverse();
	HAL_Delay(2000);
	stop();
	fullLeftForward(); //3.5s
}

void RSL()
{
	htim1.Instance->CCR4=153; //Center before starting
	forward();
	htim1.Instance->CCR4=260; //Extreme right
	HAL_Delay(3465);
	htim1.Instance->CCR4=153; //Center
	HAL_Delay(4123);
	htim1.Instance->CCR4=90; //Extreme left
	HAL_Delay(7394);
	htim1.Instance->CCR4=153; //Center
	stop();
}
/* USER CODE END 0 */
void delay_us(uint16_t us)
{
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
	{
		if (Is_First_Captured==0) // if the first value is not captured
		{
			Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
			Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured==1)   // if the first is already captured
		{
			Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

			if (Echo_Val2 > Echo_Val1)
			{
				Difference = Echo_Val2-Echo_Val1;
			}

			else if (Echo_Val1 > Echo_Val2)
			{
				//Difference = (0xffff - Echo_Val1) + Echo_Val2;
				Difference = 0;
			}

			Distance = (Difference * 0.0343)/2;
			Is_First_Captured = 0; // set it back to false

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}

void HCSR04_Read (void)
{
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay_us(10);  // wait f or 10 us
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM8_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */


  //OLED
  OLED_Init();
  //Motors
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
  //ServoMotor
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);

  HAL_UART_Receive_IT(&huart3, aRxBuffer,100); //Interrupt receive for RPi (10 character)
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of OLED */
  OLEDHandle = osThreadNew(Show, NULL, &OLED_attributes);

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);

  /* creation of motorTasktwo */
  motorTasktwoHandle = osThreadNew(motorTwo, NULL, &motorTasktwo_attributes);

  /* creation of servoMotor */
  servoMotorHandle = osThreadNew(servomotor, NULL, &servoMotor_attributes);

  /* creation of EncoderTask2 */
  EncoderTask2Handle = osThreadNew(encoder_Task2, NULL, &EncoderTask2_attributes);

  /* creation of Ultrasonicsenso */
  UltrasonicsensoHandle = osThreadNew(Ultrasonicsensor, NULL, &Ultrasonicsenso_attributes);

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(Gyroscopetask, NULL, &GyroTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 160;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 16-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 7199;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
                          |LED3_Pin|Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
                          |LED3_Pin|Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
//Receive message in for RPi
void HAL_UART_RxCpltCallBack(UART_HandleTypeDef *huart)
{
	UNUSED(huart); //Prevent unused arguments warning
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,100,0xFFFF);
//	 HAL_UART_Transmit(&huart3, aRxBuffer, 1, 100);
//    HAL_UART_Receive_IT(&huart3, aRxBuffer, 10);

}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  // RPi Transmit
	uint8_t ch='A'; //Char to transmit to RPi
	int i=0;

	fullRight360();
	//For Checklist A4 Accurate Rotation Right
	//forward();
    //HAL_Delay(3000);
	//stop();
	//HAL_Delay(3000);
	//fullRight90();
	//HAL_Delay(4000);
	//fullRight180();
    //HAL_Delay(4000);
    //fullRight270();
    //HAL_Delay(4000);
    //fullRight360();
    //HAL_Delay(4000);
	//stop();

    //For Checklist A4 Accurate Rotation Left
        //forward();
        //HAL_Delay(3000);
    	//stop();
    	//HAL_Delay(3000);
		//fullLeft90();
		//HAL_Delay(4000);
		//fullLeft180();
	    //HAL_Delay(4000);
	    //fullLeft270();
	    //HAL_Delay(4000);
	    //fullLeft360();
	    //HAL_Delay(4000);
		//stop();

  // Motors
	//forward();
	//HAL_Delay(2000);
//	stop();
//	HAL_Delay(300);
//	reverseTurnRight();
//	threePtTurn();
//	forward();
//	HAL_Delay(1000);
//	stop();
//	HAL_Delay(1000);
//	reverse();
//	HAL_Delay(1000);
//	stop();
//	fullLeftForward();
//	fullRightForward();
//	fullRightReverse();
//	stop();
//	HAL_Delay(1000);
//	fullLeftReverse();

  /* Infinite loop */
  for(;;)
  {

//	  switch(aRxBuffer[i])
//	  	     {
//	  		      case 'm':
//	  		    	slowRightForward();
//	  		    	i++;
//	  		    	break;
//
//
//	  		      case 's':
//	  		    	  stop();
//	  		    	  i++;
//	  		    	  break;
//
//	  		      default: stop();
//	  		      HAL_Delay(1000);
//	  		      //i++;
//	  		      break;
//	  		 	  }

	  if(i>=10)
	  {
		  i=0;
		  //memset(aRxBuffer,0,10);
	  }


	/* RPi Transmit */
	  //HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF); //Transmit to RPi (Char)
	  //	if(ch<'Z')
	  //		ch++;
	  //	else
	  //		ch='A';
	  //HAL_UART_Transmit(&huart3,(uint8_t *)&tr,10,100); //Transmit to RPi (String)

	/* LED Blink */
	//HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
	//HAL_Delay(5000);

//	/* Motor */
	//if(Distance>10)
	//{
	//	forward();
	//}
	//HAL_Delay(1);
	//if(Distance<=10)
	//{
	//	stop();
	//}
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_Show */
/**
* @brief Function implementing the OLED thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Show */
void Show(void *argument)
{
  /* USER CODE BEGIN Show */
  uint8_t hello[20]="Hello World!\0";
  /* Infinite loop */
  for(;;)
  {
	  sprintf(hello,"%s\0",aRxBuffer);
	  OLED_ShowString(10,10,hello);
	  OLED_Refresh_Gram();
	  osDelay(1);
  }
  /* USER CODE END Show */
}

/* USER CODE BEGIN Header_motors */
/**
* @brief Function implementing the MotorTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
  /* USER CODE BEGIN motors */
//  uint16_t pwmval=0;
//  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
//
// /* Infinite loop */
// for(;;)
//  {
//	//Reverse
//	while(pwmval<4000)
//	{
//
//		HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
//		pwmval++;
//		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmval); //Modify the comparison value for the duty cycle
//		osDelay(10);
//
//	}
//	//Forward
//	while(pwmval>0)
//		{
//		    HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
//
//			pwmval--;
//			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmval); //Modify the comparison value for the duty cycle
//			osDelay(10);
//
//		}
//    osDelay(1);
//  }
  /* USER CODE END motors */
}

/* USER CODE BEGIN Header_encoder_task */
/**
* @brief Function implementing the EncoderTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
  /* USER CODE BEGIN encoder_task */
 HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 int cnt1, cnt2, diff;
 uint32_t tick;

 cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 tick=HAL_GetTick();
 uint8_t speedL[20];
  uint16_t dir;
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GetTick()-tick>1000L){
		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
			if(cnt2<cnt1)
				diff=cnt1-cnt2;
			else
				diff=(65535-cnt2)+cnt1;
		}
		else{
			if(cnt2 > cnt1)
				diff=cnt2-cnt1;
			else
				diff=(65535-cnt1)+cnt2;
		}


		//MotorA details
		sprintf(speedL,"LSpd:%5d\0",diff);
		OLED_ShowString(0,20,speedL);
		dir=__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
		sprintf(speedL,"LDir:%d\0",dir);
		OLED_ShowString(82,20,speedL);
		cnt1=__HAL_TIM_GET_COUNTER(&htim2);
		tick=HAL_GetTick();
	}
    HAL_Delay(1);
  }


  /* USER CODE END encoder_task */
}

/* USER CODE BEGIN Header_motorTwo */
/**
* @brief Function implementing the motorTasktwo thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorTwo */
void motorTwo(void *argument)
{
  /* USER CODE BEGIN motorTwo */
//  uint16_t pwmval=0;
//  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
//
//  /* Infinite loop */
//  for(;;)
//  {
//	  //Reverse
//	  while(pwmval<4000)
//	  	{
//
//	  		HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
//	  		HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
//	  		pwmval++;
//	  		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmval); //Modify the comparison value for the duty cycle
//	  		osDelay(10);
//
//	  	}
//	  //Forward
//	  while(pwmval>0)
//	  	{
//	  		   HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
//	  		   HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
//
//	  		   pwmval--;
//	  		   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmval); //Modify the comparison value for the duty cycle
//	  		   osDelay(10);
//
//	  	}
//	  osDelay(1);
//  }
  /* USER CODE END motorTwo */
}

/* USER CODE BEGIN Header_servomotor */
/**
* @brief Function implementing the servoMotor thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servomotor */
void servomotor(void *argument)
{
  /* USER CODE BEGIN servomotor */
//  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);

  /* Infinite loop */
//  for(;;)
//  {
////	  htim1.Instance->CCR4=90; //Extreme left
////	  osDelay(3000);
////	  htim1.Instance->CCR4=153; //Center
////	  osDelay(3000);
////	  htim1.Instance->CCR4=260; //Extreme right
////	  osDelay(3000);
//	  htim1.Instance->CCR4=153; //Center
//	  osDelay(5000);
//  }
  /* USER CODE END servomotor */
}

/* USER CODE BEGIN Header_encoder_Task2 */
/**
* @brief Function implementing the EncoderTask2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_Task2 */
void encoder_Task2(void *argument)
{
  /* USER CODE BEGIN encoder_Task2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
  int cntR1,cntR2,spdR,diff;
  uint32_t tick;

  cntR1=__HAL_TIM_GET_COUNTER(&htim3);
  tick=HAL_GetTick();
  uint8_t speedR[20];
  uint16_t dir;
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GetTick()-tick > 1000L){
	  		cntR2=__HAL_TIM_GET_COUNTER(&htim3);
	  		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
	  			if(cntR2<cntR1)
	  				diff=cntR1-cntR2;
	  			else
	  				diff=(65535-cntR2)+cntR1;
	  		}
	  		else{
	  			if(cntR2>cntR1)
	  				diff=cntR2-cntR1;
	  			else
	  				diff=(65535-cntR1)+cntR2;
	  		}
	  		//MotorB details
	  		sprintf(speedR,"RSpd:%5d\0",diff);
	  		OLED_ShowString(0,30,speedR);
	  		dir=__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
	  		sprintf(speedR,"RDir:%d\0",dir);
	  		OLED_ShowString(82,30,speedR);
	  		cntR1=__HAL_TIM_GET_COUNTER(&htim3);
	  		tick=HAL_GetTick();
	  	}
    HAL_Delay(1);
  }
  /* USER CODE END encoder_Task2 */
}

/* USER CODE BEGIN Header_Ultrasonicsensor */
/**
* @brief Function implementing the Ultrasonicsenso thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasonicsensor */
void Ultrasonicsensor(void *argument)
{
  /* USER CODE BEGIN Ultrasonicsensor */
  /* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);

	uint8_t dist[20];

  for(;;)
  {
	  HCSR04_Read();
	  sprintf(dist, "DIST: %5d CM", Distance);
	  OLED_ShowString(10,50,dist);
	  HAL_Delay(50);
  }
  /* USER CODE END Ultrasonicsensor */
}

/* USER CODE BEGIN Header_Gyroscopetask */
/**
* @brief Function implementing the GyroTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Gyroscopetask */
void Gyroscopetask(void *argument)
{
	 uint8_t* status = IMU_Initialise(&imu, &hi2c1, &huart3);
	  	      if (status != 0) {
	  	    	  // not 0
	  	    	  return -1;
	  	      }

	  	      char sbuf[10][9];


	  	      uint32_t millisNow,millisOld,dt;
	  	      millisOld=HAL_GetTick();

  /* USER CODE BEGIN Gyroscopetask */
  /* Infinite loop */
  for(;;)
  {
	  IMU_GyroRead(&imu);
	  	  	  for(int i=0;i<3;i++){
	  	  	 	   	 	sprintf(sbuf[i], "%7.2f ", imu.gyro[i]);
	  	  	 	   		HAL_UART_Transmit(&huart3,sbuf[i],6,HAL_MAX_DELAY);

	  	  	 	   	 }

	  	 	  millisNow=HAL_GetTick();
  	  	 	  dt=(millisNow-millisOld);
  	  	 	  millisOld=millisNow;
  	  	 	  pitch_gyro = pitch_gyro + (imu.gyro[1]*dt*0.001);
  	  	 	  roll_gyro= roll_gyro+(imu.gyro[0]*dt*0.001);

  	  	 	  sprintf(sbuf[3],"%7.2f ",-pitch_gyro);
  	  	 	  HAL_UART_Transmit(&huart3,sbuf[3],6,HAL_MAX_DELAY);

  	  	 	  sprintf(sbuf[4],"%7.2f ",roll_gyro);
  	  	 	  HAL_UART_Transmit(&huart3,sbuf[4],6,HAL_MAX_DELAY);
  	  	 	  HAL_UART_Transmit(&huart3,"\r\n",2,HAL_MAX_DELAY);
  	  	 	  HAL_Delay(100);
  }


  /* USER CODE END Gyroscopetask */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
