
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b4  0800eba8  0800eba8  0001eba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc5c  0800fc5c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc5c  0800fc5c  0001fc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc64  0800fc64  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc64  0800fc64  0001fc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800fc6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00005178  20000210  20000210  00020210  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005388  20005388  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1ee  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f6  00000000  00000000  0003d42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  00040d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001928  00000000  00000000  00042790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004603  00000000  00000000  000440b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c98a  00000000  00000000  000486bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daa80  00000000  00000000  00065045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fac5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008334  00000000  00000000  0013fb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb90 	.word	0x0800eb90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800eb90 	.word	0x0800eb90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <PIDController_Init>:
 */

#include "PID.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Clear controller variables */
  pid->integrator = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  pid->prevError  = 0.0f;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  pid->prevMeasurement = 0.0f;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  pid->out = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <MotorPIDController_Init>:

void MotorPIDController_Init(PIDController *pid) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  pid->T = 0.2;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <MotorPIDController_Init+0x3c>)
 8000f2c:	619a      	str	r2, [r3, #24]
//  pid->Kp = 0.11;
//  pid->Ki = 0.15;
//  pid->Kd = 0.03;
  pid->Kp = 0.25;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000f34:	601a      	str	r2, [r3, #0]
  pid->Ki = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  pid->limMax = 6000; pid->limMin = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <MotorPIDController_Init+0x40>)
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  PIDController_Init(pid);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffcd 	bl	8000eec <PIDController_Init>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	3e4ccccd 	.word	0x3e4ccccd
 8000f60:	45bb8000 	.word	0x45bb8000

08000f64 <PIDController_Update>:
	pid->prevError = error;

	return (int)pid->out;
}

int PIDController_Update(PIDController *pid, float measurement, float setpoint, int currentpwm) {
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f70:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]

  /*
  * Error signal
  */
    float error = setpoint - measurement;
 8000f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 8000f86:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d702      	bvc.n	8000f9e <PIDController_Update+0x3a>
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]

  // Proportional
    int proportional;

    // velocity implementation (instead of distance)
    if (error >= 0) // positive error, need to increase pwm
 8000f9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	db1b      	blt.n	8000fe4 <PIDController_Update+0x80>
    {
    	proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	ed93 7a00 	vldr	s14, [r3]
 8000fb2:	ed97 6a07 	vldr	s12, [r7, #28]
 8000fb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000fba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fdc:	ee17 3a90 	vmov	r3, s15
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	e01a      	b.n	800101a <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	ed97 6a07 	vldr	s12, [r7, #28]
 8000fee:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ff2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001014:	ee17 3a90 	vmov	r3, s15
 8001018:	61bb      	str	r3, [r7, #24]
    }

  // Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edd3 7a01 	vldr	s15, [r3, #4]
 8001026:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800102a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edd3 7a06 	vldr	s15, [r3, #24]
 8001034:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	ed93 6a08 	vldr	s12, [r3, #32]
 800103e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001042:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001046:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	edc3 7a07 	vstr	s15, [r3, #28]

  // Anti-wind-up via dynamic integrator clamping
  int limMinInt, limMaxInt;

  // Compute integrator limits
  if (pid->limMax > proportional) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	ed93 7a05 	vldr	s14, [r3, #20]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	dd0f      	ble.n	800109c <PIDController_Update+0x138>

    limMaxInt = pid->limMax - proportional;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001094:	ee17 3a90 	vmov	r3, s15
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	e001      	b.n	80010a0 <PIDController_Update+0x13c>

  } else {

    limMaxInt = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]

  }

  if (pid->limMin < proportional) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d50f      	bpl.n	80010da <PIDController_Update+0x176>

    limMinInt = pid->limMin - proportional;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e001      	b.n	80010de <PIDController_Update+0x17a>

  } else {

    limMinInt = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  }

  // Clamp integrator
	if (pid->integrator > limMaxInt) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd08      	ble.n	800110a <PIDController_Update+0x1a6>

		pid->integrator = limMaxInt;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	edc3 7a07 	vstr	s15, [r3, #28]
 8001108:	e014      	b.n	8001134 <PIDController_Update+0x1d0>

	} else if (pid->integrator < limMinInt) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d507      	bpl.n	8001134 <PIDController_Update+0x1d0>

		pid->integrator = limMinInt;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	edc3 7a07 	vstr	s15, [r3, #28]

  /*
  * Compute output and apply limits
  */

    pid->out = proportional + pid->integrator;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edd3 7a07 	vldr	s15, [r3, #28]
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edd3 7a05 	vldr	s15, [r3, #20]
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	dd04      	ble.n	800116e <PIDController_Update+0x20a>

        pid->out = pid->limMax;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
 800116c:	e00e      	b.n	800118c <PIDController_Update+0x228>

    } else if (pid->out < pid->limMin) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	edd3 7a04 	vldr	s15, [r3, #16]
 800117a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d503      	bpl.n	800118c <PIDController_Update+0x228>

        pid->out = pid->limMin;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c

    }

  /* Store error and measurement for later use */
    pid->prevError       = error;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return controller output */
    return pid->out;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15

}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e026      	b.n	800120e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	3b50      	subs	r3, #80	; 0x50
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f82b 	bl	8001224 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80011ce:	2100      	movs	r1, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f827 	bl	8001224 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80011d6:	2100      	movs	r1, #0
 80011d8:	2010      	movs	r0, #16
 80011da:	f000 f823 	bl	8001224 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80011de:	2300      	movs	r3, #0
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	e00d      	b.n	8001200 <OLED_Refresh_Gram+0x4c>
 80011e4:	79ba      	ldrb	r2, [r7, #6]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	490d      	ldr	r1, [pc, #52]	; (8001220 <OLED_Refresh_Gram+0x6c>)
 80011ea:	00d2      	lsls	r2, r2, #3
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f815 	bl	8001224 <OLED_WR_Byte>
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71bb      	strb	r3, [r7, #6]
 8001200:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	daed      	bge.n	80011e4 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	3301      	adds	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b07      	cmp	r3, #7
 8001212:	d9d5      	bls.n	80011c0 <OLED_Refresh_Gram+0xc>
	}   
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000022c 	.word	0x2000022c

08001224 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001240:	481c      	ldr	r0, [pc, #112]	; (80012b4 <OLED_WR_Byte+0x90>)
 8001242:	f003 fc7b 	bl	8004b3c <HAL_GPIO_WritePin>
 8001246:	e005      	b.n	8001254 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <OLED_WR_Byte+0x90>)
 8001250:	f003 fc74 	bl	8004b3c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e01e      	b.n	8001298 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	4815      	ldr	r0, [pc, #84]	; (80012b4 <OLED_WR_Byte+0x90>)
 8001260:	f003 fc6c 	bl	8004b3c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da05      	bge.n	8001278 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800126c:	2201      	movs	r2, #1
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <OLED_WR_Byte+0x90>)
 8001272:	f003 fc63 	bl	8004b3c <HAL_GPIO_WritePin>
 8001276:	e004      	b.n	8001282 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8001278:	2200      	movs	r2, #0
 800127a:	2140      	movs	r1, #64	; 0x40
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <OLED_WR_Byte+0x90>)
 800127e:	f003 fc5d 	bl	8004b3c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001282:	2201      	movs	r2, #1
 8001284:	2120      	movs	r1, #32
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <OLED_WR_Byte+0x90>)
 8001288:	f003 fc58 	bl	8004b3c <HAL_GPIO_WritePin>
		dat<<=1;   
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9dd      	bls.n	800125a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <OLED_WR_Byte+0x90>)
 80012a6:	f003 fc49 	bl	8004b3c <HAL_GPIO_WritePin>
} 
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e014      	b.n	80012ee <OLED_Clear+0x36>
 80012c4:	2300      	movs	r3, #0
 80012c6:	71bb      	strb	r3, [r7, #6]
 80012c8:	e00a      	b.n	80012e0 <OLED_Clear+0x28>
 80012ca:	79ba      	ldrb	r2, [r7, #6]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <OLED_Clear+0x48>)
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	440a      	add	r2, r1
 80012d4:	4413      	add	r3, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	3301      	adds	r3, #1
 80012de:	71bb      	strb	r3, [r7, #6]
 80012e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	daf0      	bge.n	80012ca <OLED_Clear+0x12>
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3301      	adds	r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d9e7      	bls.n	80012c4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80012f4:	f7ff ff5e 	bl	80011b4 <OLED_Refresh_Gram>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000022c 	.word	0x2000022c

08001304 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	460b      	mov	r3, r1
 8001310:	71bb      	strb	r3, [r7, #6]
 8001312:	4613      	mov	r3, r2
 8001314:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db41      	blt.n	80013a6 <OLED_DrawPoint+0xa2>
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	2b3f      	cmp	r3, #63	; 0x3f
 8001326:	d83e      	bhi.n	80013a6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2201      	movs	r2, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <OLED_DrawPoint+0x72>
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	4917      	ldr	r1, [pc, #92]	; (80013b4 <OLED_DrawPoint+0xb0>)
 8001356:	00d2      	lsls	r2, r2, #3
 8001358:	440a      	add	r2, r1
 800135a:	4413      	add	r3, r2
 800135c:	7818      	ldrb	r0, [r3, #0]
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	7bf9      	ldrb	r1, [r7, #15]
 8001364:	4301      	orrs	r1, r0
 8001366:	b2c8      	uxtb	r0, r1
 8001368:	4912      	ldr	r1, [pc, #72]	; (80013b4 <OLED_DrawPoint+0xb0>)
 800136a:	00d2      	lsls	r2, r2, #3
 800136c:	440a      	add	r2, r1
 800136e:	4413      	add	r3, r2
 8001370:	4602      	mov	r2, r0
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e018      	b.n	80013a8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <OLED_DrawPoint+0xb0>)
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	440a      	add	r2, r1
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25a      	sxtb	r2, r3
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	43db      	mvns	r3, r3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4013      	ands	r3, r2
 8001390:	b259      	sxtb	r1, r3
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	b2c8      	uxtb	r0, r1
 8001398:	4906      	ldr	r1, [pc, #24]	; (80013b4 <OLED_DrawPoint+0xb0>)
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	440a      	add	r2, r1
 800139e:	4413      	add	r3, r2
 80013a0:	4602      	mov	r2, r0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e000      	b.n	80013a8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80013a6:	bf00      	nop
}
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000022c 	.word	0x2000022c

080013b8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4623      	mov	r3, r4
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	4603      	mov	r3, r0
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	460b      	mov	r3, r1
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	4613      	mov	r3, r2
 80013d4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80013da:	797b      	ldrb	r3, [r7, #5]
 80013dc:	3b20      	subs	r3, #32
 80013de:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	73bb      	strb	r3, [r7, #14]
 80013e4:	e04d      	b.n	8001482 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d10b      	bne.n	8001404 <OLED_ShowChar+0x4c>
 80013ec:	797a      	ldrb	r2, [r7, #5]
 80013ee:	7bb9      	ldrb	r1, [r7, #14]
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <OLED_ShowChar+0xdc>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4403      	add	r3, r0
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e007      	b.n	8001414 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001404:	797a      	ldrb	r2, [r7, #5]
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	4923      	ldr	r1, [pc, #140]	; (8001498 <OLED_ShowChar+0xe0>)
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	440a      	add	r2, r1
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001414:	2300      	movs	r3, #0
 8001416:	737b      	strb	r3, [r7, #13]
 8001418:	e02d      	b.n	8001476 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da07      	bge.n	8001432 <OLED_ShowChar+0x7a>
 8001422:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001426:	79b9      	ldrb	r1, [r7, #6]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff6a 	bl	8001304 <OLED_DrawPoint>
 8001430:	e00c      	b.n	800144c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	79b9      	ldrb	r1, [r7, #6]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff5c 	bl	8001304 <OLED_DrawPoint>
			temp<<=1;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
			y++;
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	7b3b      	ldrb	r3, [r7, #12]
 800145c:	1ad2      	subs	r2, r2, r3
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d105      	bne.n	8001470 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001464:	7b3b      	ldrb	r3, [r7, #12]
 8001466:	71bb      	strb	r3, [r7, #6]
				x++;
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
				break;
 800146e:	e005      	b.n	800147c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001470:	7b7b      	ldrb	r3, [r7, #13]
 8001472:	3301      	adds	r3, #1
 8001474:	737b      	strb	r3, [r7, #13]
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	2b07      	cmp	r3, #7
 800147a:	d9ce      	bls.n	800141a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	3301      	adds	r3, #1
 8001480:	73bb      	strb	r3, [r7, #14]
 8001482:	7bba      	ldrb	r2, [r7, #14]
 8001484:	793b      	ldrb	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3ad      	bcc.n	80013e6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	0800ecc4 	.word	0x0800ecc4
 8001498:	0800f138 	.word	0x0800f138

0800149c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	4603      	mov	r3, r0
 80014a4:	603a      	str	r2, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	460b      	mov	r3, r1
 80014aa:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80014ac:	e01f      	b.n	80014ee <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b7a      	cmp	r3, #122	; 0x7a
 80014b2:	d904      	bls.n	80014be <OLED_ShowString+0x22>
 80014b4:	2300      	movs	r3, #0
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	3310      	adds	r3, #16
 80014bc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b3a      	cmp	r3, #58	; 0x3a
 80014c2:	d905      	bls.n	80014d0 <OLED_ShowString+0x34>
 80014c4:	2300      	movs	r3, #0
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	71bb      	strb	r3, [r7, #6]
 80014cc:	f7ff fef4 	bl	80012b8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	79b9      	ldrb	r1, [r7, #6]
 80014d6:	79f8      	ldrb	r0, [r7, #7]
 80014d8:	2301      	movs	r3, #1
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	230c      	movs	r3, #12
 80014de:	f7ff ff6b 	bl	80013b8 <OLED_ShowChar>
        x+=8;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3308      	adds	r3, #8
 80014e6:	71fb      	strb	r3, [r7, #7]
        p++;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1db      	bne.n	80014ae <OLED_ShowString+0x12>
    }  
}	 
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <OLED_Init>:

void OLED_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001504:	f004 faca 	bl	8005a9c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <OLED_Init+0x110>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <OLED_Init+0x110>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <OLED_Init+0x110>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <OLED_Init+0x110>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001520:	f004 fad0 	bl	8005ac4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001524:	2200      	movs	r2, #0
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	483a      	ldr	r0, [pc, #232]	; (8001614 <OLED_Init+0x114>)
 800152a:	f003 fb07 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800152e:	2064      	movs	r0, #100	; 0x64
 8001530:	f002 ffa0 	bl	8004474 <HAL_Delay>
	OLED_RST_Set();
 8001534:	2201      	movs	r2, #1
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	4836      	ldr	r0, [pc, #216]	; (8001614 <OLED_Init+0x114>)
 800153a:	f003 faff 	bl	8004b3c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800153e:	2100      	movs	r1, #0
 8001540:	20ae      	movs	r0, #174	; 0xae
 8001542:	f7ff fe6f 	bl	8001224 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001546:	2100      	movs	r1, #0
 8001548:	20d5      	movs	r0, #213	; 0xd5
 800154a:	f7ff fe6b 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800154e:	2100      	movs	r1, #0
 8001550:	2050      	movs	r0, #80	; 0x50
 8001552:	f7ff fe67 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001556:	2100      	movs	r1, #0
 8001558:	20a8      	movs	r0, #168	; 0xa8
 800155a:	f7ff fe63 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800155e:	2100      	movs	r1, #0
 8001560:	203f      	movs	r0, #63	; 0x3f
 8001562:	f7ff fe5f 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001566:	2100      	movs	r1, #0
 8001568:	20d3      	movs	r0, #211	; 0xd3
 800156a:	f7ff fe5b 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff fe57 	bl	8001224 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001576:	2100      	movs	r1, #0
 8001578:	2040      	movs	r0, #64	; 0x40
 800157a:	f7ff fe53 	bl	8001224 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800157e:	2100      	movs	r1, #0
 8001580:	208d      	movs	r0, #141	; 0x8d
 8001582:	f7ff fe4f 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001586:	2100      	movs	r1, #0
 8001588:	2014      	movs	r0, #20
 800158a:	f7ff fe4b 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800158e:	2100      	movs	r1, #0
 8001590:	2020      	movs	r0, #32
 8001592:	f7ff fe47 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001596:	2100      	movs	r1, #0
 8001598:	2002      	movs	r0, #2
 800159a:	f7ff fe43 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800159e:	2100      	movs	r1, #0
 80015a0:	20a1      	movs	r0, #161	; 0xa1
 80015a2:	f7ff fe3f 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80015a6:	2100      	movs	r1, #0
 80015a8:	20c0      	movs	r0, #192	; 0xc0
 80015aa:	f7ff fe3b 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80015ae:	2100      	movs	r1, #0
 80015b0:	20da      	movs	r0, #218	; 0xda
 80015b2:	f7ff fe37 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80015b6:	2100      	movs	r1, #0
 80015b8:	2012      	movs	r0, #18
 80015ba:	f7ff fe33 	bl	8001224 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80015be:	2100      	movs	r1, #0
 80015c0:	2081      	movs	r0, #129	; 0x81
 80015c2:	f7ff fe2f 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80015c6:	2100      	movs	r1, #0
 80015c8:	20ef      	movs	r0, #239	; 0xef
 80015ca:	f7ff fe2b 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80015ce:	2100      	movs	r1, #0
 80015d0:	20d9      	movs	r0, #217	; 0xd9
 80015d2:	f7ff fe27 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80015d6:	2100      	movs	r1, #0
 80015d8:	20f1      	movs	r0, #241	; 0xf1
 80015da:	f7ff fe23 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80015de:	2100      	movs	r1, #0
 80015e0:	20db      	movs	r0, #219	; 0xdb
 80015e2:	f7ff fe1f 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80015e6:	2100      	movs	r1, #0
 80015e8:	2030      	movs	r0, #48	; 0x30
 80015ea:	f7ff fe1b 	bl	8001224 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80015ee:	2100      	movs	r1, #0
 80015f0:	20a4      	movs	r0, #164	; 0xa4
 80015f2:	f7ff fe17 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80015f6:	2100      	movs	r1, #0
 80015f8:	20a6      	movs	r0, #166	; 0xa6
 80015fa:	f7ff fe13 	bl	8001224 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80015fe:	2100      	movs	r1, #0
 8001600:	20af      	movs	r0, #175	; 0xaf
 8001602:	f7ff fe0f 	bl	8001224 <OLED_WR_Byte>
	OLED_Clear(); 
 8001606:	f7ff fe57 	bl	80012b8 <OLED_Clear>
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40021000 	.word	0x40021000

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f002 feb8 	bl	8004390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001620:	f000 f87c 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001624:	f000 fbc6 	bl	8001db4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001628:	f000 faf0 	bl	8001c0c <MX_TIM8_Init>
  MX_TIM2_Init();
 800162c:	f000 f9a0 	bl	8001970 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001630:	f000 f900 	bl	8001834 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001634:	f000 f9f0 	bl	8001a18 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001638:	f000 fb92 	bl	8001d60 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800163c:	f000 f8cc 	bl	80017d8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001640:	f000 fa3e 	bl	8001ac0 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001644:	f000 faac 	bl	8001ba0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001648:	f7ff ff5a 	bl	8001500 <OLED_Init>
  HAL_TIM_Base_Start(&htim7); //start timer to use delay_ms function for ultrasonic task
 800164c:	481e      	ldr	r0, [pc, #120]	; (80016c8 <main+0xb0>)
 800164e:	f004 fef5 	bl	800643c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer, 50); //Receive 3 bytes
 8001652:	2232      	movs	r2, #50	; 0x32
 8001654:	491d      	ldr	r1, [pc, #116]	; (80016cc <main+0xb4>)
 8001656:	481e      	ldr	r0, [pc, #120]	; (80016d0 <main+0xb8>)
 8001658:	f006 fcc5 	bl	8007fe6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800165c:	f007 fc90 	bl	8008f80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <main+0xbc>)
 8001662:	2100      	movs	r1, #0
 8001664:	481c      	ldr	r0, [pc, #112]	; (80016d8 <main+0xc0>)
 8001666:	f007 fcd5 	bl	8009014 <osThreadNew>
 800166a:	4603      	mov	r3, r0
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <main+0xc4>)
 800166e:	6013      	str	r3, [r2, #0]

  /* creation of ShowText */
  ShowTextHandle = osThreadNew(show, NULL, &ShowText_attributes);
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <main+0xc8>)
 8001672:	2100      	movs	r1, #0
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <main+0xcc>)
 8001676:	f007 fccd 	bl	8009014 <osThreadNew>
 800167a:	4603      	mov	r3, r0
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <main+0xd0>)
 800167e:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(Motor, NULL, &MotorTask_attributes);
 8001680:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <main+0xd4>)
 8001682:	2100      	movs	r1, #0
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <main+0xd8>)
 8001686:	f007 fcc5 	bl	8009014 <osThreadNew>
 800168a:	4603      	mov	r3, r0
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <main+0xdc>)
 800168e:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <main+0xe0>)
 8001692:	2100      	movs	r1, #0
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <main+0xe4>)
 8001696:	f007 fcbd 	bl	8009014 <osThreadNew>
 800169a:	4603      	mov	r3, r0
 800169c:	4a18      	ldr	r2, [pc, #96]	; (8001700 <main+0xe8>)
 800169e:	6013      	str	r3, [r2, #0]

  /* creation of gyroTask */
  gyroTaskHandle = osThreadNew(gyro_task, NULL, &gyroTask_attributes);
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <main+0xec>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4818      	ldr	r0, [pc, #96]	; (8001708 <main+0xf0>)
 80016a6:	f007 fcb5 	bl	8009014 <osThreadNew>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <main+0xf4>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* creation of UltraSoundTask */
  UltraSoundTaskHandle = osThreadNew(ultrasound_task, NULL, &UltraSoundTask_attributes);
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <main+0xf8>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <main+0xfc>)
 80016b6:	f007 fcad 	bl	8009014 <osThreadNew>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <main+0x100>)
 80016be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016c0:	f007 fc82 	bl	8008fc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <main+0xac>
 80016c6:	bf00      	nop
 80016c8:	200007a0 	.word	0x200007a0
 80016cc:	2000088c 	.word	0x2000088c
 80016d0:	20000830 	.word	0x20000830
 80016d4:	0800f728 	.word	0x0800f728
 80016d8:	08002911 	.word	0x08002911
 80016dc:	20000874 	.word	0x20000874
 80016e0:	0800f74c 	.word	0x0800f74c
 80016e4:	080032c9 	.word	0x080032c9
 80016e8:	20000878 	.word	0x20000878
 80016ec:	0800f770 	.word	0x0800f770
 80016f0:	0800338d 	.word	0x0800338d
 80016f4:	2000087c 	.word	0x2000087c
 80016f8:	0800f794 	.word	0x0800f794
 80016fc:	080037b5 	.word	0x080037b5
 8001700:	20000880 	.word	0x20000880
 8001704:	0800f7b8 	.word	0x0800f7b8
 8001708:	08003ad1 	.word	0x08003ad1
 800170c:	20000884 	.word	0x20000884
 8001710:	0800f7dc 	.word	0x0800f7dc
 8001714:	080039b1 	.word	0x080039b1
 8001718:	20000888 	.word	0x20000888

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f00a fa62 	bl	800bbf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <SystemClock_Config+0xb4>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <SystemClock_Config+0xb4>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <SystemClock_Config+0xb4>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <SystemClock_Config+0xb8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <SystemClock_Config+0xb8>)
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <SystemClock_Config+0xb8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001780:	2310      	movs	r3, #16
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f004 f9ad 	bl	8005aec <HAL_RCC_OscConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001798:	f002 fa74 	bl	8003c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179c:	230f      	movs	r3, #15
 800179e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fc10 	bl	8005fdc <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017c2:	f002 fa5f 	bl	8003c84 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	; 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C1_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_I2C1_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C1_Init+0x50>)
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_I2C1_Init+0x58>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_I2C1_Init+0x50>)
 8001816:	f003 f9ab 	bl	8004b70 <HAL_I2C_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001820:	f002 fa30 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000062c 	.word	0x2000062c
 800182c:	40005400 	.word	0x40005400
 8001830:	000186a0 	.word	0x000186a0

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2220      	movs	r2, #32
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00a f9c1 	bl	800bbf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <MX_TIM1_Init+0x134>)
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <MX_TIM1_Init+0x138>)
 8001876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <MX_TIM1_Init+0x134>)
 800187a:	22a0      	movs	r2, #160	; 0xa0
 800187c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <MX_TIM1_Init+0x134>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <MX_TIM1_Init+0x134>)
 8001886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800188a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <MX_TIM1_Init+0x134>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <MX_TIM1_Init+0x134>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <MX_TIM1_Init+0x134>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189e:	4832      	ldr	r0, [pc, #200]	; (8001968 <MX_TIM1_Init+0x134>)
 80018a0:	f004 fd7c 	bl	800639c <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018aa:	f002 f9eb 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b8:	4619      	mov	r1, r3
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <MX_TIM1_Init+0x134>)
 80018bc:	f005 fc64 	bl	8007188 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018c6:	f002 f9dd 	bl	8003c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ca:	4827      	ldr	r0, [pc, #156]	; (8001968 <MX_TIM1_Init+0x134>)
 80018cc:	f004 fe1e 	bl	800650c <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018d6:	f002 f9d5 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e6:	4619      	mov	r1, r3
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <MX_TIM1_Init+0x134>)
 80018ea:	f006 f9bb 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018f4:	f002 f9c6 	bl	8003c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f8:	2360      	movs	r3, #96	; 0x60
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	220c      	movs	r2, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <MX_TIM1_Init+0x134>)
 800191a:	f005 fb73 	bl	8007004 <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001924:	f002 f9ae 	bl	8003c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800193c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001940:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM1_Init+0x134>)
 800194c:	f006 fa06 	bl	8007d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001956:	f002 f995 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM1_Init+0x134>)
 800195c:	f002 fb4a 	bl	8003ff4 <HAL_TIM_MspPostInit>

}
 8001960:	bf00      	nop
 8001962:	3758      	adds	r7, #88	; 0x58
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000680 	.word	0x20000680
 800196c:	40010000 	.word	0x40010000

08001970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f00a f938 	bl	800bbf4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_TIM2_Init+0xa4>)
 800198e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_TIM2_Init+0xa4>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_TIM2_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019b4:	2303      	movs	r3, #3
 80019b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019c4:	230a      	movs	r3, #10
 80019c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80019d4:	230a      	movs	r3, #10
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019e0:	f005 f838 	bl	8006a54 <HAL_TIM_Encoder_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80019ea:	f002 f94b 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019fc:	f006 f932 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a06:	f002 f93d 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200006c8 	.word	0x200006c8

08001a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00a f8e4 	bl	800bbf4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a36:	4a21      	ldr	r2, [pc, #132]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001a86:	f004 ffe5 	bl	8006a54 <HAL_TIM_Encoder_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a90:	f002 f8f8 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM3_Init+0xa0>)
 8001aa2:	f006 f8df 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001aac:	f002 f8ea 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000710 	.word	0x20000710
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001aec:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <MX_TIM4_Init+0xdc>)
 8001aee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001af2:	220f      	movs	r2, #15
 8001af4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b10:	4821      	ldr	r0, [pc, #132]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b12:	f004 fc43 	bl	800639c <HAL_TIM_Base_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001b1c:	f002 f8b2 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481a      	ldr	r0, [pc, #104]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b2e:	f005 fb2b 	bl	8007188 <HAL_TIM_ConfigClockSource>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b38:	f002 f8a4 	bl	8003c84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b3c:	4816      	ldr	r0, [pc, #88]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b3e:	f004 fe07 	bl	8006750 <HAL_TIM_IC_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f002 f89c 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480f      	ldr	r0, [pc, #60]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b5c:	f006 f882 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001b66:	f002 f88d 	bl	8003c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_TIM4_Init+0xd8>)
 8001b82:	f005 f9a3 	bl	8006ecc <HAL_TIM_IC_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001b8c:	f002 f87a 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000758 	.word	0x20000758
 8001b9c:	40000800 	.word	0x40000800

08001ba0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_TIM7_Init+0x68>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16-1;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bd0:	f004 fbe4 	bl	800639c <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001bda:	f002 f853 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bec:	f006 f83a 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f002 f845 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200007a0 	.word	0x200007a0
 8001c08:	40001400 	.word	0x40001400

08001c0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2220      	movs	r2, #32
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 ffd5 	bl	800bbf4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c4c:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <MX_TIM8_Init+0x150>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c50:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c5e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c76:	4838      	ldr	r0, [pc, #224]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c78:	f004 fb90 	bl	800639c <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c82:	f001 ffff 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c90:	4619      	mov	r1, r3
 8001c92:	4831      	ldr	r0, [pc, #196]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001c94:	f005 fa78 	bl	8007188 <HAL_TIM_ConfigClockSource>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c9e:	f001 fff1 	bl	8003c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ca2:	482d      	ldr	r0, [pc, #180]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001ca4:	f004 fc32 	bl	800650c <HAL_TIM_PWM_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cae:	f001 ffe9 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4825      	ldr	r0, [pc, #148]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001cc2:	f005 ffcf 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f001 ffda 	bl	8003c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd0:	2360      	movs	r3, #96	; 0x60
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001cf6:	f005 f985 	bl	8007004 <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d00:	f001 ffc0 	bl	8003c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4812      	ldr	r0, [pc, #72]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001d0e:	f005 f979 	bl	8007004 <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d18:	f001 ffb4 	bl	8003c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM8_Init+0x14c>)
 8001d40:	f006 f80c 	bl	8007d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001d4a:	f001 ff9b 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3758      	adds	r7, #88	; 0x58
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200007e8 	.word	0x200007e8
 8001d5c:	40010400 	.word	0x40010400

08001d60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART3_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d98:	f006 f846 	bl	8007e28 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f001 ff6f 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000830 	.word	0x20000830
 8001db0:	40004800 	.word	0x40004800

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MX_GPIO_Init+0x118>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001e78:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <MX_GPIO_Init+0x11c>)
 8001e7a:	f002 fe5f 	bl	8004b3c <HAL_GPIO_WritePin>
                          |LED3_Pin|Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	213c      	movs	r1, #60	; 0x3c
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <MX_GPIO_Init+0x120>)
 8001e84:	f002 fe5a 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED_3_Pin Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e88:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001e8c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <MX_GPIO_Init+0x11c>)
 8001ea2:	f002 fcaf 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001ea6:	233c      	movs	r3, #60	; 0x3c
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_GPIO_Init+0x120>)
 8001ebe:	f002 fca1 	bl	8004804 <HAL_GPIO_Init>

}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <stop>:

/* USER CODE BEGIN 4 */
void stop()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//Stop both wheels
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <stop+0x20>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <stop+0x20>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200007e8 	.word	0x200007e8

08001efc <forward>:

void forward()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	//PID
	pwmvalR = pwmval;
 8001f00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <forward+0x6c>)
 8001f08:	801a      	strh	r2, [r3, #0]
	pwmvalL = pwmval+110;
 8001f0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	336e      	adds	r3, #110	; 0x6e
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <forward+0x70>)
 8001f16:	801a      	strh	r2, [r3, #0]
	//Left motor
	htim1.Instance->CCR4=153; //Center before starting
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <forward+0x74>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2299      	movs	r2, #153	; 0x99
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2104      	movs	r1, #4
 8001f24:	4813      	ldr	r0, [pc, #76]	; (8001f74 <forward+0x78>)
 8001f26:	f002 fe09 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	4811      	ldr	r0, [pc, #68]	; (8001f74 <forward+0x78>)
 8001f30:	f002 fe04 	bl	8004b3c <HAL_GPIO_WritePin>
//	pwmval=PIDController_Update(&motorL_PID,pwmval,spdL);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalL);
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <forward+0x70>)
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <forward+0x7c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2120      	movs	r1, #32
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <forward+0x78>)
 8001f44:	f002 fdfa 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <forward+0x78>)
 8001f4e:	f002 fdf5 	bl	8004b3c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalR);
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <forward+0x6c>)
 8001f54:	881a      	ldrh	r2, [r3, #0]
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <forward+0x7c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(10);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f002 fa89 	bl	8004474 <HAL_Delay>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200009c6 	.word	0x200009c6
 8001f6c:	200009c4 	.word	0x200009c4
 8001f70:	20000680 	.word	0x20000680
 8001f74:	40020000 	.word	0x40020000
 8001f78:	200007e8 	.word	0x200007e8

08001f7c <forward2>:

//Not used
void forward2()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	//PID
	pwmvalR2 = pwmval2;
 8001f80:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <forward2+0x6c>)
 8001f88:	801a      	strh	r2, [r3, #0]
	pwmvalL2 = pwmval2+60;
 8001f8a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	333c      	adds	r3, #60	; 0x3c
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <forward2+0x70>)
 8001f96:	801a      	strh	r2, [r3, #0]
	//Left motor
	htim1.Instance->CCR4=153; //Center before starting
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <forward2+0x74>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2299      	movs	r2, #153	; 0x99
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <forward2+0x78>)
 8001fa6:	f002 fdc9 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2108      	movs	r1, #8
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <forward2+0x78>)
 8001fb0:	f002 fdc4 	bl	8004b3c <HAL_GPIO_WritePin>
//	pwmval=PIDController_Update(&motorL_PID,pwmval,spdL);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalL2);
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <forward2+0x70>)
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <forward2+0x7c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34

	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <forward2+0x78>)
 8001fc4:	f002 fdba 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2110      	movs	r1, #16
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <forward2+0x78>)
 8001fce:	f002 fdb5 	bl	8004b3c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalR2);
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <forward2+0x6c>)
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <forward2+0x7c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f002 fa49 	bl	8004474 <HAL_Delay>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200009ca 	.word	0x200009ca
 8001fec:	200009c8 	.word	0x200009c8
 8001ff0:	20000680 	.word	0x20000680
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	200007e8 	.word	0x200007e8

08001ffc <reverse>:


void reverse()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	//PID
	pwmvalR = pwmval-20;  //20
 8002000:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b14      	subs	r3, #20
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <reverse+0x70>)
 800200c:	801a      	strh	r2, [r3, #0]
	pwmvalL = pwmval+65; //45
 800200e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002012:	b29b      	uxth	r3, r3
 8002014:	3341      	adds	r3, #65	; 0x41
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <reverse+0x74>)
 800201a:	801a      	strh	r2, [r3, #0]
	//Left motor
	htim1.Instance->CCR4=153; //Center before starting
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <reverse+0x78>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2299      	movs	r2, #153	; 0x99
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	2104      	movs	r1, #4
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <reverse+0x7c>)
 800202a:	f002 fd87 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2108      	movs	r1, #8
 8002032:	4811      	ldr	r0, [pc, #68]	; (8002078 <reverse+0x7c>)
 8002034:	f002 fd82 	bl	8004b3c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalL);
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <reverse+0x74>)
 800203a:	881a      	ldrh	r2, [r3, #0]
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <reverse+0x80>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2120      	movs	r1, #32
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <reverse+0x7c>)
 8002048:	f002 fd78 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2110      	movs	r1, #16
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <reverse+0x7c>)
 8002052:	f002 fd73 	bl	8004b3c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalR);
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <reverse+0x70>)
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <reverse+0x80>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(10);
 8002060:	200a      	movs	r0, #10
 8002062:	f002 fa07 	bl	8004474 <HAL_Delay>

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200009c6 	.word	0x200009c6
 8002070:	200009c4 	.word	0x200009c4
 8002074:	20000680 	.word	0x20000680
 8002078:	40020000 	.word	0x40020000
 800207c:	200007e8 	.word	0x200007e8

08002080 <fullLeftForward>:

void fullLeftForward(float value)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
	//Time taken=3.5s
	htim1.Instance->CCR4=153; //Center before starting
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <fullLeftForward+0x44>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2299      	movs	r2, #153	; 0x99
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
	forward2();
 8002092:	f7ff ff73 	bl	8001f7c <forward2>
	htim1.Instance->CCR4=108; //Extreme left
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <fullLeftForward+0x44>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	226c      	movs	r2, #108	; 0x6c
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 800209e:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a6:	ee17 0a90 	vmov	r0, s15
 80020aa:	f002 f9e3 	bl	8004474 <HAL_Delay>
	htim1.Instance->CCR4=153; //Center
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <fullLeftForward+0x44>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2299      	movs	r2, #153	; 0x99
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
	stop();
 80020b6:	f7ff ff0f 	bl	8001ed8 <stop>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000680 	.word	0x20000680

080020c8 <fullRightForward>:

void fullRightForward(float value)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
	//Time taken=3.95s
	htim1.Instance->CCR4=153; //Center before starting
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <fullRightForward+0x44>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2299      	movs	r2, #153	; 0x99
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
	forward2();
 80020da:	f7ff ff4f 	bl	8001f7c <forward2>
	htim1.Instance->CCR4=223; //Extreme right
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <fullRightForward+0x44>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	22df      	movs	r2, #223	; 0xdf
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 80020e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ee:	ee17 0a90 	vmov	r0, s15
 80020f2:	f002 f9bf 	bl	8004474 <HAL_Delay>
	htim1.Instance->CCR4=153; //Center
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <fullRightForward+0x44>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2299      	movs	r2, #153	; 0x99
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
	stop();
 80020fe:	f7ff feeb 	bl	8001ed8 <stop>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000680 	.word	0x20000680

08002110 <fullRightReverse>:

void fullRightReverse(float value)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	ed87 0a01 	vstr	s0, [r7, #4]
	htim1.Instance->CCR4=153; //Center before starting
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <fullRightReverse+0x44>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2299      	movs	r2, #153	; 0x99
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
	reverse();
 8002122:	f7ff ff6b 	bl	8001ffc <reverse>
	htim1.Instance->CCR4=218; //Extreme right
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <fullRightReverse+0x44>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	22da      	movs	r2, #218	; 0xda
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 800212e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002136:	ee17 0a90 	vmov	r0, s15
 800213a:	f002 f99b 	bl	8004474 <HAL_Delay>
	htim1.Instance->CCR4=153; //Center
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <fullRightReverse+0x44>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2299      	movs	r2, #153	; 0x99
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
	stop();
 8002146:	f7ff fec7 	bl	8001ed8 <stop>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000680 	.word	0x20000680

08002158 <fullLeftReverse>:

void fullLeftReverse(float value)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	ed87 0a01 	vstr	s0, [r7, #4]
	htim1.Instance->CCR4=153; //Center before starting
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <fullLeftReverse+0x44>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2299      	movs	r2, #153	; 0x99
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
	reverse();
 800216a:	f7ff ff47 	bl	8001ffc <reverse>
	htim1.Instance->CCR4=108; //Extreme left
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <fullLeftReverse+0x44>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	226c      	movs	r2, #108	; 0x6c
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 8002176:	edd7 7a01 	vldr	s15, [r7, #4]
 800217a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f002 f977 	bl	8004474 <HAL_Delay>
	htim1.Instance->CCR4=153; //Center
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <fullLeftReverse+0x44>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2299      	movs	r2, #153	; 0x99
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
	stop();
 800218e:	f7ff fea3 	bl	8001ed8 <stop>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000680 	.word	0x20000680

080021a0 <tightRightTurn>:

//Calibrated fully absolutely 20x20cm
//Lab floor and hall
void tightRightTurn()
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
//	forward();
//	HAL_Delay(400); //To achieve 20cm
//	stop();

		//Super tight right completed (Used)
		servomotor_set(154);
 80021a4:	209a      	movs	r0, #154	; 0x9a
 80021a6:	f000 f94b 	bl	8002440 <servomotor_set>
		HAL_Delay(1000);
 80021aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ae:	f002 f961 	bl	8004474 <HAL_Delay>
		forward();
 80021b2:	f7ff fea3 	bl	8001efc <forward>
		fullRightForward(3525);
 80021b6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80021e8 <tightRightTurn+0x48>
 80021ba:	f7ff ff85 	bl	80020c8 <fullRightForward>
		fullLeftReverse(750);
 80021be:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80021ec <tightRightTurn+0x4c>
 80021c2:	f7ff ffc9 	bl	8002158 <fullLeftReverse>
		servomotor_set(153);
 80021c6:	2099      	movs	r0, #153	; 0x99
 80021c8:	f000 f93a 	bl	8002440 <servomotor_set>
		HAL_Delay(500);
 80021cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021d0:	f002 f950 	bl	8004474 <HAL_Delay>
		forward();
 80021d4:	f7ff fe92 	bl	8001efc <forward>
		HAL_Delay(50);
 80021d8:	2032      	movs	r0, #50	; 0x32
 80021da:	f002 f94b 	bl	8004474 <HAL_Delay>
		stop();
 80021de:	f7ff fe7b 	bl	8001ed8 <stop>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	455c5000 	.word	0x455c5000
 80021ec:	443b8000 	.word	0x443b8000

080021f0 <tightLeftTurn>:
}

//Calibrated fully absolutely 20x20cm
//Lab floor and Hall
void tightLeftTurn()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
//	forward();
//	HAL_Delay(700); //To achieve 20cm
//	stop();

	//Super tight left complete (Used)
	servomotor_set(154);
 80021f4:	209a      	movs	r0, #154	; 0x9a
 80021f6:	f000 f923 	bl	8002440 <servomotor_set>
	HAL_Delay(1000);
 80021fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fe:	f002 f939 	bl	8004474 <HAL_Delay>
	forward();
 8002202:	f7ff fe7b 	bl	8001efc <forward>
	fullLeftForward(3525);
 8002206:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002238 <tightLeftTurn+0x48>
 800220a:	f7ff ff39 	bl	8002080 <fullLeftForward>
	fullRightReverse(750);
 800220e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800223c <tightLeftTurn+0x4c>
 8002212:	f7ff ff7d 	bl	8002110 <fullRightReverse>
	servomotor_set(153);
 8002216:	2099      	movs	r0, #153	; 0x99
 8002218:	f000 f912 	bl	8002440 <servomotor_set>
	HAL_Delay(500);
 800221c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002220:	f002 f928 	bl	8004474 <HAL_Delay>
	forward();
 8002224:	f7ff fe6a 	bl	8001efc <forward>
	HAL_Delay(100);
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	f002 f923 	bl	8004474 <HAL_Delay>
	stop();
 800222e:	f7ff fe53 	bl	8001ed8 <stop>

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	455c5000 	.word	0x455c5000
 800223c:	443b8000 	.word	0x443b8000

08002240 <tightreverseLeftTurn>:
}

//Calibrated fully absolutely 20x20cm
//Lab floor and Hall
void tightreverseLeftTurn()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	servomotor_set(153);
 8002244:	2099      	movs	r0, #153	; 0x99
 8002246:	f000 f8fb 	bl	8002440 <servomotor_set>
	HAL_Delay(1000);
 800224a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224e:	f002 f911 	bl	8004474 <HAL_Delay>
	//reverse();
	//HAL_Delay(50); //To achieve 20cm
	forward();
 8002252:	f7ff fe53 	bl	8001efc <forward>
	HAL_Delay(100);
 8002256:	2064      	movs	r0, #100	; 0x64
 8002258:	f002 f90c 	bl	8004474 <HAL_Delay>
	fullLeftReverse(1000);
 800225c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80022a8 <tightreverseLeftTurn+0x68>
 8002260:	f7ff ff7a 	bl	8002158 <fullLeftReverse>
	fullRightForward(1000);
 8002264:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80022a8 <tightreverseLeftTurn+0x68>
 8002268:	f7ff ff2e 	bl	80020c8 <fullRightForward>
	fullLeftReverse(1000);
 800226c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80022a8 <tightreverseLeftTurn+0x68>
 8002270:	f7ff ff72 	bl	8002158 <fullLeftReverse>
	fullRightForward(1000);
 8002274:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80022a8 <tightreverseLeftTurn+0x68>
 8002278:	f7ff ff26 	bl	80020c8 <fullRightForward>
	fullLeftReverse(600); //To achieve 90 degrees
 800227c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80022ac <tightreverseLeftTurn+0x6c>
 8002280:	f7ff ff6a 	bl	8002158 <fullLeftReverse>
	servomotor_set(153);
 8002284:	2099      	movs	r0, #153	; 0x99
 8002286:	f000 f8db 	bl	8002440 <servomotor_set>
	HAL_Delay(500);
 800228a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800228e:	f002 f8f1 	bl	8004474 <HAL_Delay>
	reverse();
 8002292:	f7ff feb3 	bl	8001ffc <reverse>
	HAL_Delay(1000); //To achieve 20cm
 8002296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800229a:	f002 f8eb 	bl	8004474 <HAL_Delay>
	stop();
 800229e:	f7ff fe1b 	bl	8001ed8 <stop>



}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	447a0000 	.word	0x447a0000
 80022ac:	44160000 	.word	0x44160000

080022b0 <tightreverseRightTurn>:


//Calibrated fully absolutely 20x20cm
//Lab floor and Hall
void tightreverseRightTurn()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	servomotor_set(153);
 80022b4:	2099      	movs	r0, #153	; 0x99
 80022b6:	f000 f8c3 	bl	8002440 <servomotor_set>
	HAL_Delay(1000);
 80022ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022be:	f002 f8d9 	bl	8004474 <HAL_Delay>
	//reverse();
	//HAL_Delay(100); //To achieve 20cm
	forward();
 80022c2:	f7ff fe1b 	bl	8001efc <forward>
	HAL_Delay(250);
 80022c6:	20fa      	movs	r0, #250	; 0xfa
 80022c8:	f002 f8d4 	bl	8004474 <HAL_Delay>
	fullRightReverse(1000);
 80022cc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002318 <tightreverseRightTurn+0x68>
 80022d0:	f7ff ff1e 	bl	8002110 <fullRightReverse>
	fullLeftForward(1000);
 80022d4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002318 <tightreverseRightTurn+0x68>
 80022d8:	f7ff fed2 	bl	8002080 <fullLeftForward>
	fullRightReverse(1000);
 80022dc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002318 <tightreverseRightTurn+0x68>
 80022e0:	f7ff ff16 	bl	8002110 <fullRightReverse>
	fullLeftForward(1000);
 80022e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002318 <tightreverseRightTurn+0x68>
 80022e8:	f7ff feca 	bl	8002080 <fullLeftForward>
	fullRightReverse(750); //To achieve 90 degrees
 80022ec:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800231c <tightreverseRightTurn+0x6c>
 80022f0:	f7ff ff0e 	bl	8002110 <fullRightReverse>
	servomotor_set(153);
 80022f4:	2099      	movs	r0, #153	; 0x99
 80022f6:	f000 f8a3 	bl	8002440 <servomotor_set>
	HAL_Delay(500);
 80022fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022fe:	f002 f8b9 	bl	8004474 <HAL_Delay>
	reverse();
 8002302:	f7ff fe7b 	bl	8001ffc <reverse>
	HAL_Delay(800); //To achieve 20cm
 8002306:	f44f 7048 	mov.w	r0, #800	; 0x320
 800230a:	f002 f8b3 	bl	8004474 <HAL_Delay>
	stop();
 800230e:	f7ff fde3 	bl	8001ed8 <stop>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	447a0000 	.word	0x447a0000
 800231c:	443b8000 	.word	0x443b8000

08002320 <gyroforward>:
	HAL_Delay(900); //To achieve 20cm
	stop();
}

void gyroforward()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	for(;;)
	{
		if(Distance > 10)
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <gyroforward+0x24>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b0a      	cmp	r3, #10
 800232a:	d902      	bls.n	8002332 <gyroforward+0x12>
		{
			forward();
 800232c:	f7ff fde6 	bl	8001efc <forward>
 8002330:	e002      	b.n	8002338 <gyroforward+0x18>
		}
		else
		{
			stop();
 8002332:	f7ff fdd1 	bl	8001ed8 <stop>
			break;
 8002336:	e003      	b.n	8002340 <gyroforward+0x20>
		}
		osDelay(20);
 8002338:	2014      	movs	r0, #20
 800233a:	f006 fefd 	bl	8009138 <osDelay>
		if(Distance > 10)
 800233e:	e7f1      	b.n	8002324 <gyroforward+0x4>
	}
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000015 	.word	0x20000015

08002348 <putTen>:
		}
		osDelay(10);
	}
}

void putTen() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	for(;;) {
		if(Distance > 10) {
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <putTen+0x24>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b0a      	cmp	r3, #10
 8002352:	d902      	bls.n	800235a <putTen+0x12>
			forward();
 8002354:	f7ff fdd2 	bl	8001efc <forward>
 8002358:	e002      	b.n	8002360 <putTen+0x18>
		}
		else {
			stop();
 800235a:	f7ff fdbd 	bl	8001ed8 <stop>
			break;
 800235e:	e003      	b.n	8002368 <putTen+0x20>
		}
		osDelay(10);
 8002360:	200a      	movs	r0, #10
 8002362:	f006 fee9 	bl	8009138 <osDelay>
		if(Distance > 10) {
 8002366:	e7f1      	b.n	800234c <putTen+0x4>
	}
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000015 	.word	0x20000015

08002370 <forward_motor_prep>:



void forward_motor_prep()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	2104      	movs	r1, #4
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <forward_motor_prep+0x30>)
 800237a:	f002 fbdf 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	2108      	movs	r1, #8
 8002382:	4807      	ldr	r0, [pc, #28]	; (80023a0 <forward_motor_prep+0x30>)
 8002384:	f002 fbda 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	2120      	movs	r1, #32
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <forward_motor_prep+0x30>)
 800238e:	f002 fbd5 	bl	8004b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	2110      	movs	r1, #16
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <forward_motor_prep+0x30>)
 8002398:	f002 fbd0 	bl	8004b3c <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020000 	.word	0x40020000

080023a4 <servomotor_center>:
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
}

void servomotor_center()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
	// default: 150
	uint32_t value = 153;
 80023aa:	2399      	movs	r3, #153	; 0x99
 80023ac:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <servomotor_center+0x30>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d007      	beq.n	80023ca <servomotor_center+0x26>
		return;
	}
	htim1.Instance->CCR4 = value;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <servomotor_center+0x30>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(200);
 80023c2:	20c8      	movs	r0, #200	; 0xc8
 80023c4:	f006 feb8 	bl	8009138 <osDelay>
 80023c8:	e000      	b.n	80023cc <servomotor_center+0x28>
		return;
 80023ca:	bf00      	nop
}
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000680 	.word	0x20000680

080023d8 <servomotor_left>:

void servomotor_left()
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	// default: 107
	uint32_t value = 109;
 80023de:	236d      	movs	r3, #109	; 0x6d
 80023e0:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <servomotor_left+0x30>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d007      	beq.n	80023fe <servomotor_left+0x26>
			return;
	}
	htim1.Instance->CCR4 = value;
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <servomotor_left+0x30>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(200);
 80023f6:	20c8      	movs	r0, #200	; 0xc8
 80023f8:	f006 fe9e 	bl	8009138 <osDelay>
 80023fc:	e000      	b.n	8002400 <servomotor_left+0x28>
			return;
 80023fe:	bf00      	nop
}
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000680 	.word	0x20000680

0800240c <servomotor_right>:

void servomotor_right()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	// default: 225
	uint32_t value = 223;
 8002412:	23df      	movs	r3, #223	; 0xdf
 8002414:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <servomotor_right+0x30>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d007      	beq.n	8002432 <servomotor_right+0x26>
			return;
	}
	htim1.Instance->CCR4 = value;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <servomotor_right+0x30>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(200);
 800242a:	20c8      	movs	r0, #200	; 0xc8
 800242c:	f006 fe84 	bl	8009138 <osDelay>
 8002430:	e000      	b.n	8002434 <servomotor_right+0x28>
			return;
 8002432:	bf00      	nop
}
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000680 	.word	0x20000680

08002440 <servomotor_set>:

void servomotor_set(int value)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	if (value >= 200) value = 200;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2bc7      	cmp	r3, #199	; 0xc7
 800244c:	dd01      	ble.n	8002452 <servomotor_set+0x12>
 800244e:	23c8      	movs	r3, #200	; 0xc8
 8002450:	607b      	str	r3, [r7, #4]
	if (value <= 100) value = 100;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b64      	cmp	r3, #100	; 0x64
 8002456:	dc01      	bgt.n	800245c <servomotor_set+0x1c>
 8002458:	2364      	movs	r3, #100	; 0x64
 800245a:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <servomotor_set+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d007      	beq.n	8002478 <servomotor_set+0x38>
			return;
	}
	htim1.Instance->CCR4 = value;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <servomotor_set+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(200);
 8002470:	20c8      	movs	r0, #200	; 0xc8
 8002472:	f006 fe61 	bl	8009138 <osDelay>
 8002476:	e000      	b.n	800247a <servomotor_set+0x3a>
			return;
 8002478:	bf00      	nop
}
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000680 	.word	0x20000680

08002484 <right_turn>:
	}
	HAL_Delay(100);
}

void right_turn(int angle) //Keep for debugging purpose
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to right
	servomotor_right();
 800248c:	f7ff ffbe 	bl	800240c <servomotor_right>

	osDelay(250);
 8002490:	20fa      	movs	r0, #250	; 0xfa
 8002492:	f006 fe51 	bl	8009138 <osDelay>

	TURNING_ANGLE = 0;
 8002496:	491a      	ldr	r1, [pc, #104]	; (8002500 <right_turn+0x7c>)
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c1 2300 	strd	r2, r3, [r1]
	forward_motor_prep();
 80024a4:	f7ff ff64 	bl	8002370 <forward_motor_prep>
	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 3500);
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <right_turn+0x80>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f640 52ac 	movw	r2, #3500	; 0xdac
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 3500);
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <right_turn+0x80>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38

	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 80024bc:	e004      	b.n	80024c8 <right_turn+0x44>
		servomotor_right();
 80024be:	f7ff ffa5 	bl	800240c <servomotor_right>
		osDelay(10);
 80024c2:	200a      	movs	r0, #10
 80024c4:	f006 fe38 	bl	8009138 <osDelay>
	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	425b      	negs	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f829 	bl	8000524 <__aeabi_i2d>
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <right_turn+0x7c>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe fb00 	bl	8000adc <__aeabi_dcmplt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ed      	bne.n	80024be <right_turn+0x3a>
	}


	//Stop the Motor are completing the turn
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <right_turn+0x80>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <right_turn+0x80>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

	servomotor_center();
 80024f2:	f7ff ff57 	bl	80023a4 <servomotor_center>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000920 	.word	0x20000920
 8002504:	200007e8 	.word	0x200007e8

08002508 <left_turn>:

void left_turn(int angle) //Keep for debugging purpose
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to left
	servomotor_left();
 8002510:	f7ff ff62 	bl	80023d8 <servomotor_left>

	osDelay(250);
 8002514:	20fa      	movs	r0, #250	; 0xfa
 8002516:	f006 fe0f 	bl	8009138 <osDelay>

	TURNING_ANGLE = 0;
 800251a:	4919      	ldr	r1, [pc, #100]	; (8002580 <left_turn+0x78>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c1 2300 	strd	r2, r3, [r1]
	forward_motor_prep();
 8002528:	f7ff ff22 	bl	8002370 <forward_motor_prep>
	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 3500);
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <left_turn+0x7c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 3500);
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <left_turn+0x7c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800253e:	639a      	str	r2, [r3, #56]	; 0x38

	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 8002540:	e004      	b.n	800254c <left_turn+0x44>
		servomotor_left();
 8002542:	f7ff ff49 	bl	80023d8 <servomotor_left>
		osDelay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f006 fdf6 	bl	8009138 <osDelay>
	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fd ffe9 	bl	8000524 <__aeabi_i2d>
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <left_turn+0x78>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe fade 	bl	8000b18 <__aeabi_dcmpgt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ef      	bne.n	8002542 <left_turn+0x3a>
	}


	//Stop the Motor are completing the turn
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <left_turn+0x7c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <left_turn+0x7c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	639a      	str	r2, [r3, #56]	; 0x38

	servomotor_center();
 8002572:	f7ff ff17 	bl	80023a4 <servomotor_center>

}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000920 	.word	0x20000920
 8002584:	200007e8 	.word	0x200007e8

08002588 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	if(RX_FLAG == 0){
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_UART_RxCpltCallback+0x70>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11f      	bne.n	80025d8 <HAL_UART_RxCpltCallback+0x50>
		RX_MOTOR = (char) aRxBuffer[0];
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_UART_RxCpltCallback+0x78>)
 800259e:	701a      	strb	r2, [r3, #0]
		RX_SERVO = (char) aRxBuffer[1];
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025a2:	785a      	ldrb	r2, [r3, #1]
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_UART_RxCpltCallback+0x7c>)
 80025a6:	701a      	strb	r2, [r3, #0]
		RX_MAG = ((int)(aRxBuffer[2] - '0') * 100) + ((int)(aRxBuffer[3] - '0') * 10) + ((int)(aRxBuffer[4] - '0'));
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	3b30      	subs	r3, #48	; 0x30
 80025ae:	2264      	movs	r2, #100	; 0x64
 80025b0:	fb02 f103 	mul.w	r1, r2, r3
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025b6:	78db      	ldrb	r3, [r3, #3]
 80025b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	18ca      	adds	r2, r1, r3
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	3b30      	subs	r3, #48	; 0x30
 80025cc:	4413      	add	r3, r2
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_UART_RxCpltCallback+0x80>)
 80025d0:	6013      	str	r3, [r2, #0]
		RX_FLAG = 1;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_UART_RxCpltCallback+0x70>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
	}
	// store buffer's message
	strcpy(rpiMsg, (char*) aRxBuffer);
 80025d8:	4908      	ldr	r1, [pc, #32]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025da:	480c      	ldr	r0, [pc, #48]	; (800260c <HAL_UART_RxCpltCallback+0x84>)
 80025dc:	f009 ff9c 	bl	800c518 <strcpy>
	new_cmd_received = 1;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_UART_RxCpltCallback+0x88>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

	// recreate buffer
//	memset(aRxBuffer, '\0', sizeof(aRxBuffer));
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,50);
 80025e6:	2232      	movs	r2, #50	; 0x32
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_UART_RxCpltCallback+0x74>)
 80025ea:	480a      	ldr	r0, [pc, #40]	; (8002614 <HAL_UART_RxCpltCallback+0x8c>)
 80025ec:	f005 fcfb 	bl	8007fe6 <HAL_UART_Receive_IT>
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200009ec 	.word	0x200009ec
 80025fc:	2000088c 	.word	0x2000088c
 8002600:	200009fc 	.word	0x200009fc
 8002604:	200009fd 	.word	0x200009fd
 8002608:	20000a00 	.word	0x20000a00
 800260c:	200008cc 	.word	0x200008cc
 8002610:	20000900 	.word	0x20000900
 8002614:	20000830 	.word	0x20000830

08002618 <gyroInit>:
	}
	return (int)(progress*1000);
}

void gyroInit()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  writeByte(0x06, 0x00);
 800261c:	2100      	movs	r1, #0
 800261e:	2006      	movs	r0, #6
 8002620:	f000 f84c 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002624:	200a      	movs	r0, #10
 8002626:	f006 fda2 	bl	800916e <osDelayUntil>
  writeByte(0x03, 0x80);
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	2003      	movs	r0, #3
 800262e:	f000 f845 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002632:	200a      	movs	r0, #10
 8002634:	f006 fd9b 	bl	800916e <osDelayUntil>
  writeByte(0x07, 0x3F);
 8002638:	213f      	movs	r1, #63	; 0x3f
 800263a:	2007      	movs	r0, #7
 800263c:	f000 f83e 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002640:	200a      	movs	r0, #10
 8002642:	f006 fd94 	bl	800916e <osDelayUntil>
  writeByte(0x06, 0x01);
 8002646:	2101      	movs	r1, #1
 8002648:	2006      	movs	r0, #6
 800264a:	f000 f837 	bl	80026bc <writeByte>
  osDelayUntil(10);
 800264e:	200a      	movs	r0, #10
 8002650:	f006 fd8d 	bl	800916e <osDelayUntil>
  writeByte(0x7F, 0x20); // go to bank 2
 8002654:	2120      	movs	r1, #32
 8002656:	207f      	movs	r0, #127	; 0x7f
 8002658:	f000 f830 	bl	80026bc <writeByte>
  osDelayUntil(10);
 800265c:	200a      	movs	r0, #10
 800265e:	f006 fd86 	bl	800916e <osDelayUntil>
  writeByte(0x01, 0x2F); // config gyro, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 8002662:	212f      	movs	r1, #47	; 0x2f
 8002664:	2001      	movs	r0, #1
 8002666:	f000 f829 	bl	80026bc <writeByte>
  osDelayUntil(10);
 800266a:	200a      	movs	r0, #10
 800266c:	f006 fd7f 	bl	800916e <osDelayUntil>
  writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8002670:	2100      	movs	r1, #0
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f822 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002678:	200a      	movs	r0, #10
 800267a:	f006 fd78 	bl	800916e <osDelayUntil>
  writeByte(0x01, 0x2F); // config accel, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 800267e:	212f      	movs	r1, #47	; 0x2f
 8002680:	2001      	movs	r0, #1
 8002682:	f000 f81b 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002686:	200a      	movs	r0, #10
 8002688:	f006 fd71 	bl	800916e <osDelayUntil>
  writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 800268c:	2100      	movs	r1, #0
 800268e:	2000      	movs	r0, #0
 8002690:	f000 f814 	bl	80026bc <writeByte>
  osDelayUntil(10);
 8002694:	200a      	movs	r0, #10
 8002696:	f006 fd6a 	bl	800916e <osDelayUntil>
  writeByte(0x7F, 0x00); // return to bank 1
 800269a:	2100      	movs	r1, #0
 800269c:	207f      	movs	r0, #127	; 0x7f
 800269e:	f000 f80d 	bl	80026bc <writeByte>
  osDelayUntil(10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f006 fd63 	bl	800916e <osDelayUntil>
  writeByte(0x07, 0x00);
 80026a8:	2100      	movs	r1, #0
 80026aa:	2007      	movs	r0, #7
 80026ac:	f000 f806 	bl	80026bc <writeByte>
  osDelayUntil(10);
 80026b0:	200a      	movs	r0, #10
 80026b2:	f006 fd5c 	bl	800916e <osDelayUntil>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <writeByte>:

void writeByte(uint8_t addr, uint8_t data)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	4603      	mov	r3, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71bb      	strb	r3, [r7, #6]
  buff[0] = addr;
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <writeByte+0x3c>)
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	7013      	strb	r3, [r2, #0]
  buff[1] = data;
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <writeByte+0x3c>)
 80026d4:	79bb      	ldrb	r3, [r7, #6]
 80026d6:	7053      	strb	r3, [r2, #1]
  HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 2, 20);
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <writeByte+0x40>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	b299      	uxth	r1, r3
 80026e2:	2314      	movs	r3, #20
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2302      	movs	r3, #2
 80026e8:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <writeByte+0x3c>)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <writeByte+0x44>)
 80026ec:	f002 fb84 	bl	8004df8 <HAL_I2C_Master_Transmit>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000904 	.word	0x20000904
 80026fc:	20000014 	.word	0x20000014
 8002700:	2000062c 	.word	0x2000062c

08002704 <readByte>:

void readByte(uint8_t addr, uint8_t *data)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af02      	add	r7, sp, #8
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  buff[0] = addr;
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <readByte+0x4c>)
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	7013      	strb	r3, [r2, #0]
  // Tell we want to read from the register
  HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 1, 10);
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <readByte+0x50>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	b299      	uxth	r1, r3
 8002720:	230a      	movs	r3, #10
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <readByte+0x4c>)
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <readByte+0x54>)
 800272a:	f002 fb65 	bl	8004df8 <HAL_I2C_Master_Transmit>
  // Read 2 byte from z dir register
  HAL_I2C_Master_Receive(&hi2c1, ICM_ADDR<<1, data, 2, 20);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <readByte+0x50>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	b299      	uxth	r1, r3
 8002738:	2314      	movs	r3, #20
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2302      	movs	r3, #2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <readByte+0x54>)
 8002742:	f002 fc57 	bl	8004ff4 <HAL_I2C_Master_Receive>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000904 	.word	0x20000904
 8002754:	20000014 	.word	0x20000014
 8002758:	2000062c 	.word	0x2000062c

0800275c <delay_us>:

void delay_us(uint16_t us)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <delay_us+0x30>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 800276e:	bf00      	nop
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <delay_us+0x30>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	429a      	cmp	r2, r3
 800277a:	d3f9      	bcc.n	8002770 <delay_us+0x14>
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000758 	.word	0x20000758

08002790 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7f1b      	ldrb	r3, [r3, #28]
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 8083 	bne.w	80028a8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11a      	bne.n	80027e0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80027aa:	2100      	movs	r1, #0
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f004 fdb3 	bl	8007318 <HAL_TIM_ReadCapturedValue>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a41      	ldr	r2, [pc, #260]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80027b6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 020a 	bic.w	r2, r2, #10
 80027cc:	621a      	str	r2, [r3, #32]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0202 	orr.w	r2, r2, #2
 80027dc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80027de:	e063      	b.n	80028a8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d15f      	bne.n	80028a8 <HAL_TIM_IC_CaptureCallback+0x118>
			Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f004 fd94 	bl	8007318 <HAL_TIM_ReadCapturedValue>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80027f4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
			if (Echo_Val2 > Echo_Val1)
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d907      	bls.n	800281a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = Echo_Val2-Echo_Val1;
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e00f      	b.n	800283a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Echo_Val1 > Echo_Val2)
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d909      	bls.n	800283a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - Echo_Val1) + Echo_Val2;
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002834:	33ff      	adds	r3, #255	; 0xff
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002838:	6013      	str	r3, [r2, #0]
			UD = (Difference * 0.034)/2;
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe60 	bl	8000504 <__aeabi_ui2d>
 8002844:	a31a      	add	r3, pc, #104	; (adr r3, 80028b0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fed5 	bl	80005f8 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800285e:	f7fd fff5 	bl	800084c <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f99d 	bl	8000ba8 <__aeabi_d2uiz>
 800286e:	4603      	mov	r3, r0
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002874:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020a 	bic.w	r2, r2, #10
 800288a:	621a      	str	r2, [r3, #32]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a12      	ldr	r2, [r2, #32]
 8002896:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0202 	bic.w	r2, r2, #2
 80028a6:	60da      	str	r2, [r3, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	b020c49c 	.word	0xb020c49c
 80028b4:	3fa16872 	.word	0x3fa16872
 80028b8:	20000a10 	.word	0x20000a10
 80028bc:	20000a04 	.word	0x20000a04
 80028c0:	20000a08 	.word	0x20000a08
 80028c4:	20000a0c 	.word	0x20000a0c
 80028c8:	20000016 	.word	0x20000016
 80028cc:	20000758 	.word	0x20000758

080028d0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
//	delay_us(10);  // wait for 10 us
//	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
//
//	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);

	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80028d4:	2201      	movs	r2, #1
 80028d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <HCSR04_Read+0x38>)
 80028dc:	f002 f92e 	bl	8004b3c <HAL_GPIO_WritePin>
	delay_us(10);  // wait f or 10 us
 80028e0:	200a      	movs	r0, #10
 80028e2:	f7ff ff3b 	bl	800275c <delay_us>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ec:	4806      	ldr	r0, [pc, #24]	; (8002908 <HCSR04_Read+0x38>)
 80028ee:	f002 f925 	bl	8004b3c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HCSR04_Read+0x3c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HCSR04_Read+0x3c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0202 	orr.w	r2, r2, #2
 8002900:	60da      	str	r2, [r3, #12]
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	20000758 	.word	0x20000758

08002910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0a2      	sub	sp, #136	; 0x88
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int progress = -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
	command.MOTOR_DIR = 0;
 800291e:	4bbe      	ldr	r3, [pc, #760]	; (8002c18 <StartDefaultTask+0x308>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
	command.SERVO_DIR = 0;
 8002924:	4bbc      	ldr	r3, [pc, #752]	; (8002c18 <StartDefaultTask+0x308>)
 8002926:	2200      	movs	r2, #0
 8002928:	705a      	strb	r2, [r3, #1]
	command.MAGNITUDE = 0;
 800292a:	4bbb      	ldr	r3, [pc, #748]	; (8002c18 <StartDefaultTask+0x308>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
	TURNING_ANGLE = 0;
 8002930:	49ba      	ldr	r1, [pc, #744]	; (8002c1c <StartDefaultTask+0x30c>)
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9c1 2300 	strd	r2, r3, [r1]
	LEFTWHEEL_DIST = 0;
 800293e:	49b8      	ldr	r1, [pc, #736]	; (8002c20 <StartDefaultTask+0x310>)
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c1 2300 	strd	r2, r3, [r1]
	RIGHTWHEEL_DIST = 0;
 800294c:	49b5      	ldr	r1, [pc, #724]	; (8002c24 <StartDefaultTask+0x314>)
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9c1 2300 	strd	r2, r3, [r1]
	char d;
	uint16_t dis= 0;
 800295a:	2300      	movs	r3, #0
 800295c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	osDelay(1000);
 8002960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002964:	f006 fbe8 	bl	8009138 <osDelay>
//	uint32_t tick;
//	tick = HAL_GetTick();
  /* Infinite loop */
   new_cmd_received = 1;
 8002968:	4baf      	ldr	r3, [pc, #700]	; (8002c28 <StartDefaultTask+0x318>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]
   //z,y done
   //z,z done
   //y,z done
   //y,y done
	char temp26[100] = "g,000000";
 800296e:	4aaf      	ldr	r2, [pc, #700]	; (8002c2c <StartDefaultTask+0x31c>)
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	ca07      	ldmia	r2, {r0, r1, r2}
 8002976:	c303      	stmia	r3!, {r0, r1}
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	f107 0315 	add.w	r3, r7, #21
 800297e:	225b      	movs	r2, #91	; 0x5b
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f009 f936 	bl	800bbf4 <memset>
    //char temp26[100] = "0000";
	int first_command = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int last_turn = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	67fb      	str	r3, [r7, #124]	; 0x7c
  for(;;)
  {
	  //p0000000000000000000000000000000000000000000000000
	  if (new_cmd_received)
 8002992:	4ba5      	ldr	r3, [pc, #660]	; (8002c28 <StartDefaultTask+0x318>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8487 	beq.w	80032aa <StartDefaultTask+0x99a>
//		  	  HAL_Delay(500);
//		  	  htim1.Instance->CCR4=223; //Extreme r ight
//		  	  HAL_Delay(500);
//		  	  htim1.Instance->CCR4=154; //Center
//		  	  HAL_Delay(500);
		  	  osDelay(1000);
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f006 fbca 	bl	8009138 <osDelay>
	 		  token = strtok(temp26, delim);
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	49a1      	ldr	r1, [pc, #644]	; (8002c30 <StartDefaultTask+0x320>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f009 fdbc 	bl	800c528 <strtok>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4aa0      	ldr	r2, [pc, #640]	; (8002c34 <StartDefaultTask+0x324>)
 80029b4:	6013      	str	r3, [r2, #0]
	 		  while(token != NULL)
 80029b6:	f000 bc70 	b.w	800329a <StartDefaultTask+0x98a>
	 		  {
	 			  timef = 0;
 80029ba:	499f      	ldr	r1, [pc, #636]	; (8002c38 <StartDefaultTask+0x328>)
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9c1 2300 	strd	r2, r3, [r1]
	 			  char * time_string = token+1;
 80029c8:	4b9a      	ldr	r3, [pc, #616]	; (8002c34 <StartDefaultTask+0x324>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	673b      	str	r3, [r7, #112]	; 0x70
	 			  if(time_string[0] != 48) timef = atoi(time_string);
 80029d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d00b      	beq.n	80029f0 <StartDefaultTask+0xe0>
 80029d8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80029da:	f009 f8cf 	bl	800bb7c <atoi>
 80029de:	4603      	mov	r3, r0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd9f 	bl	8000524 <__aeabi_i2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4993      	ldr	r1, [pc, #588]	; (8002c38 <StartDefaultTask+0x328>)
 80029ec:	e9c1 2300 	strd	r2, r3, [r1]
			  switch(token[0])
 80029f0:	4b90      	ldr	r3, [pc, #576]	; (8002c34 <StartDefaultTask+0x324>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	3b62      	subs	r3, #98	; 0x62
 80029f8:	2b18      	cmp	r3, #24
 80029fa:	f200 8437 	bhi.w	800326c <StartDefaultTask+0x95c>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <StartDefaultTask+0xf4>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002b55 	.word	0x08002b55
 8002a08:	0800326d 	.word	0x0800326d
 8002a0c:	08002a7f 	.word	0x08002a7f
 8002a10:	0800326d 	.word	0x0800326d
 8002a14:	08002b1b 	.word	0x08002b1b
 8002a18:	08002d1b 	.word	0x08002d1b
 8002a1c:	0800326d 	.word	0x0800326d
 8002a20:	0800326d 	.word	0x0800326d
 8002a24:	0800326d 	.word	0x0800326d
 8002a28:	0800326d 	.word	0x0800326d
 8002a2c:	08002be1 	.word	0x08002be1
 8002a30:	0800326d 	.word	0x0800326d
 8002a34:	0800326d 	.word	0x0800326d
 8002a38:	08003263 	.word	0x08003263
 8002a3c:	08002a69 	.word	0x08002a69
 8002a40:	08002d3d 	.word	0x08002d3d
 8002a44:	08002bab 	.word	0x08002bab
 8002a48:	08002ac5 	.word	0x08002ac5
 8002a4c:	08002e45 	.word	0x08002e45
 8002a50:	08002c49 	.word	0x08002c49
 8002a54:	08002c8f 	.word	0x08002c8f
 8002a58:	08002cd5 	.word	0x08002cd5
 8002a5c:	08003255 	.word	0x08003255
 8002a60:	08003077 	.word	0x08003077
 8002a64:	08002e79 	.word	0x08002e79
			  {
			  //Trying out gyro
			  case 'p':
				  TURNING_ANGLE=0;
 8002a68:	496c      	ldr	r1, [pc, #432]	; (8002c1c <StartDefaultTask+0x30c>)
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9c1 2300 	strd	r2, r3, [r1]
				  right_turn(88);
 8002a76:	2058      	movs	r0, #88	; 0x58
 8002a78:	f7ff fd04 	bl	8002484 <right_turn>
				  break;
 8002a7c:	e3fe      	b.n	800327c <StartDefaultTask+0x96c>

		      //Tight right turn
			  case 'd':
				  htim1.Instance->CCR4=108; //Extreme left
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <StartDefaultTask+0x32c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	226c      	movs	r2, #108	; 0x6c
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a8a:	f001 fcf3 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=223; //Extreme right
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <StartDefaultTask+0x32c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	22df      	movs	r2, #223	; 0xdf
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a9a:	f001 fceb 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=154; //Center
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <StartDefaultTask+0x32c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	229a      	movs	r2, #154	; 0x9a
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aaa:	f001 fce3 	bl	8004474 <HAL_Delay>
				  tightRightTurn();
 8002aae:	f7ff fb77 	bl	80021a0 <tightRightTurn>
				  //HAL _Delay(1000);
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	4962      	ldr	r1, [pc, #392]	; (8002c40 <StartDefaultTask+0x330>)
 8002ab8:	4862      	ldr	r0, [pc, #392]	; (8002c44 <StartDefaultTask+0x334>)
 8002aba:	f005 fa02 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002abe:	f7ff fa0b 	bl	8001ed8 <stop>
				  break;
 8002ac2:	e3db      	b.n	800327c <StartDefaultTask+0x96c>

				  //forward 10cm
			  case 's':
				  if(d!='s')
 8002ac4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002ac8:	2b73      	cmp	r3, #115	; 0x73
 8002aca:	d017      	beq.n	8002afc <StartDefaultTask+0x1ec>
				  {
					  htim1.Instance->CCR4=108; //Extreme left
 8002acc:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <StartDefaultTask+0x32c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	226c      	movs	r2, #108	; 0x6c
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad8:	f001 fccc 	bl	8004474 <HAL_Delay>
					  htim1.Instance->CCR4=223; //Extreme right
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <StartDefaultTask+0x32c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	22df      	movs	r2, #223	; 0xdf
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ae8:	f001 fcc4 	bl	8004474 <HAL_Delay>
					  htim1.Instance->CCR4=154; //Center
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <StartDefaultTask+0x32c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	229a      	movs	r2, #154	; 0x9a
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002af8:	f001 fcbc 	bl	8004474 <HAL_Delay>
				  }
				  forward();
 8002afc:	f7ff f9fe 	bl	8001efc <forward>
				  HAL_Delay(475);
 8002b00:	f240 10db 	movw	r0, #475	; 0x1db
 8002b04:	f001 fcb6 	bl	8004474 <HAL_Delay>
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002b08:	2364      	movs	r3, #100	; 0x64
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	494c      	ldr	r1, [pc, #304]	; (8002c40 <StartDefaultTask+0x330>)
 8002b0e:	484d      	ldr	r0, [pc, #308]	; (8002c44 <StartDefaultTask+0x334>)
 8002b10:	f005 f9d7 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002b14:	f7ff f9e0 	bl	8001ed8 <stop>
				  break;
 8002b18:	e3b0      	b.n	800327c <StartDefaultTask+0x96c>
//				  htim1.Instance->CCR4=223; //Extreme right
//				  HAL_Delay(500);
//				  htim1.Instance->CCR4=154; //Center
//				  HAL_Delay(500);

				  forward();
 8002b1a:	f7ff f9ef 	bl	8001efc <forward>
				  osDelay(timef);
 8002b1e:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <StartDefaultTask+0x328>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fe f83e 	bl	8000ba8 <__aeabi_d2uiz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f006 fb02 	bl	8009138 <osDelay>
				  TURNING_ANGLE=0;
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <StartDefaultTask+0x30c>)
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9c1 2300 	strd	r2, r3, [r1]
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002b42:	2364      	movs	r3, #100	; 0x64
 8002b44:	2204      	movs	r2, #4
 8002b46:	493e      	ldr	r1, [pc, #248]	; (8002c40 <StartDefaultTask+0x330>)
 8002b48:	483e      	ldr	r0, [pc, #248]	; (8002c44 <StartDefaultTask+0x334>)
 8002b4a:	f005 f9ba 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002b4e:	f7ff f9c3 	bl	8001ed8 <stop>
				  break;
 8002b52:	e393      	b.n	800327c <StartDefaultTask+0x96c>

			  //backward
			  case 'b':
				  if(d!='b')
 8002b54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002b58:	2b62      	cmp	r3, #98	; 0x62
 8002b5a:	d017      	beq.n	8002b8c <StartDefaultTask+0x27c>
				  {
					  htim1.Instance->CCR4=108; //Extreme left
 8002b5c:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <StartDefaultTask+0x32c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	226c      	movs	r2, #108	; 0x6c
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b68:	f001 fc84 	bl	8004474 <HAL_Delay>
					  htim1.Instance->CCR4=223; //Extreme right
 8002b6c:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <StartDefaultTask+0x32c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22df      	movs	r2, #223	; 0xdf
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b78:	f001 fc7c 	bl	8004474 <HAL_Delay>
					  htim1.Instance->CCR4=154; //Center
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <StartDefaultTask+0x32c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	229a      	movs	r2, #154	; 0x9a
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
					  HAL_Delay(500);
 8002b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b88:	f001 fc74 	bl	8004474 <HAL_Delay>
				  }
				  reverse();
 8002b8c:	f7ff fa36 	bl	8001ffc <reverse>
				  HAL_Delay(475);
 8002b90:	f240 10db 	movw	r0, #475	; 0x1db
 8002b94:	f001 fc6e 	bl	8004474 <HAL_Delay>
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002b98:	2364      	movs	r3, #100	; 0x64
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4928      	ldr	r1, [pc, #160]	; (8002c40 <StartDefaultTask+0x330>)
 8002b9e:	4829      	ldr	r0, [pc, #164]	; (8002c44 <StartDefaultTask+0x334>)
 8002ba0:	f005 f98f 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002ba4:	f7ff f998 	bl	8001ed8 <stop>
				  break;
 8002ba8:	e368      	b.n	800327c <StartDefaultTask+0x96c>
//				  HAL_Delay(500);
//				  htim1.Instance->CCR4=223; //Extreme right
//				  HAL_Delay(500);
//				  htim1.Instance->CCR4=154; //Center
//				  HAL_Delay(500);
				  right_turn(timef);
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <StartDefaultTask+0x328>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd ffd0 	bl	8000b58 <__aeabi_d2iz>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fc62 	bl	8002484 <right_turn>
				  TURNING_ANGLE=0;
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <StartDefaultTask+0x30c>)
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002bce:	2364      	movs	r3, #100	; 0x64
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <StartDefaultTask+0x330>)
 8002bd4:	481b      	ldr	r0, [pc, #108]	; (8002c44 <StartDefaultTask+0x334>)
 8002bd6:	f005 f974 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002bda:	f7ff f97d 	bl	8001ed8 <stop>
				  break;
 8002bde:	e34d      	b.n	800327c <StartDefaultTask+0x96c>
//				  HAL_Delay(500);
//				  htim1.Instance->CCR4=223; //Extreme right
//				  HAL_Delay(500);
//				  htim1.Instance->CCR4=154; //Center
//				  HAL_Delay(500);
				  left_turn(timef);
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <StartDefaultTask+0x328>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fd ffb5 	bl	8000b58 <__aeabi_d2iz>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fc89 	bl	8002508 <left_turn>
				  TURNING_ANGLE=0;
 8002bf6:	4909      	ldr	r1, [pc, #36]	; (8002c1c <StartDefaultTask+0x30c>)
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002c04:	2364      	movs	r3, #100	; 0x64
 8002c06:	2204      	movs	r2, #4
 8002c08:	490d      	ldr	r1, [pc, #52]	; (8002c40 <StartDefaultTask+0x330>)
 8002c0a:	480e      	ldr	r0, [pc, #56]	; (8002c44 <StartDefaultTask+0x334>)
 8002c0c:	f005 f959 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002c10:	f7ff f962 	bl	8001ed8 <stop>
				  break;
 8002c14:	e332      	b.n	800327c <StartDefaultTask+0x96c>
 8002c16:	bf00      	nop
 8002c18:	20000a18 	.word	0x20000a18
 8002c1c:	20000920 	.word	0x20000920
 8002c20:	200009d8 	.word	0x200009d8
 8002c24:	200009e0 	.word	0x200009e0
 8002c28:	20000900 	.word	0x20000900
 8002c2c:	0800ebf4 	.word	0x0800ebf4
 8002c30:	0800f800 	.word	0x0800f800
 8002c34:	200008c8 	.word	0x200008c8
 8002c38:	200008c0 	.word	0x200008c0
 8002c3c:	20000680 	.word	0x20000680
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000830 	.word	0x20000830

			 //Tight left turn
			  case 'u':
				  htim1.Instance->CCR4=108; //Extreme left
 8002c48:	4baf      	ldr	r3, [pc, #700]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	226c      	movs	r2, #108	; 0x6c
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c54:	f001 fc0e 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=223; //Extreme right
 8002c58:	4bab      	ldr	r3, [pc, #684]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	22df      	movs	r2, #223	; 0xdf
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c64:	f001 fc06 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=154; //Center
 8002c68:	4ba7      	ldr	r3, [pc, #668]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	229a      	movs	r2, #154	; 0x9a
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c74:	f001 fbfe 	bl	8004474 <HAL_Delay>
			  	  tightLeftTurn();
 8002c78:	f7ff faba 	bl	80021f0 <tightLeftTurn>
			  	  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002c7c:	2364      	movs	r3, #100	; 0x64
 8002c7e:	2204      	movs	r2, #4
 8002c80:	49a2      	ldr	r1, [pc, #648]	; (8002f0c <StartDefaultTask+0x5fc>)
 8002c82:	48a3      	ldr	r0, [pc, #652]	; (8002f10 <StartDefaultTask+0x600>)
 8002c84:	f005 f91d 	bl	8007ec2 <HAL_UART_Transmit>
			  	  stop();
 8002c88:	f7ff f926 	bl	8001ed8 <stop>
			  	  break;
 8002c8c:	e2f6      	b.n	800327c <StartDefaultTask+0x96c>
			 //Tight reverse left turn
			  case 'v':
				  htim1.Instance->CCR4=108; //Extreme left
 8002c8e:	4b9e      	ldr	r3, [pc, #632]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	226c      	movs	r2, #108	; 0x6c
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c9a:	f001 fbeb 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=223; //Extreme right
 8002c9e:	4b9a      	ldr	r3, [pc, #616]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	22df      	movs	r2, #223	; 0xdf
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002caa:	f001 fbe3 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=154; //Center
 8002cae:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	229a      	movs	r2, #154	; 0x9a
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cba:	f001 fbdb 	bl	8004474 <HAL_Delay>
				  tightreverseLeftTurn();
 8002cbe:	f7ff fabf 	bl	8002240 <tightreverseLeftTurn>
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002cc2:	2364      	movs	r3, #100	; 0x64
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	4991      	ldr	r1, [pc, #580]	; (8002f0c <StartDefaultTask+0x5fc>)
 8002cc8:	4891      	ldr	r0, [pc, #580]	; (8002f10 <StartDefaultTask+0x600>)
 8002cca:	f005 f8fa 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002cce:	f7ff f903 	bl	8001ed8 <stop>
				  break;
 8002cd2:	e2d3      	b.n	800327c <StartDefaultTask+0x96c>
			 //Tight reverse right turn t0,t0
			  case 'w':
				  htim1.Instance->CCR4=108; //Extreme left
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	226c      	movs	r2, #108	; 0x6c
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ce0:	f001 fbc8 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=223; //Extreme right
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	22df      	movs	r2, #223	; 0xdf
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cf0:	f001 fbc0 	bl	8004474 <HAL_Delay>
				  htim1.Instance->CCR4=154; //Center
 8002cf4:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <StartDefaultTask+0x5f8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	229a      	movs	r2, #154	; 0x9a
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(500);
 8002cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d00:	f001 fbb8 	bl	8004474 <HAL_Delay>
				  tightreverseRightTurn();
 8002d04:	f7ff fad4 	bl	80022b0 <tightreverseRightTurn>
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002d08:	2364      	movs	r3, #100	; 0x64
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	497f      	ldr	r1, [pc, #508]	; (8002f0c <StartDefaultTask+0x5fc>)
 8002d0e:	4880      	ldr	r0, [pc, #512]	; (8002f10 <StartDefaultTask+0x600>)
 8002d10:	f005 f8d7 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002d14:	f7ff f8e0 	bl	8001ed8 <stop>
				  break;
 8002d18:	e2b0      	b.n	800327c <StartDefaultTask+0x96c>
			  case 'g':
				  osDelay(400); //default:400
 8002d1a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d1e:	f006 fa0b 	bl	8009138 <osDelay>
				  gyroforward();
 8002d22:	f7ff fafd 	bl	8002320 <gyroforward>
				  stop();
 8002d26:	f7ff f8d7 	bl	8001ed8 <stop>
				  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002d2a:	2364      	movs	r3, #100	; 0x64
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4977      	ldr	r1, [pc, #476]	; (8002f0c <StartDefaultTask+0x5fc>)
 8002d30:	4877      	ldr	r0, [pc, #476]	; (8002f10 <StartDefaultTask+0x600>)
 8002d32:	f005 f8c6 	bl	8007ec2 <HAL_UART_Transmit>
				  stop();
 8002d36:	f7ff f8cf 	bl	8001ed8 <stop>
				  break;
 8002d3a:	e29f      	b.n	800327c <StartDefaultTask+0x96c>
			  case 'q':
//				  reverse();
//				  HAL_Delay(600);
//				  stop();
				  osDelay(10);
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	f006 f9fb 	bl	8009138 <osDelay>
				  stime = (int)((final_distance/76.0)*1000);
 8002d42:	4b74      	ldr	r3, [pc, #464]	; (8002f14 <StartDefaultTask+0x604>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbec 	bl	8000524 <__aeabi_i2d>
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	4b71      	ldr	r3, [pc, #452]	; (8002f18 <StartDefaultTask+0x608>)
 8002d52:	f7fd fd7b 	bl	800084c <__aeabi_ddiv>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <StartDefaultTask+0x60c>)
 8002d64:	f7fd fc48 	bl	80005f8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd fef2 	bl	8000b58 <__aeabi_d2iz>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a6a      	ldr	r2, [pc, #424]	; (8002f20 <StartDefaultTask+0x610>)
 8002d78:	6013      	str	r3, [r2, #0]
				  forward();
 8002d7a:	f7ff f8bf 	bl	8001efc <forward>
				  osDelay(stime);
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <StartDefaultTask+0x610>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f006 f9d8 	bl	8009138 <osDelay>
				  TURNING_ANGLE=0;
 8002d88:	4966      	ldr	r1, [pc, #408]	; (8002f24 <StartDefaultTask+0x614>)
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9c1 2300 	strd	r2, r3, [r1]
				  //Last command is right side
				  if(last_turn == 1) {
 8002d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d127      	bne.n	8002dec <StartDefaultTask+0x4dc>
					  TURNING_ANGLE = 0;
 8002d9c:	4961      	ldr	r1, [pc, #388]	; (8002f24 <StartDefaultTask+0x614>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(23);
 8002daa:	2017      	movs	r0, #23
 8002dac:	f7ff fbac 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8002db0:	495c      	ldr	r1, [pc, #368]	; (8002f24 <StartDefaultTask+0x614>)
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8002dbe:	f7ff f89d 	bl	8001efc <forward>
					  osDelay(100); //default 65
 8002dc2:	2064      	movs	r0, #100	; 0x64
 8002dc4:	f006 f9b8 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8002dc8:	4956      	ldr	r1, [pc, #344]	; (8002f24 <StartDefaultTask+0x614>)
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(23);
 8002dd6:	2017      	movs	r0, #23
 8002dd8:	f7ff fb54 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8002ddc:	4951      	ldr	r1, [pc, #324]	; (8002f24 <StartDefaultTask+0x614>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9c1 2300 	strd	r2, r3, [r1]
					  TURNING_ANGLE = 0;
					  left_turn(34);
					  TURNING_ANGLE = 0;
				  }

				  break;
 8002dea:	e242      	b.n	8003272 <StartDefaultTask+0x962>
				  }else if (last_turn == 2){
 8002dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	f040 823f 	bne.w	8003272 <StartDefaultTask+0x962>
					  TURNING_ANGLE = 0;
 8002df4:	494b      	ldr	r1, [pc, #300]	; (8002f24 <StartDefaultTask+0x614>)
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(15);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f7ff fb3e 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8002e08:	4946      	ldr	r1, [pc, #280]	; (8002f24 <StartDefaultTask+0x614>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8002e16:	f7ff f871 	bl	8001efc <forward>
					  osDelay(25);
 8002e1a:	2019      	movs	r0, #25
 8002e1c:	f006 f98c 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8002e20:	4940      	ldr	r1, [pc, #256]	; (8002f24 <StartDefaultTask+0x614>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(34);
 8002e2e:	2022      	movs	r0, #34	; 0x22
 8002e30:	f7ff fb6a 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8002e34:	493b      	ldr	r1, [pc, #236]	; (8002f24 <StartDefaultTask+0x614>)
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9c1 2300 	strd	r2, r3, [r1]
				  break;
 8002e42:	e216      	b.n	8003272 <StartDefaultTask+0x962>
			  case 't':
				  dis  =  timef*0.076;
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <StartDefaultTask+0x618>)
 8002e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4a:	a32d      	add	r3, pc, #180	; (adr r3, 8002f00 <StartDefaultTask+0x5f0>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f7fd fbd2 	bl	80005f8 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fea4 	bl	8000ba8 <__aeabi_d2uiz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				  final_distance += dis;
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <StartDefaultTask+0x604>)
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e6e:	4413      	add	r3, r2
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <StartDefaultTask+0x604>)
 8002e74:	801a      	strh	r2, [r3, #0]
				  break;
 8002e76:	e201      	b.n	800327c <StartDefaultTask+0x96c>

			  case 'z':
				  // first right
				  if(first_command == 0) {
 8002e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d155      	bne.n	8002f2c <StartDefaultTask+0x61c>
					  forward();
 8002e80:	f7ff f83c 	bl	8001efc <forward>
					  osDelay(150);
 8002e84:	2096      	movs	r0, #150	; 0x96
 8002e86:	f006 f957 	bl	8009138 <osDelay>
					  stop();
 8002e8a:	f7ff f825 	bl	8001ed8 <stop>
					  TURNING_ANGLE=0;
 8002e8e:	4925      	ldr	r1, [pc, #148]	; (8002f24 <StartDefaultTask+0x614>)
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(20);
 8002e9c:	2014      	movs	r0, #20
 8002e9e:	f7ff faf1 	bl	8002484 <right_turn>
					  stop();
 8002ea2:	f7ff f819 	bl	8001ed8 <stop>
					  TURNING_ANGLE=0;
 8002ea6:	491f      	ldr	r1, [pc, #124]	; (8002f24 <StartDefaultTask+0x614>)
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8002eb4:	f7ff f822 	bl	8001efc <forward>
					  osDelay(260);
 8002eb8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002ebc:	f006 f93c 	bl	8009138 <osDelay>
					  stop();
 8002ec0:	f7ff f80a 	bl	8001ed8 <stop>
					  TURNING_ANGLE=0;
 8002ec4:	4917      	ldr	r1, [pc, #92]	; (8002f24 <StartDefaultTask+0x614>)
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(22);
 8002ed2:	2016      	movs	r0, #22
 8002ed4:	f7ff fb18 	bl	8002508 <left_turn>
					  stop();
 8002ed8:	f7fe fffe 	bl	8001ed8 <stop>
					  TURNING_ANGLE=0;
 8002edc:	4911      	ldr	r1, [pc, #68]	; (8002f24 <StartDefaultTask+0x614>)
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9c1 2300 	strd	r2, r3, [r1]
					  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 8002eea:	2364      	movs	r3, #100	; 0x64
 8002eec:	2204      	movs	r2, #4
 8002eee:	4907      	ldr	r1, [pc, #28]	; (8002f0c <StartDefaultTask+0x5fc>)
 8002ef0:	4807      	ldr	r0, [pc, #28]	; (8002f10 <StartDefaultTask+0x600>)
 8002ef2:	f004 ffe6 	bl	8007ec2 <HAL_UART_Transmit>
					  first_command = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					//  left_turn(51);
					//  TURNING_ANGLE = 0;
					  last_turn = 1;

				  }
				  break;
 8002efc:	e1bb      	b.n	8003276 <StartDefaultTask+0x966>
 8002efe:	bf00      	nop
 8002f00:	6a7ef9db 	.word	0x6a7ef9db
 8002f04:	3fb374bc 	.word	0x3fb374bc
 8002f08:	20000680 	.word	0x20000680
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000830 	.word	0x20000830
 8002f14:	20000018 	.word	0x20000018
 8002f18:	40530000 	.word	0x40530000
 8002f1c:	408f4000 	.word	0x408f4000
 8002f20:	20000a14 	.word	0x20000a14
 8002f24:	20000920 	.word	0x20000920
 8002f28:	200008c0 	.word	0x200008c0
				  else if(first_command == 1) {
 8002f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d150      	bne.n	8002fd6 <StartDefaultTask+0x6c6>
					  TURNING_ANGLE=0;
 8002f34:	4998      	ldr	r1, [pc, #608]	; (8003198 <StartDefaultTask+0x888>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(15);
 8002f42:	200f      	movs	r0, #15
 8002f44:	f7ff fa9e 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8002f48:	4993      	ldr	r1, [pc, #588]	; (8003198 <StartDefaultTask+0x888>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8002f56:	f7fe ffd1 	bl	8001efc <forward>
					  osDelay(389);
 8002f5a:	f240 1085 	movw	r0, #389	; 0x185
 8002f5e:	f006 f8eb 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8002f62:	498d      	ldr	r1, [pc, #564]	; (8003198 <StartDefaultTask+0x888>)
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(28);
 8002f70:	201c      	movs	r0, #28
 8002f72:	f7ff fac9 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8002f76:	4988      	ldr	r1, [pc, #544]	; (8003198 <StartDefaultTask+0x888>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(44);
 8002f84:	202c      	movs	r0, #44	; 0x2c
 8002f86:	f7ff fabf 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8002f8a:	4983      	ldr	r1, [pc, #524]	; (8003198 <StartDefaultTask+0x888>)
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8002f98:	f7fe ffb0 	bl	8001efc <forward>
					  osDelay(200);
 8002f9c:	20c8      	movs	r0, #200	; 0xc8
 8002f9e:	f006 f8cb 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8002fa2:	497d      	ldr	r1, [pc, #500]	; (8003198 <StartDefaultTask+0x888>)
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(55);
 8002fb0:	2037      	movs	r0, #55	; 0x37
 8002fb2:	f7ff faa9 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8002fb6:	4978      	ldr	r1, [pc, #480]	; (8003198 <StartDefaultTask+0x888>)
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9c1 2300 	strd	r2, r3, [r1]
					  final_distance -= 25;
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <StartDefaultTask+0x88c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	3b19      	subs	r3, #25
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b73      	ldr	r3, [pc, #460]	; (800319c <StartDefaultTask+0x88c>)
 8002fce:	801a      	strh	r2, [r3, #0]
					  last_turn = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
				  break;
 8002fd4:	e14f      	b.n	8003276 <StartDefaultTask+0x966>
				  else if(first_command == 2) {
 8002fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	f040 814b 	bne.w	8003276 <StartDefaultTask+0x966>
					  TURNING_ANGLE = 0;
 8002fe0:	496d      	ldr	r1, [pc, #436]	; (8003198 <StartDefaultTask+0x888>)
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(64);
 8002fee:	2040      	movs	r0, #64	; 0x40
 8002ff0:	f7ff fa48 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8002ff4:	4968      	ldr	r1, [pc, #416]	; (8003198 <StartDefaultTask+0x888>)
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8003002:	f7fe ff7b 	bl	8001efc <forward>
					  osDelay(130);
 8003006:	2082      	movs	r0, #130	; 0x82
 8003008:	f006 f896 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 800300c:	4962      	ldr	r1, [pc, #392]	; (8003198 <StartDefaultTask+0x888>)
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(65);
 800301a:	2041      	movs	r0, #65	; 0x41
 800301c:	f7ff fa74 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8003020:	495d      	ldr	r1, [pc, #372]	; (8003198 <StartDefaultTask+0x888>)
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(40);
 800302e:	2028      	movs	r0, #40	; 0x28
 8003030:	f7ff fa6a 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8003034:	4958      	ldr	r1, [pc, #352]	; (8003198 <StartDefaultTask+0x888>)
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8003042:	f7fe ff5b 	bl	8001efc <forward>
					  osDelay(410);
 8003046:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800304a:	f006 f875 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 800304e:	4952      	ldr	r1, [pc, #328]	; (8003198 <StartDefaultTask+0x888>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(80);
 800305c:	2050      	movs	r0, #80	; 0x50
 800305e:	f7ff fa53 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8003062:	494d      	ldr	r1, [pc, #308]	; (8003198 <StartDefaultTask+0x888>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c1 2300 	strd	r2, r3, [r1]
					  last_turn = 1;
 8003070:	2301      	movs	r3, #1
 8003072:	67fb      	str	r3, [r7, #124]	; 0x7c
				  break;
 8003074:	e0ff      	b.n	8003276 <StartDefaultTask+0x966>
			  case 'y': {
				  // first left turn
				  if(first_command == 0) {
 8003076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d136      	bne.n	80030ec <StartDefaultTask+0x7dc>
					  forward();
 800307e:	f7fe ff3d 	bl	8001efc <forward>
					  osDelay(250);
 8003082:	20fa      	movs	r0, #250	; 0xfa
 8003084:	f006 f858 	bl	8009138 <osDelay>
					  stop();
 8003088:	f7fe ff26 	bl	8001ed8 <stop>
					  TURNING_ANGLE = 0;
 800308c:	4942      	ldr	r1, [pc, #264]	; (8003198 <StartDefaultTask+0x888>)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(36);
 800309a:	2024      	movs	r0, #36	; 0x24
 800309c:	f7ff fa34 	bl	8002508 <left_turn>
					  stop();
 80030a0:	f7fe ff1a 	bl	8001ed8 <stop>
					  TURNING_ANGLE = 0;
 80030a4:	493c      	ldr	r1, [pc, #240]	; (8003198 <StartDefaultTask+0x888>)
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9c1 2300 	strd	r2, r3, [r1]
					 // forward();
					 // osDelay(200);
					//  stop();
					  TURNING_ANGLE = 0;
 80030b2:	4939      	ldr	r1, [pc, #228]	; (8003198 <StartDefaultTask+0x888>)
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(36);
 80030c0:	2024      	movs	r0, #36	; 0x24
 80030c2:	f7ff f9df 	bl	8002484 <right_turn>
					  stop();
 80030c6:	f7fe ff07 	bl	8001ed8 <stop>
					  TURNING_ANGLE = 0;
 80030ca:	4933      	ldr	r1, [pc, #204]	; (8003198 <StartDefaultTask+0x888>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9c1 2300 	strd	r2, r3, [r1]
					  first_command = 2;
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					  HAL_UART_Transmit(&huart3,(uint8_t *)&tr,4,100);
 80030de:	2364      	movs	r3, #100	; 0x64
 80030e0:	2204      	movs	r2, #4
 80030e2:	492f      	ldr	r1, [pc, #188]	; (80031a0 <StartDefaultTask+0x890>)
 80030e4:	482f      	ldr	r0, [pc, #188]	; (80031a4 <StartDefaultTask+0x894>)
 80030e6:	f004 feec 	bl	8007ec2 <HAL_UART_Transmit>
					 // right_turn(51);
					//  TURNING_ANGLE = 0;
					  final_distance-=20;
					  last_turn = 2;
				  }
				  break;
 80030ea:	e0c6      	b.n	800327a <StartDefaultTask+0x96a>
				  else if(first_command == 1) {
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d159      	bne.n	80031a8 <StartDefaultTask+0x898>
					  TURNING_ANGLE = 0;
 80030f4:	4928      	ldr	r1, [pc, #160]	; (8003198 <StartDefaultTask+0x888>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(71);
 8003102:	2047      	movs	r0, #71	; 0x47
 8003104:	f7ff fa00 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 8003108:	4923      	ldr	r1, [pc, #140]	; (8003198 <StartDefaultTask+0x888>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8003116:	f7fe fef1 	bl	8001efc <forward>
					  osDelay(180);
 800311a:	20b4      	movs	r0, #180	; 0xb4
 800311c:	f006 f80c 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8003120:	491d      	ldr	r1, [pc, #116]	; (8003198 <StartDefaultTask+0x888>)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(65);
 800312e:	2041      	movs	r0, #65	; 0x41
 8003130:	f7ff f9a8 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8003134:	4918      	ldr	r1, [pc, #96]	; (8003198 <StartDefaultTask+0x888>)
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(40);
 8003142:	2028      	movs	r0, #40	; 0x28
 8003144:	f7ff f99e 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8003148:	4913      	ldr	r1, [pc, #76]	; (8003198 <StartDefaultTask+0x888>)
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8003156:	f7fe fed1 	bl	8001efc <forward>
					  osDelay(561);
 800315a:	f240 2031 	movw	r0, #561	; 0x231
 800315e:	f005 ffeb 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <StartDefaultTask+0x888>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(57);
 8003170:	2039      	movs	r0, #57	; 0x39
 8003172:	f7ff f987 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <StartDefaultTask+0x888>)
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9c1 2300 	strd	r2, r3, [r1]
					  final_distance -= 10;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <StartDefaultTask+0x88c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3b0a      	subs	r3, #10
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <StartDefaultTask+0x88c>)
 800318e:	801a      	strh	r2, [r3, #0]
					  last_turn = 2;
 8003190:	2302      	movs	r3, #2
 8003192:	67fb      	str	r3, [r7, #124]	; 0x7c
				  break;
 8003194:	e071      	b.n	800327a <StartDefaultTask+0x96a>
 8003196:	bf00      	nop
 8003198:	20000920 	.word	0x20000920
 800319c:	20000018 	.word	0x20000018
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000830 	.word	0x20000830
				  else if(first_command == 2) {
 80031a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d164      	bne.n	800327a <StartDefaultTask+0x96a>
					  TURNING_ANGLE = 0;
 80031b0:	4940      	ldr	r1, [pc, #256]	; (80032b4 <StartDefaultTask+0x9a4>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9c1 2300 	strd	r2, r3, [r1]
					  left_turn(28);
 80031be:	201c      	movs	r0, #28
 80031c0:	f7ff f9a2 	bl	8002508 <left_turn>
					  TURNING_ANGLE = 0;
 80031c4:	493b      	ldr	r1, [pc, #236]	; (80032b4 <StartDefaultTask+0x9a4>)
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 80031d2:	f7fe fe93 	bl	8001efc <forward>
					  osDelay(267);
 80031d6:	f240 100b 	movw	r0, #267	; 0x10b
 80031da:	f005 ffad 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 80031de:	4935      	ldr	r1, [pc, #212]	; (80032b4 <StartDefaultTask+0x9a4>)
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(28);
 80031ec:	201c      	movs	r0, #28
 80031ee:	f7ff f949 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 80031f2:	4930      	ldr	r1, [pc, #192]	; (80032b4 <StartDefaultTask+0x9a4>)
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(44);
 8003200:	202c      	movs	r0, #44	; 0x2c
 8003202:	f7ff f93f 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8003206:	492b      	ldr	r1, [pc, #172]	; (80032b4 <StartDefaultTask+0x9a4>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9c1 2300 	strd	r2, r3, [r1]
					  forward();
 8003214:	f7fe fe72 	bl	8001efc <forward>
					  osDelay(465);
 8003218:	f240 10d1 	movw	r0, #465	; 0x1d1
 800321c:	f005 ff8c 	bl	8009138 <osDelay>
					  TURNING_ANGLE = 0;
 8003220:	4924      	ldr	r1, [pc, #144]	; (80032b4 <StartDefaultTask+0x9a4>)
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9c1 2300 	strd	r2, r3, [r1]
					  right_turn(47);
 800322e:	202f      	movs	r0, #47	; 0x2f
 8003230:	f7ff f928 	bl	8002484 <right_turn>
					  TURNING_ANGLE = 0;
 8003234:	491f      	ldr	r1, [pc, #124]	; (80032b4 <StartDefaultTask+0x9a4>)
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9c1 2300 	strd	r2, r3, [r1]
					  final_distance-=20;
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <StartDefaultTask+0x9a8>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	3b14      	subs	r3, #20
 8003248:	b29a      	uxth	r2, r3
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <StartDefaultTask+0x9a8>)
 800324c:	801a      	strh	r2, [r3, #0]
					  last_turn = 2;
 800324e:	2302      	movs	r3, #2
 8003250:	67fb      	str	r3, [r7, #124]	; 0x7c
				  break;
 8003252:	e012      	b.n	800327a <StartDefaultTask+0x96a>
			  case 'x':
				  osDelay(1000);
 8003254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003258:	f005 ff6e 	bl	8009138 <osDelay>
				  putTen();
 800325c:	f7ff f874 	bl	8002348 <putTen>
				  break;
 8003260:	e00c      	b.n	800327c <StartDefaultTask+0x96c>

			  case 'o':
				  osDelay(300);
 8003262:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003266:	f005 ff67 	bl	8009138 <osDelay>
				  putTwenty;
				  break;
 800326a:	e007      	b.n	800327c <StartDefaultTask+0x96c>

			  }
			  default: stop();
 800326c:	f7fe fe34 	bl	8001ed8 <stop>
			  break;
 8003270:	e004      	b.n	800327c <StartDefaultTask+0x96c>
				  break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <StartDefaultTask+0x96c>
				  break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <StartDefaultTask+0x96c>
				  break;
 800327a:	bf00      	nop
			  }
			  d = token[0];
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <StartDefaultTask+0x9ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			  token = strtok(NULL, delim);
 8003286:	490e      	ldr	r1, [pc, #56]	; (80032c0 <StartDefaultTask+0x9b0>)
 8003288:	2000      	movs	r0, #0
 800328a:	f009 f94d 	bl	800c528 <strtok>
 800328e:	4603      	mov	r3, r0
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <StartDefaultTask+0x9ac>)
 8003292:	6013      	str	r3, [r2, #0]
			  osDelay(10);
 8003294:	200a      	movs	r0, #10
 8003296:	f005 ff4f 	bl	8009138 <osDelay>
	 		  while(token != NULL)
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <StartDefaultTask+0x9ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ab8b 	bne.w	80029ba <StartDefaultTask+0xaa>
		  }
		  new_cmd_received = 0;
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <StartDefaultTask+0x9b4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(10);
 80032aa:	200a      	movs	r0, #10
 80032ac:	f005 ff44 	bl	8009138 <osDelay>
	  if (new_cmd_received)
 80032b0:	f7ff bb6f 	b.w	8002992 <StartDefaultTask+0x82>
 80032b4:	20000920 	.word	0x20000920
 80032b8:	20000018 	.word	0x20000018
 80032bc:	200008c8 	.word	0x200008c8
 80032c0:	0800f800 	.word	0x0800f800
 80032c4:	20000900 	.word	0x20000900

080032c8 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
  /* Infinite loop */
	for (;;){
		sprintf(OLED_Row_1,"PWM L: %6d\0",PWML);
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <show+0x88>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	491f      	ldr	r1, [pc, #124]	; (8003354 <show+0x8c>)
 80032d8:	481f      	ldr	r0, [pc, #124]	; (8003358 <show+0x90>)
 80032da:	f009 f8fd 	bl	800c4d8 <siprintf>
		sprintf(OLED_Row_2,"PWM R: %6d\0",PWMR);
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <show+0x94>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	491e      	ldr	r1, [pc, #120]	; (8003360 <show+0x98>)
 80032e6:	481f      	ldr	r0, [pc, #124]	; (8003364 <show+0x9c>)
 80032e8:	f009 f8f6 	bl	800c4d8 <siprintf>
//		sprintf(OLED_Row_3,"SPD L: %6d\0",left_speed);
//		sprintf(OLED_Row_4,"SPD R: %6d\0",right_speed);
//		sprintf(OLED_Row_2,"OFFST: %6d\0",ANGLE_OFFSET);
//		sprintf(OLED_Row_3,"DEVIA: %6d\0",(int)DEVIATION);
		sprintf(OLED_Row_3,"T ANG: %6d\0",(int)TARGET_ANGLE);
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <show+0xa0>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f7fd fc2f 	bl	8000b58 <__aeabi_d2iz>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	491b      	ldr	r1, [pc, #108]	; (800336c <show+0xa4>)
 8003300:	481b      	ldr	r0, [pc, #108]	; (8003370 <show+0xa8>)
 8003302:	f009 f8e9 	bl	800c4d8 <siprintf>
		sprintf(OLED_Row_6,"FD: %d\0",final_distance);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <show+0xac>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	491a      	ldr	r1, [pc, #104]	; (8003378 <show+0xb0>)
 800330e:	481b      	ldr	r0, [pc, #108]	; (800337c <show+0xb4>)
 8003310:	f009 f8e2 	bl	800c4d8 <siprintf>
		OLED_ShowString(10,0,OLED_Row_6); //Show motor state
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <show+0xb4>)
 8003316:	2100      	movs	r1, #0
 8003318:	200a      	movs	r0, #10
 800331a:	f7fe f8bf 	bl	800149c <OLED_ShowString>
		OLED_ShowString(10,10,OLED_Row_0);
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <show+0xb8>)
 8003320:	210a      	movs	r1, #10
 8003322:	200a      	movs	r0, #10
 8003324:	f7fe f8ba 	bl	800149c <OLED_ShowString>
		OLED_ShowString(10,20,token);
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <show+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	2114      	movs	r1, #20
 8003330:	200a      	movs	r0, #10
 8003332:	f7fe f8b3 	bl	800149c <OLED_ShowString>
		OLED_ShowString(10,30,OLED_Row_3);
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <show+0xa8>)
 8003338:	211e      	movs	r1, #30
 800333a:	200a      	movs	r0, #10
 800333c:	f7fe f8ae 	bl	800149c <OLED_ShowString>
		OLED_ShowString(10,40,OLED_Row_4);
 8003340:	4a11      	ldr	r2, [pc, #68]	; (8003388 <show+0xc0>)
 8003342:	2128      	movs	r1, #40	; 0x28
 8003344:	200a      	movs	r0, #10
 8003346:	f7fe f8a9 	bl	800149c <OLED_ShowString>
		OLED_Refresh_Gram();
 800334a:	f7fd ff33 	bl	80011b4 <OLED_Refresh_Gram>
		sprintf(OLED_Row_1,"PWM L: %6d\0",PWML);
 800334e:	e7bf      	b.n	80032d0 <show+0x8>
 8003350:	200009bc 	.word	0x200009bc
 8003354:	0800ec58 	.word	0x0800ec58
 8003358:	20000944 	.word	0x20000944
 800335c:	200009c0 	.word	0x200009c0
 8003360:	0800ec64 	.word	0x0800ec64
 8003364:	20000958 	.word	0x20000958
 8003368:	20000928 	.word	0x20000928
 800336c:	0800ec70 	.word	0x0800ec70
 8003370:	2000096c 	.word	0x2000096c
 8003374:	20000018 	.word	0x20000018
 8003378:	0800ec7c 	.word	0x0800ec7c
 800337c:	200009a8 	.word	0x200009a8
 8003380:	20000930 	.word	0x20000930
 8003384:	200008c8 	.word	0x200008c8
 8003388:	20000980 	.word	0x20000980

0800338c <Motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Motor */
void Motor(void *argument)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0ba      	sub	sp, #232	; 0xe8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Motor */
	//start generating PWN signal for me
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_1); // MotorA
 8003394:	2100      	movs	r1, #0
 8003396:	48a6      	ldr	r0, [pc, #664]	; (8003630 <Motor+0x2a4>)
 8003398:	f003 f912 	bl	80065c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_2); // MotorB
 800339c:	2104      	movs	r1, #4
 800339e:	48a4      	ldr	r0, [pc, #656]	; (8003630 <Motor+0x2a4>)
 80033a0:	f003 f90e 	bl	80065c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo Motor
 80033a4:	210c      	movs	r1, #12
 80033a6:	48a3      	ldr	r0, [pc, #652]	; (8003634 <Motor+0x2a8>)
 80033a8:	f003 f90a 	bl	80065c0 <HAL_TIM_PWM_Start>
	motor_dir = 0; servo_dir = 0;
 80033ac:	4ba2      	ldr	r3, [pc, #648]	; (8003638 <Motor+0x2ac>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	4ba2      	ldr	r3, [pc, #648]	; (800363c <Motor+0x2b0>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
	forward_motor_prep();
 80033b8:	f7fe ffda 	bl	8002370 <forward_motor_prep>
	servomotor_center();
 80033bc:	f7fe fff2 	bl	80023a4 <servomotor_center>

	int pwm_L_f, pwm_L_b;
	int pwm_R_f, pwm_R_b;
	int pwm_L_div = 1, pwm_R_div = 1;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033c6:	2301      	movs	r3, #1
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
//	int offset_L, offset_R;
	pwm_L_f = 2500; //Speed 2500 > 1950, 4000 > 3120, 3200 > 2500
 80033cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80033d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	pwm_L_b = 2625; //Speed 2500 > 2050, 4000 > 3280, 3200 > 2625
 80033d4:	f640 2341 	movw	r3, #2625	; 0xa41
 80033d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	pwm_R_f = 2625; //Speed 2500 > 2050, 4000 > 3280, 3200 > 2625
 80033dc:	f640 2341 	movw	r3, #2625	; 0xa41
 80033e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	pwm_R_b = 2690; //Speed 2500 > 2100, 4000 > 3360, 3200 > 2690
 80033e4:	f640 2382 	movw	r3, #2690	; 0xa82
 80033e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
//	double turning_prev = 0;
//	double off_angle = 0;

	struct PIDController motor_LF_PID, motor_RF_PID, motor_LB_PID, motor_RB_PID;

	MotorPIDController_Init(&motor_LF_PID);
 80033ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fd95 	bl	8000f20 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_RF_PID);
 80033f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fd90 	bl	8000f20 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_LB_PID);
 8003400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fd8b 	bl	8000f20 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_RB_PID);
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd fd86 	bl	8000f20 <MotorPIDController_Init>
	//Make sure the Servo motor position is in middle position
//	servomotor_right();
//	osDelay(500);
//	servomotor_left();
//	osDelay(500);
	servomotor_center();
 8003414:	f7fe ffc6 	bl	80023a4 <servomotor_center>
	/* Infinite loop */
	uint32_t tick = HAL_GetTick();
 8003418:	f001 f820 	bl	800445c <HAL_GetTick>
 800341c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	uint32_t pid_time_start = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RX_FLAG = 1;
 8003426:	4b86      	ldr	r3, [pc, #536]	; (8003640 <Motor+0x2b4>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]
	RX_MOTOR = 'F';
 800342c:	4b85      	ldr	r3, [pc, #532]	; (8003644 <Motor+0x2b8>)
 800342e:	2246      	movs	r2, #70	; 0x46
 8003430:	701a      	strb	r2, [r3, #0]
	RX_SERVO = 'C';
 8003432:	4b85      	ldr	r3, [pc, #532]	; (8003648 <Motor+0x2bc>)
 8003434:	2243      	movs	r2, #67	; 0x43
 8003436:	701a      	strb	r2, [r3, #0]
	RX_MAG = 30;
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <Motor+0x2c0>)
 800343a:	221e      	movs	r2, #30
 800343c:	601a      	str	r2, [r3, #0]
	for(;;)
	{	if (HAL_GetTick() - tick > 100L){
 800343e:	f001 f80d 	bl	800445c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	f240 819e 	bls.w	800378c <Motor+0x400>
			//Calculate wheel speed change from turning
			if (servo_dir != 0){
 8003450:	4b7a      	ldr	r3, [pc, #488]	; (800363c <Motor+0x2b0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <Motor+0xf8>
				if (servo_dir == -1) {pwm_L_div = 2; pwm_R_div = 1;}
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <Motor+0x2b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d105      	bne.n	800346e <Motor+0xe2>
 8003462:	2302      	movs	r3, #2
 8003464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003468:	2301      	movs	r3, #1
 800346a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				if (servo_dir == 1) {pwm_L_div = 1; pwm_R_div = 2;}
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <Motor+0x2b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10c      	bne.n	8003490 <Motor+0x104>
 8003476:	2301      	movs	r3, #1
 8003478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003482:	e005      	b.n	8003490 <Motor+0x104>
			}
			else {pwm_L_div = 1; pwm_R_div = 1;}
 8003484:	2301      	movs	r3, #1
 8003486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800348a:	2301      	movs	r3, #1
 800348c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			//Calculate deviation
			if (motor_dir != 0 && servo_dir == 0){
 8003490:	4b69      	ldr	r3, [pc, #420]	; (8003638 <Motor+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d036      	beq.n	8003506 <Motor+0x17a>
 8003498:	4b68      	ldr	r3, [pc, #416]	; (800363c <Motor+0x2b0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d132      	bne.n	8003506 <Motor+0x17a>
				ANGLE_OFFSET = 3*((int)3*(TARGET_ANGLE - TOTAL_ANGLE));
 80034a0:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <Motor+0x2c4>)
 80034a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a6:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <Motor+0x2c8>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fc feec 	bl	8000288 <__aeabi_dsub>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <Motor+0x2cc>)
 80034be:	f7fd f89b 	bl	80005f8 <__aeabi_dmul>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	4b62      	ldr	r3, [pc, #392]	; (8003658 <Motor+0x2cc>)
 80034d0:	f7fd f892 	bl	80005f8 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f7fd fb3c 	bl	8000b58 <__aeabi_d2iz>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4a5e      	ldr	r2, [pc, #376]	; (800365c <Motor+0x2d0>)
 80034e4:	6013      	str	r3, [r2, #0]
				if (ANGLE_OFFSET >= 10) ANGLE_OFFSET = 10;
 80034e6:	4b5d      	ldr	r3, [pc, #372]	; (800365c <Motor+0x2d0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b09      	cmp	r3, #9
 80034ec:	dd02      	ble.n	80034f4 <Motor+0x168>
 80034ee:	4b5b      	ldr	r3, [pc, #364]	; (800365c <Motor+0x2d0>)
 80034f0:	220a      	movs	r2, #10
 80034f2:	601a      	str	r2, [r3, #0]
				if (ANGLE_OFFSET <= -10) ANGLE_OFFSET = -10;
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <Motor+0x2d0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f113 0f09 	cmn.w	r3, #9
 80034fc:	da03      	bge.n	8003506 <Motor+0x17a>
 80034fe:	4b57      	ldr	r3, [pc, #348]	; (800365c <Motor+0x2d0>)
 8003500:	f06f 0209 	mvn.w	r2, #9
 8003504:	601a      	str	r2, [r3, #0]
			}
			//Control PID enable
			if (PID_DELAY == 1){
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <Motor+0x2d4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d106      	bne.n	800351c <Motor+0x190>
				pid_time_start = HAL_GetTick();
 800350e:	f000 ffa5 	bl	800445c <HAL_GetTick>
 8003512:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
				PID_DELAY = 0;
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <Motor+0x2d4>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
			}
			if (PID_ENABLE == 0 && (HAL_GetTick() - pid_time_start > 400L)){
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <Motor+0x2d8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <Motor+0x1b0>
 8003524:	f000 ff9a 	bl	800445c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003534:	d902      	bls.n	800353c <Motor+0x1b0>
				PID_ENABLE = 1;
 8003536:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <Motor+0x2d8>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
			}
			//Control motor
			if (motor_dir == 1){
 800353c:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <Motor+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	f040 8099 	bne.w	8003678 <Motor+0x2ec>
				//Start the motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwm_L_f/pwm_L_div);
 8003546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800354a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800354e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <Motor+0x2a4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm_R_f/pwm_R_div);
 8003558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800355c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003560:	fb92 f2f3 	sdiv	r2, r2, r3
 8003564:	4b32      	ldr	r3, [pc, #200]	; (8003630 <Motor+0x2a4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
//				if (servo_dir == 0) servomotor_set(SERVO_CENTER-ANGLE_OFFSET);
				//ADD PID CONTROL
				if (PID_ENABLE == 1){
 800356a:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <Motor+0x2d8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d14d      	bne.n	800360e <Motor+0x282>
					pwm_L_f = pwm_L_div*PIDController_Update(&motor_LF_PID, left_speed, 3200/pwm_L_div, pwm_L_f/pwm_L_div);
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <Motor+0x2dc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003586:	fb92 f3f3 	sdiv	r3, r2, r3
 800358a:	ee07 3a10 	vmov	s14, r3
 800358e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800359a:	fb92 f2f3 	sdiv	r2, r2, r3
 800359e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035a2:	4611      	mov	r1, r2
 80035a4:	eef0 0a47 	vmov.f32	s1, s14
 80035a8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fcd9 	bl	8000f64 <PIDController_Update>
 80035b2:	4602      	mov	r2, r0
 80035b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					pwm_R_f = pwm_R_div*PIDController_Update(&motor_RF_PID, right_speed, 3200/pwm_R_div, pwm_R_f/pwm_R_div);
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <Motor+0x2e0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035cc:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80035d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80035d8:	ee07 3a10 	vmov	s14, r3
 80035dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80035ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035f0:	4611      	mov	r1, r2
 80035f2:	eef0 0a47 	vmov.f32	s1, s14
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fcb2 	bl	8000f64 <PIDController_Update>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				}
				//display to OLED
				PWML = pwm_L_f/pwm_L_div;
 800360e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003616:	fb92 f3f3 	sdiv	r3, r2, r3
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <Motor+0x2e4>)
 800361c:	6013      	str	r3, [r2, #0]
				PWMR = pwm_R_f/pwm_R_div;
 800361e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003622:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003626:	fb92 f3f3 	sdiv	r3, r2, r3
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <Motor+0x2e8>)
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e0a9      	b.n	8003784 <Motor+0x3f8>
 8003630:	200007e8 	.word	0x200007e8
 8003634:	20000680 	.word	0x20000680
 8003638:	200009cc 	.word	0x200009cc
 800363c:	200009e8 	.word	0x200009e8
 8003640:	200009ec 	.word	0x200009ec
 8003644:	200009fc 	.word	0x200009fc
 8003648:	200009fd 	.word	0x200009fd
 800364c:	20000a00 	.word	0x20000a00
 8003650:	20000928 	.word	0x20000928
 8003654:	20000918 	.word	0x20000918
 8003658:	40080000 	.word	0x40080000
 800365c:	200009f8 	.word	0x200009f8
 8003660:	200009f0 	.word	0x200009f0
 8003664:	200009f4 	.word	0x200009f4
 8003668:	200009d0 	.word	0x200009d0
 800366c:	200009d4 	.word	0x200009d4
 8003670:	200009bc 	.word	0x200009bc
 8003674:	200009c0 	.word	0x200009c0
			}
			else if (motor_dir == -1){
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <Motor+0x408>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d174      	bne.n	800376c <Motor+0x3e0>
				//Start the motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwm_L_b/pwm_L_div);
 8003682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800368a:	fb92 f2f3 	sdiv	r2, r2, r3
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <Motor+0x40c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm_R_b/pwm_R_div);
 8003694:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800369c:	fb92 f2f3 	sdiv	r2, r2, r3
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <Motor+0x40c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
//				if (servo_dir == 0) servomotor_set(SERVO_CENTER+ANGLE_OFFSET);
				//ADD PID CONTROL
				if (PID_ENABLE == 1){
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <Motor+0x410>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d14d      	bne.n	800374a <Motor+0x3be>
					pwm_L_b = pwm_L_div*PIDController_Update(&motor_LB_PID, left_speed, 3200/pwm_L_div, pwm_L_b/pwm_L_div);
 80036ae:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <Motor+0x414>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80036be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80036c6:	ee07 3a10 	vmov	s14, r3
 80036ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80036da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036de:	4611      	mov	r1, r2
 80036e0:	eef0 0a47 	vmov.f32	s1, s14
 80036e4:	eeb0 0a67 	vmov.f32	s0, s15
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fc3b 	bl	8000f64 <PIDController_Update>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
					pwm_R_b = pwm_R_div*PIDController_Update(&motor_RB_PID, right_speed, 3200/pwm_R_div, pwm_R_b/pwm_R_div);
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <Motor+0x418>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003708:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800370c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003710:	fb92 f3f3 	sdiv	r3, r2, r3
 8003714:	ee07 3a10 	vmov	s14, r3
 8003718:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800371c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003720:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003724:	fb92 f2f3 	sdiv	r2, r2, r3
 8003728:	f107 0308 	add.w	r3, r7, #8
 800372c:	4611      	mov	r1, r2
 800372e:	eef0 0a47 	vmov.f32	s1, s14
 8003732:	eeb0 0a67 	vmov.f32	s0, s15
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fc14 	bl	8000f64 <PIDController_Update>
 800373c:	4602      	mov	r2, r0
 800373e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				}
				//Display to OLED
				PWML = pwm_L_b/pwm_L_div;
 800374a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800374e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003752:	fb92 f3f3 	sdiv	r3, r2, r3
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <Motor+0x41c>)
 8003758:	6013      	str	r3, [r2, #0]
				PWMR = pwm_R_b/pwm_R_div;
 800375a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800375e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003762:	fb92 f3f3 	sdiv	r3, r2, r3
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <Motor+0x420>)
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <Motor+0x3f8>
			}
			else {
				PWML = 0;
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <Motor+0x41c>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
				PWMR = 0;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <Motor+0x420>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
				PID_ENABLE = 0;
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <Motor+0x410>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
				ANGLE_OFFSET = 0;
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <Motor+0x424>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
//				turning_prev = TOTAL_ANGLE-TARGET_ANGLE;
//				deviation_prev = 0;
			}
			tick = HAL_GetTick();
 8003784:	f000 fe6a 	bl	800445c <HAL_GetTick>
 8003788:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		}
		osDelay(10);
 800378c:	200a      	movs	r0, #10
 800378e:	f005 fcd3 	bl	8009138 <osDelay>
	{	if (HAL_GetTick() - tick > 100L){
 8003792:	e654      	b.n	800343e <Motor+0xb2>
 8003794:	200009cc 	.word	0x200009cc
 8003798:	200007e8 	.word	0x200007e8
 800379c:	200009f4 	.word	0x200009f4
 80037a0:	200009d0 	.word	0x200009d0
 80037a4:	200009d4 	.word	0x200009d4
 80037a8:	200009bc 	.word	0x200009bc
 80037ac:	200009c0 	.word	0x200009c0
 80037b0:	200009f8 	.word	0x200009f8

080037b4 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b08e      	sub	sp, #56	; 0x38
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //activate the encoder for Motor A
 80037bc:	213c      	movs	r1, #60	; 0x3c
 80037be:	4874      	ldr	r0, [pc, #464]	; (8003990 <encoder_task+0x1dc>)
 80037c0:	f003 f9ee 	bl	8006ba0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL); //activate the encoder for Motor B
 80037c4:	213c      	movs	r1, #60	; 0x3c
 80037c6:	4873      	ldr	r0, [pc, #460]	; (8003994 <encoder_task+0x1e0>)
 80037c8:	f003 f9ea 	bl	8006ba0 <HAL_TIM_Encoder_Start>
  int left_prev, left_curr, left_diff, right_prev, right_curr, right_diff;
  int dir_L, dir_R;

  uint32_t tick, cur_tick, T;

  left_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80037cc:	4b70      	ldr	r3, [pc, #448]	; (8003990 <encoder_task+0x1dc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
  right_prev = __HAL_TIM_GET_COUNTER(&htim3);
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <encoder_task+0x1e0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
  tick = HAL_GetTick(); //tick value in milliseconds
 80037dc:	f000 fe3e 	bl	800445c <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	; 0x24

  for(;;)
  {
	  cur_tick = HAL_GetTick();
 80037e2:	f000 fe3b 	bl	800445c <HAL_GetTick>
 80037e6:	6238      	str	r0, [r7, #32]
	  if (cur_tick - tick > 50L){ //every 0.05 second
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b32      	cmp	r3, #50	; 0x32
 80037f0:	f240 80c9 	bls.w	8003986 <encoder_task+0x1d2>
		  left_curr = __HAL_TIM_GET_COUNTER(&htim2);
 80037f4:	4b66      	ldr	r3, [pc, #408]	; (8003990 <encoder_task+0x1dc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	61fb      	str	r3, [r7, #28]
		  right_curr = __HAL_TIM_GET_COUNTER(&htim3);
 80037fc:	4b65      	ldr	r3, [pc, #404]	; (8003994 <encoder_task+0x1e0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	61bb      	str	r3, [r7, #24]
		  //Left encoder
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8003804:	4b62      	ldr	r3, [pc, #392]	; (8003990 <encoder_task+0x1dc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d112      	bne.n	8003838 <encoder_task+0x84>
			  if(left_curr <= left_prev){
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	429a      	cmp	r2, r3
 8003818:	dc04      	bgt.n	8003824 <encoder_task+0x70>
				  left_diff = left_prev - left_curr;
 800381a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
 8003822:	e006      	b.n	8003832 <encoder_task+0x7e>
			  }
			  else {
				  left_diff = (65535 - left_curr) + left_prev; //handle overflow situation
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800382a:	33ff      	adds	r3, #255	; 0xff
 800382c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800382e:	4413      	add	r3, r2
 8003830:	633b      	str	r3, [r7, #48]	; 0x30
			  }
			  dir_L = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e012      	b.n	800385e <encoder_task+0xaa>
		  }
		  else {
			  if(left_curr >= left_prev){
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	429a      	cmp	r2, r3
 800383e:	db04      	blt.n	800384a <encoder_task+0x96>
				  left_diff = left_curr - left_prev;
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
 8003848:	e006      	b.n	8003858 <encoder_task+0xa4>
			  }
			  else {
				  left_diff = (65535 - left_prev) + left_curr;
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003850:	33ff      	adds	r3, #255	; 0xff
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
			  }
			  dir_L = -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	617b      	str	r3, [r7, #20]
		  }
		  //Right encoder
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 800385e:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <encoder_task+0x1e0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	d113      	bne.n	8003894 <encoder_task+0xe0>
			  if(right_curr <= right_prev){
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	dc04      	bgt.n	800387e <encoder_task+0xca>
				  right_diff = right_prev - right_curr;
 8003874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
 800387c:	e006      	b.n	800388c <encoder_task+0xd8>
			  }
			  else {
				  right_diff = (65535 - right_curr) + right_prev; //handle overflow situation
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003884:	33ff      	adds	r3, #255	; 0xff
 8003886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003888:	4413      	add	r3, r2
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
			  }
			  dir_R = -1;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e011      	b.n	80038b8 <encoder_task+0x104>
		  }
		  else {
			  if(right_curr >= right_prev){
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	429a      	cmp	r2, r3
 800389a:	db04      	blt.n	80038a6 <encoder_task+0xf2>
				  right_diff = right_curr - right_prev;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a4:	e006      	b.n	80038b4 <encoder_task+0x100>
			  }
			  else {
				  right_diff = (65535 - right_prev) + right_curr;
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80038ac:	33ff      	adds	r3, #255	; 0xff
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
			  }
			  dir_R = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
		  }
		  T = cur_tick - tick;
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	60fb      	str	r3, [r7, #12]
		  //Show speed in ticks/s
		  left_speed = left_diff * (1000/T);
 80038c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <encoder_task+0x1e4>)
 80038d4:	601a      	str	r2, [r3, #0]
		  right_speed = right_diff * (1000/T);
 80038d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <encoder_task+0x1e8>)
 80038ea:	601a      	str	r2, [r3, #0]
		  //Calculate distance traveled
//		  distInt_L += left_diff * dir_L;
//		  distInt_R += right_diff * dir_R;
//		  sprintf(OLED_Row_1, "DST L: %6d\0", distInt_L);
//		  sprintf(OLED_Row_2, "DST R: %6d\0", distInt_R);
		  LEFTWHEEL_DIST += (double)left_diff * (circumference_wheel/full_rotation_wheel);
 80038ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ee:	f7fc fe19 	bl	8000524 <__aeabi_i2d>
 80038f2:	4604      	mov	r4, r0
 80038f4:	460d      	mov	r5, r1
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <encoder_task+0x1ec>)
 80038f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <encoder_task+0x1f0>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc ffa3 	bl	800084c <__aeabi_ddiv>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4620      	mov	r0, r4
 800390c:	4629      	mov	r1, r5
 800390e:	f7fc fe73 	bl	80005f8 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <encoder_task+0x1f4>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fcb4 	bl	800028c <__adddf3>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	491f      	ldr	r1, [pc, #124]	; (80039a8 <encoder_task+0x1f4>)
 800392a:	e9c1 2300 	strd	r2, r3, [r1]
		  RIGHTWHEEL_DIST += (double)right_diff * (circumference_wheel/full_rotation_wheel);
 800392e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003930:	f7fc fdf8 	bl	8000524 <__aeabi_i2d>
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <encoder_task+0x1ec>)
 800393a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <encoder_task+0x1f0>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc ff82 	bl	800084c <__aeabi_ddiv>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4620      	mov	r0, r4
 800394e:	4629      	mov	r1, r5
 8003950:	f7fc fe52 	bl	80005f8 <__aeabi_dmul>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <encoder_task+0x1f8>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fc93 	bl	800028c <__adddf3>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4910      	ldr	r1, [pc, #64]	; (80039ac <encoder_task+0x1f8>)
 800396c:	e9c1 2300 	strd	r2, r3, [r1]

		  //Reset counters
		  left_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <encoder_task+0x1dc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
		  right_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <encoder_task+0x1e0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  tick = HAL_GetTick(); //tick value in milliseconds
 8003980:	f000 fd6c 	bl	800445c <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24
	  }
	  osDelay(10);
 8003986:	200a      	movs	r0, #10
 8003988:	f005 fbd6 	bl	8009138 <osDelay>
	  cur_tick = HAL_GetTick();
 800398c:	e729      	b.n	80037e2 <encoder_task+0x2e>
 800398e:	bf00      	nop
 8003990:	200006c8 	.word	0x200006c8
 8003994:	20000710 	.word	0x20000710
 8003998:	200009d0 	.word	0x200009d0
 800399c:	200009d4 	.word	0x200009d4
 80039a0:	20000028 	.word	0x20000028
 80039a4:	20000020 	.word	0x20000020
 80039a8:	200009d8 	.word	0x200009d8
 80039ac:	200009e0 	.word	0x200009e0

080039b0 <ultrasound_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_task */
void ultrasound_task(void *argument)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN Ultrasonicsensor */
	  /* Infinite loop */
		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80039b8:	2100      	movs	r1, #0
 80039ba:	4840      	ldr	r0, [pc, #256]	; (8003abc <ultrasound_task+0x10c>)
 80039bc:	f002 ff22 	bl	8006804 <HAL_TIM_IC_Start_IT>
		int s1=0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
		int s2=0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
		int s3=0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		int s1c=0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
		int s2c=0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
		int s3c=0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
		uint8_t dist[20];

	  for(;;)
	  {
		  for(int sc=0;sc<30;sc++)
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e030      	b.n	8003a40 <ultrasound_task+0x90>
		  {
			  HCSR04_Read();
 80039de:	f7fe ff77 	bl	80028d0 <HCSR04_Read>
			  s1 = UD;
 80039e2:	4b37      	ldr	r3, [pc, #220]	; (8003ac0 <ultrasound_task+0x110>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
			  if(UD==s1)
 80039e8:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <ultrasound_task+0x110>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d103      	bne.n	80039fc <ultrasound_task+0x4c>
			  {
				  s1c++;
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	3301      	adds	r3, #1
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	e01e      	b.n	8003a3a <ultrasound_task+0x8a>
			  }
			  else if(UD!=s1)
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <ultrasound_task+0x110>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d006      	beq.n	8003a16 <ultrasound_task+0x66>
			  {
				  s2 = UD;
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <ultrasound_task+0x110>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
				  s2c++;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	3301      	adds	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e011      	b.n	8003a3a <ultrasound_task+0x8a>
			  }
			  else if(UD!=s1 && UD!=s2)
 8003a16:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <ultrasound_task+0x110>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <ultrasound_task+0x8a>
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <ultrasound_task+0x110>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d005      	beq.n	8003a3a <ultrasound_task+0x8a>
			  {
				  s3 = UD;
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <ultrasound_task+0x110>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
				  s3c++;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	3301      	adds	r3, #1
 8003a38:	623b      	str	r3, [r7, #32]
		  for(int sc=0;sc<30;sc++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b1d      	cmp	r3, #29
 8003a44:	ddcb      	ble.n	80039de <ultrasound_task+0x2e>
			  }
		  }
		  if(s1c>s2c && s1c>s3c)
 8003a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dd08      	ble.n	8003a60 <ultrasound_task+0xb0>
 8003a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dd04      	ble.n	8003a60 <ultrasound_task+0xb0>
		  {
			  Distance=s1;
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <ultrasound_task+0x114>)
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e018      	b.n	8003a92 <ultrasound_task+0xe2>
		  }
		  else if(s2c>s1c && s2c>s3c)
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dd08      	ble.n	8003a7a <ultrasound_task+0xca>
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dd04      	ble.n	8003a7a <ultrasound_task+0xca>
		  {
			  Distance=s2;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <ultrasound_task+0x114>)
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e00b      	b.n	8003a92 <ultrasound_task+0xe2>
		  }
		  else if(s3c>s1c && s3c>s2c)
 8003a7a:	6a3a      	ldr	r2, [r7, #32]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	dd07      	ble.n	8003a92 <ultrasound_task+0xe2>
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dd03      	ble.n	8003a92 <ultrasound_task+0xe2>
		  {
			  Distance=s3;
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <ultrasound_task+0x114>)
 8003a90:	701a      	strb	r2, [r3, #0]
		  }
		  sprintf(dist, "DIST: %5d CM", Distance);
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <ultrasound_task+0x114>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <ultrasound_task+0x118>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f008 fd1a 	bl	800c4d8 <siprintf>
		  OLED_ShowString(10,50,dist);
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2132      	movs	r1, #50	; 0x32
 8003aac:	200a      	movs	r0, #10
 8003aae:	f7fd fcf5 	bl	800149c <OLED_ShowString>
		  osDelay(10);
 8003ab2:	200a      	movs	r0, #10
 8003ab4:	f005 fb40 	bl	8009138 <osDelay>
		  for(int sc=0;sc<30;sc++)
 8003ab8:	e78e      	b.n	80039d8 <ultrasound_task+0x28>
 8003aba:	bf00      	nop
 8003abc:	20000758 	.word	0x20000758
 8003ac0:	20000016 	.word	0x20000016
 8003ac4:	20000015 	.word	0x20000015
 8003ac8:	0800ec84 	.word	0x0800ec84
 8003acc:	00000000 	.word	0x00000000

08003ad0 <gyro_task>:
//	}
//  /* USER CODE END ultrasound_task */
}

void gyro_task(void *argument)
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_task */
  /* Infinite loop */
	double offset = 7.848882995;//High power offset 7.85 //Low power offset 7.8475
 8003ad8:	a366      	add	r3, pc, #408	; (adr r3, 8003c74 <gyro_task+0x1a4>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double angle;
  for(;;)
  {
	  uint8_t val[2] = {0, 0};
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	81bb      	strh	r3, [r7, #12]
	  int16_t angular_speed = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	83fb      	strh	r3, [r7, #30]

	  uint32_t tick = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  gyroInit();
 8003aee:	f7fe fd93 	bl	8002618 <gyroInit>

	  tick = HAL_GetTick();
 8003af2:	f000 fcb3 	bl	800445c <HAL_GetTick>
 8003af6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  osDelayUntil(10);
 8003af8:	200a      	movs	r0, #10
 8003afa:	f005 fb38 	bl	800916e <osDelayUntil>

	  for (;;)
	  {

	    osDelay(10);
 8003afe:	200a      	movs	r0, #10
 8003b00:	f005 fb1a 	bl	8009138 <osDelay>
	    if (HAL_GetTick() - tick >= 50L)
 8003b04:	f000 fcaa 	bl	800445c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b31      	cmp	r3, #49	; 0x31
 8003b10:	d9f5      	bls.n	8003afe <gyro_task+0x2e>
	    {
	      readByte(0x37, val);
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	4619      	mov	r1, r3
 8003b18:	2037      	movs	r0, #55	; 0x37
 8003b1a:	f7fe fdf3 	bl	8002704 <readByte>
	      angular_speed = (val[0] << 8) | val[1];
 8003b1e:	7b3b      	ldrb	r3, [r7, #12]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	b21a      	sxth	r2, r3
 8003b24:	7b7b      	ldrb	r3, [r7, #13]
 8003b26:	b21b      	sxth	r3, r3
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	83fb      	strh	r3, [r7, #30]

//	      if (motor_dir == 0){
//	    	  offset = (offset-(double)(angular_speed))/2;
//	      }

	      angle = ((double)(angular_speed)+offset) * ((HAL_GetTick() - tick) / 16400.0);
 8003b2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fcf7 	bl	8000524 <__aeabi_i2d>
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	f7fc fba7 	bl	800028c <__adddf3>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	461d      	mov	r5, r3
 8003b46:	f000 fc89 	bl	800445c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fcd7 	bl	8000504 <__aeabi_ui2d>
 8003b56:	a349      	add	r3, pc, #292	; (adr r3, 8003c7c <gyro_task+0x1ac>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f7fc fe76 	bl	800084c <__aeabi_ddiv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fd46 	bl	80005f8 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	      if (motor_dir == 0) angle = 0;
	      TOTAL_ANGLE += angle;
 8003b74:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <gyro_task+0x180>)
 8003b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b7e:	f7fc fb85 	bl	800028c <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4932      	ldr	r1, [pc, #200]	; (8003c50 <gyro_task+0x180>)
 8003b88:	e9c1 2300 	strd	r2, r3, [r1]
	      TURNING_ANGLE += angle;
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <gyro_task+0x184>)
 8003b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b96:	f7fc fb79 	bl	800028c <__adddf3>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	492d      	ldr	r1, [pc, #180]	; (8003c54 <gyro_task+0x184>)
 8003ba0:	e9c1 2300 	strd	r2, r3, [r1]

	      // prevSpeed = angular_speed;
	      if (TOTAL_ANGLE >= 720)
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <gyro_task+0x180>)
 8003ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <gyro_task+0x188>)
 8003bb0:	f7fc ffa8 	bl	8000b04 <__aeabi_dcmpge>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <gyro_task+0x104>
	      {
	        TOTAL_ANGLE -= 720;
 8003bba:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <gyro_task+0x180>)
 8003bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <gyro_task+0x188>)
 8003bc6:	f7fc fb5f 	bl	8000288 <__aeabi_dsub>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4920      	ldr	r1, [pc, #128]	; (8003c50 <gyro_task+0x180>)
 8003bd0:	e9c1 2300 	strd	r2, r3, [r1]
	      }
	      if (TOTAL_ANGLE <= -720)
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <gyro_task+0x180>)
 8003bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <gyro_task+0x18c>)
 8003be0:	f7fc ff86 	bl	8000af0 <__aeabi_dcmple>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <gyro_task+0x134>
	      {
	        TOTAL_ANGLE += 720;
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <gyro_task+0x180>)
 8003bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <gyro_task+0x188>)
 8003bf6:	f7fc fb49 	bl	800028c <__adddf3>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4914      	ldr	r1, [pc, #80]	; (8003c50 <gyro_task+0x180>)
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]
	      }
//	      sprintf(OLED_Row_1, "OFSET: %6d\0", (int)((offset*10000)));
	      sprintf(OLED_Row_4, "ANGLE: %6d\0", (int)(TOTAL_ANGLE));
 8003c04:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <gyro_task+0x180>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fc ffa3 	bl	8000b58 <__aeabi_d2iz>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	4912      	ldr	r1, [pc, #72]	; (8003c60 <gyro_task+0x190>)
 8003c18:	4812      	ldr	r0, [pc, #72]	; (8003c64 <gyro_task+0x194>)
 8003c1a:	f008 fc5d 	bl	800c4d8 <siprintf>
	      sprintf(OLED_Row_5, "A_100: %6d\0", (int)(100*TOTAL_ANGLE));
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <gyro_task+0x180>)
 8003c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <gyro_task+0x198>)
 8003c2a:	f7fc fce5 	bl	80005f8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc ff8f 	bl	8000b58 <__aeabi_d2iz>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	490b      	ldr	r1, [pc, #44]	; (8003c6c <gyro_task+0x19c>)
 8003c40:	480b      	ldr	r0, [pc, #44]	; (8003c70 <gyro_task+0x1a0>)
 8003c42:	f008 fc49 	bl	800c4d8 <siprintf>

	      tick = HAL_GetTick();
 8003c46:	f000 fc09 	bl	800445c <HAL_GetTick>
 8003c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
	    osDelay(10);
 8003c4c:	e757      	b.n	8003afe <gyro_task+0x2e>
 8003c4e:	bf00      	nop
 8003c50:	20000918 	.word	0x20000918
 8003c54:	20000920 	.word	0x20000920
 8003c58:	40868000 	.word	0x40868000
 8003c5c:	c0868000 	.word	0xc0868000
 8003c60:	0800ec94 	.word	0x0800ec94
 8003c64:	20000980 	.word	0x20000980
 8003c68:	40590000 	.word	0x40590000
 8003c6c:	0800eca0 	.word	0x0800eca0
 8003c70:	20000994 	.word	0x20000994
 8003c74:	95769f44 	.word	0x95769f44
 8003c78:	401f6541 	.word	0x401f6541
 8003c7c:	00000000 	.word	0x00000000
 8003c80:	40d00400 	.word	0x40d00400

08003c84 <Error_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasound_task */
void Error_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c88:	b672      	cpsid	i
}
 8003c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <Error_Handler+0x8>
	...

08003c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_MspInit+0x54>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <HAL_MspInit+0x54>)
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_MspInit+0x54>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	210f      	movs	r1, #15
 8003cd2:	f06f 0001 	mvn.w	r0, #1
 8003cd6:	f000 fccc 	bl	8004672 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_I2C_MspInit+0x84>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12c      	bne.n	8003d64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d2c:	2312      	movs	r3, #18
 8003d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d38:	2304      	movs	r3, #4
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	480c      	ldr	r0, [pc, #48]	; (8003d74 <HAL_I2C_MspInit+0x8c>)
 8003d44:	f000 fd5e 	bl	8004804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_I2C_MspInit+0x88>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d64:	bf00      	nop
 8003d66:	3728      	adds	r7, #40	; 0x28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40005400 	.word	0x40005400
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020400 	.word	0x40020400

08003d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <HAL_TIM_Base_MspInit+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6453      	str	r3, [r2, #68]	; 0x44
 8003daa:	4b3c      	ldr	r3, [pc, #240]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003db6:	e06b      	b.n	8003e90 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM4)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <HAL_TIM_Base_MspInit+0x128>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d135      	bne.n	8003e2e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e00:	2302      	movs	r3, #2
 8003e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e10:	f107 031c 	add.w	r3, r7, #28
 8003e14:	4619      	mov	r1, r3
 8003e16:	4823      	ldr	r0, [pc, #140]	; (8003ea4 <HAL_TIM_Base_MspInit+0x12c>)
 8003e18:	f000 fcf4 	bl	8004804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2105      	movs	r1, #5
 8003e20:	201e      	movs	r0, #30
 8003e22:	f000 fc26 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e26:	201e      	movs	r0, #30
 8003e28:	f000 fc3f 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 8003e2c:	e030      	b.n	8003e90 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_TIM_Base_MspInit+0x130>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d12b      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	6453      	str	r3, [r2, #68]	; 0x44
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6313      	str	r3, [r2, #48]	; 0x30
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_TIM_Base_MspInit+0x124>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003e70:	23c0      	movs	r3, #192	; 0xc0
 8003e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e80:	2303      	movs	r3, #3
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4808      	ldr	r0, [pc, #32]	; (8003eac <HAL_TIM_Base_MspInit+0x134>)
 8003e8c:	f000 fcba 	bl	8004804 <HAL_GPIO_Init>
}
 8003e90:	bf00      	nop
 8003e92:	3730      	adds	r7, #48	; 0x30
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40020c00 	.word	0x40020c00
 8003ea8:	40010400 	.word	0x40010400
 8003eac:	40020800 	.word	0x40020800

08003eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d153      	bne.n	8003f7a <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a42      	ldr	r2, [pc, #264]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	4619      	mov	r1, r3
 8003f42:	4829      	ldr	r0, [pc, #164]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x138>)
 8003f44:	f000 fc5e 	bl	8004804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	4619      	mov	r1, r3
 8003f62:	4822      	ldr	r0, [pc, #136]	; (8003fec <HAL_TIM_Encoder_MspInit+0x13c>)
 8003f64:	f000 fc4e 	bl	8004804 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2105      	movs	r1, #5
 8003f6c:	201c      	movs	r0, #28
 8003f6e:	f000 fb80 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f72:	201c      	movs	r0, #28
 8003f74:	f000 fb99 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f78:	e030      	b.n	8003fdc <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM3)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x140>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d12b      	bne.n	8003fdc <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	6413      	str	r3, [r2, #64]	; 0x40
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x134>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fbc:	23c0      	movs	r3, #192	; 0xc0
 8003fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4804      	ldr	r0, [pc, #16]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x138>)
 8003fd8:	f000 fc14 	bl	8004804 <HAL_GPIO_Init>
}
 8003fdc:	bf00      	nop
 8003fde:	3730      	adds	r7, #48	; 0x30
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40020400 	.word	0x40020400
 8003ff0:	40000400 	.word	0x40000400

08003ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a12      	ldr	r2, [pc, #72]	; (800405c <HAL_TIM_MspPostInit+0x68>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d11e      	bne.n	8004054 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_TIM_MspPostInit+0x6c>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <HAL_TIM_MspPostInit+0x6c>)
 8004020:	f043 0310 	orr.w	r3, r3, #16
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_TIM_MspPostInit+0x6c>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004032:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004036:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004044:	2301      	movs	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	4619      	mov	r1, r3
 800404e:	4805      	ldr	r0, [pc, #20]	; (8004064 <HAL_TIM_MspPostInit+0x70>)
 8004050:	f000 fbd8 	bl	8004804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004054:	bf00      	nop
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010000 	.word	0x40010000
 8004060:	40023800 	.word	0x40023800
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_UART_MspInit+0x94>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d134      	bne.n	80040f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_UART_MspInit+0x98>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_UART_MspInit+0x98>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6413      	str	r3, [r2, #64]	; 0x40
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_UART_MspInit+0x98>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_UART_MspInit+0x98>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <HAL_UART_MspInit+0x98>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_UART_MspInit+0x98>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040d4:	2307      	movs	r3, #7
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	4809      	ldr	r0, [pc, #36]	; (8004104 <HAL_UART_MspInit+0x9c>)
 80040e0:	f000 fb90 	bl	8004804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80040e4:	2200      	movs	r2, #0
 80040e6:	2105      	movs	r1, #5
 80040e8:	2027      	movs	r0, #39	; 0x27
 80040ea:	f000 fac2 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040ee:	2027      	movs	r0, #39	; 0x27
 80040f0:	f000 fadb 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040f4:	bf00      	nop
 80040f6:	3728      	adds	r7, #40	; 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40004800 	.word	0x40004800
 8004100:	40023800 	.word	0x40023800
 8004104:	40020800 	.word	0x40020800

08004108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800410c:	e7fe      	b.n	800410c <NMI_Handler+0x4>

0800410e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004112:	e7fe      	b.n	8004112 <HardFault_Handler+0x4>

08004114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004118:	e7fe      	b.n	8004118 <MemManage_Handler+0x4>

0800411a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800411e:	e7fe      	b.n	800411e <BusFault_Handler+0x4>

08004120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004124:	e7fe      	b.n	8004124 <UsageFault_Handler+0x4>

08004126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004138:	f000 f97c 	bl	8004434 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800413c:	f006 fcb4 	bl	800aaa8 <xTaskGetSchedulerState>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004146:	f007 fa9f 	bl	800b688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <TIM2_IRQHandler+0x10>)
 8004156:	f002 fdb1 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200006c8 	.word	0x200006c8

08004164 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <TIM4_IRQHandler+0x10>)
 800416a:	f002 fda7 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000758 	.word	0x20000758

08004178 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <USART3_IRQHandler+0x10>)
 800417e:	f003 ff63 	bl	8008048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000830 	.word	0x20000830

0800418c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
	return 1;
 8004190:	2301      	movs	r3, #1
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_kill>:

int _kill(int pid, int sig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041a6:	f007 fced 	bl	800bb84 <__errno>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2216      	movs	r2, #22
 80041ae:	601a      	str	r2, [r3, #0]
	return -1;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_exit>:

void _exit (int status)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffe7 	bl	800419c <_kill>
	while (1) {}		/* Make sure we hang here */
 80041ce:	e7fe      	b.n	80041ce <_exit+0x12>

080041d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e00a      	b.n	80041f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041e2:	f3af 8000 	nop.w
 80041e6:	4601      	mov	r1, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	60ba      	str	r2, [r7, #8]
 80041ee:	b2ca      	uxtb	r2, r1
 80041f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	dbf0      	blt.n	80041e2 <_read+0x12>
	}

return len;
 8004200:	687b      	ldr	r3, [r7, #4]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e009      	b.n	8004230 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	60ba      	str	r2, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	dbf1      	blt.n	800421c <_write+0x12>
	}
	return len;
 8004238:	687b      	ldr	r3, [r7, #4]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_close>:

int _close(int file)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
	return -1;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800426a:	605a      	str	r2, [r3, #4]
	return 0;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <_isatty>:

int _isatty(int file)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
	return 1;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
	return 0;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <_sbrk+0x5c>)
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <_sbrk+0x60>)
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <_sbrk+0x64>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <_sbrk+0x64>)
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <_sbrk+0x68>)
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <_sbrk+0x64>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042dc:	f007 fc52 	bl	800bb84 <__errno>
 80042e0:	4603      	mov	r3, r0
 80042e2:	220c      	movs	r2, #12
 80042e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e009      	b.n	8004300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <_sbrk+0x64>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	4a05      	ldr	r2, [pc, #20]	; (8004310 <_sbrk+0x64>)
 80042fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20020000 	.word	0x20020000
 800430c:	00000400 	.word	0x00000400
 8004310:	20000a20 	.word	0x20000a20
 8004314:	20005388 	.word	0x20005388

08004318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <SystemInit+0x20>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <SystemInit+0x20>)
 8004324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800433c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004344:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004348:	e002      	b.n	8004350 <LoopCopyDataInit>

0800434a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800434c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800434e:	3304      	adds	r3, #4

08004350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004354:	d3f9      	bcc.n	800434a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004358:	4c0b      	ldr	r4, [pc, #44]	; (8004388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800435c:	e001      	b.n	8004362 <LoopFillZerobss>

0800435e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800435e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004360:	3204      	adds	r2, #4

08004362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004364:	d3fb      	bcc.n	800435e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004366:	f7ff ffd7 	bl	8004318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800436a:	f007 fc11 	bl	800bb90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800436e:	f7fd f953 	bl	8001618 <main>
  bx  lr    
 8004372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800437c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004380:	0800fc6c 	.word	0x0800fc6c
  ldr r2, =_sbss
 8004384:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004388:	20005388 	.word	0x20005388

0800438c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC_IRQHandler>
	...

08004390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_Init+0x40>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <HAL_Init+0x40>)
 800439a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800439e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_Init+0x40>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_Init+0x40>)
 80043a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_Init+0x40>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <HAL_Init+0x40>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b8:	2003      	movs	r0, #3
 80043ba:	f000 f94f 	bl	800465c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043be:	200f      	movs	r0, #15
 80043c0:	f000 f808 	bl	80043d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043c4:	f7ff fc64 	bl	8003c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00

080043d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043dc:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_InitTick+0x54>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_InitTick+0x58>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f967 	bl	80046c6 <HAL_SYSTICK_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e00e      	b.n	8004420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d80a      	bhi.n	800441e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004408:	2200      	movs	r2, #0
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	f000 f92f 	bl	8004672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004414:	4a06      	ldr	r2, [pc, #24]	; (8004430 <HAL_InitTick+0x5c>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000030 	.word	0x20000030
 800442c:	20000038 	.word	0x20000038
 8004430:	20000034 	.word	0x20000034

08004434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_IncTick+0x20>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_IncTick+0x24>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4413      	add	r3, r2
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <HAL_IncTick+0x24>)
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000038 	.word	0x20000038
 8004458:	20000a24 	.word	0x20000a24

0800445c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return uwTick;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_GetTick+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000a24 	.word	0x20000a24

08004474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff ffee 	bl	800445c <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d005      	beq.n	800449a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_Delay+0x44>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800449a:	bf00      	nop
 800449c:	f7ff ffde 	bl	800445c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f7      	bhi.n	800449c <HAL_Delay+0x28>
  {
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000038 	.word	0x20000038

080044bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4907      	ldr	r1, [pc, #28]	; (8004558 <__NVIC_EnableIRQ+0x38>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100

0800455c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	490c      	ldr	r1, [pc, #48]	; (80045a8 <__NVIC_SetPriority+0x4c>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	440b      	add	r3, r1
 8004580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004584:	e00a      	b.n	800459c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <__NVIC_SetPriority+0x50>)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b04      	subs	r3, #4
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	440b      	add	r3, r1
 800459a:	761a      	strb	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000e100 	.word	0xe000e100
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf28      	it	cs
 80045ce:	2304      	movcs	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d902      	bls.n	80045e0 <NVIC_EncodePriority+0x30>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b03      	subs	r3, #3
 80045de:	e000      	b.n	80045e2 <NVIC_EncodePriority+0x32>
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	401a      	ands	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43d9      	mvns	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	4313      	orrs	r3, r2
         );
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004628:	d301      	bcc.n	800462e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <SysTick_Config+0x40>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004636:	210f      	movs	r1, #15
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	f7ff ff8e 	bl	800455c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <SysTick_Config+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <SysTick_Config+0x40>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000e010 	.word	0xe000e010

0800465c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff29 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004684:	f7ff ff3e 	bl	8004504 <__NVIC_GetPriorityGrouping>
 8004688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff8e 	bl	80045b0 <NVIC_EncodePriority>
 8004694:	4602      	mov	r2, r0
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff5d 	bl	800455c <__NVIC_SetPriority>
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff31 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffa2 	bl	8004618 <SysTick_Config>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ec:	f7ff feb6 	bl	800445c <HAL_GetTick>
 80046f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d008      	beq.n	8004710 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e052      	b.n	80047b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0216 	bic.w	r2, r2, #22
 800471e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <HAL_DMA_Abort+0x62>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0208 	bic.w	r2, r2, #8
 800474e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004760:	e013      	b.n	800478a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004762:	f7ff fe7b 	bl	800445c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b05      	cmp	r3, #5
 800476e:	d90c      	bls.n	800478a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e015      	b.n	80047b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e4      	bne.n	8004762 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	223f      	movs	r2, #63	; 0x3f
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00c      	b.n	80047f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e16b      	b.n	8004af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004820:	2201      	movs	r2, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	f040 815a 	bne.w	8004af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d005      	beq.n	8004856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004852:	2b02      	cmp	r3, #2
 8004854:	d130      	bne.n	80048b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800488c:	2201      	movs	r2, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 0201 	and.w	r2, r3, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d017      	beq.n	80048f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d123      	bne.n	8004948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	08da      	lsrs	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3208      	adds	r2, #8
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	220f      	movs	r2, #15
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80b4 	beq.w	8004af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <HAL_GPIO_Init+0x30c>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	4a5f      	ldr	r2, [pc, #380]	; (8004b10 <HAL_GPIO_Init+0x30c>)
 8004994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004998:	6453      	str	r3, [r2, #68]	; 0x44
 800499a:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <HAL_GPIO_Init+0x30c>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a6:	4a5b      	ldr	r2, [pc, #364]	; (8004b14 <HAL_GPIO_Init+0x310>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_GPIO_Init+0x314>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02b      	beq.n	8004a2a <HAL_GPIO_Init+0x226>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a51      	ldr	r2, [pc, #324]	; (8004b1c <HAL_GPIO_Init+0x318>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d025      	beq.n	8004a26 <HAL_GPIO_Init+0x222>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a50      	ldr	r2, [pc, #320]	; (8004b20 <HAL_GPIO_Init+0x31c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <HAL_GPIO_Init+0x21e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4f      	ldr	r2, [pc, #316]	; (8004b24 <HAL_GPIO_Init+0x320>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d019      	beq.n	8004a1e <HAL_GPIO_Init+0x21a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <HAL_GPIO_Init+0x324>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_GPIO_Init+0x216>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4d      	ldr	r2, [pc, #308]	; (8004b2c <HAL_GPIO_Init+0x328>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00d      	beq.n	8004a16 <HAL_GPIO_Init+0x212>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4c      	ldr	r2, [pc, #304]	; (8004b30 <HAL_GPIO_Init+0x32c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <HAL_GPIO_Init+0x20e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <HAL_GPIO_Init+0x330>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_GPIO_Init+0x20a>
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	e00e      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	e00c      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a12:	2306      	movs	r3, #6
 8004a14:	e00a      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a16:	2305      	movs	r3, #5
 8004a18:	e008      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	e006      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e004      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_GPIO_Init+0x228>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	f002 0203 	and.w	r2, r2, #3
 8004a32:	0092      	lsls	r2, r2, #2
 8004a34:	4093      	lsls	r3, r2
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3c:	4935      	ldr	r1, [pc, #212]	; (8004b14 <HAL_GPIO_Init+0x310>)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a6e:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a74:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aec:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_GPIO_Init+0x334>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	f67f ae90 	bls.w	8004820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40013800 	.word	0x40013800
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	40020400 	.word	0x40020400
 8004b20:	40020800 	.word	0x40020800
 8004b24:	40020c00 	.word	0x40020c00
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40021400 	.word	0x40021400
 8004b30:	40021800 	.word	0x40021800
 8004b34:	40021c00 	.word	0x40021c00
 8004b38:	40013c00 	.word	0x40013c00

08004b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b58:	e003      	b.n	8004b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	041a      	lsls	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	619a      	str	r2, [r3, #24]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e12b      	b.n	8004dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff f8a6 	bl	8003ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	; 0x24
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f001 fbba 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 8004bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a81      	ldr	r2, [pc, #516]	; (8004de4 <HAL_I2C_Init+0x274>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d807      	bhi.n	8004bf4 <HAL_I2C_Init+0x84>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a80      	ldr	r2, [pc, #512]	; (8004de8 <HAL_I2C_Init+0x278>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf94      	ite	ls
 8004bec:	2301      	movls	r3, #1
 8004bee:	2300      	movhi	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e006      	b.n	8004c02 <HAL_I2C_Init+0x92>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a7d      	ldr	r2, [pc, #500]	; (8004dec <HAL_I2C_Init+0x27c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0e7      	b.n	8004dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a78      	ldr	r2, [pc, #480]	; (8004df0 <HAL_I2C_Init+0x280>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0c9b      	lsrs	r3, r3, #18
 8004c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a6a      	ldr	r2, [pc, #424]	; (8004de4 <HAL_I2C_Init+0x274>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d802      	bhi.n	8004c44 <HAL_I2C_Init+0xd4>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	e009      	b.n	8004c58 <HAL_I2C_Init+0xe8>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a69      	ldr	r2, [pc, #420]	; (8004df4 <HAL_I2C_Init+0x284>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	3301      	adds	r3, #1
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	495c      	ldr	r1, [pc, #368]	; (8004de4 <HAL_I2C_Init+0x274>)
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d819      	bhi.n	8004cac <HAL_I2C_Init+0x13c>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e59      	subs	r1, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_I2C_Init+0x138>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1e59      	subs	r1, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	e051      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	e04f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <HAL_I2C_Init+0x168>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e012      	b.n	8004cfe <HAL_I2C_Init+0x18e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	0099      	lsls	r1, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Init+0x196>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e022      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10e      	bne.n	8004d2c <HAL_I2C_Init+0x1bc>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e58      	subs	r0, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	440b      	add	r3, r1
 8004d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Init+0x1dc>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	0099      	lsls	r1, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	6809      	ldr	r1, [r1, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6911      	ldr	r1, [r2, #16]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	000186a0 	.word	0x000186a0
 8004de8:	001e847f 	.word	0x001e847f
 8004dec:	003d08ff 	.word	0x003d08ff
 8004df0:	431bde83 	.word	0x431bde83
 8004df4:	10624dd3 	.word	0x10624dd3

08004df8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	461a      	mov	r2, r3
 8004e04:	460b      	mov	r3, r1
 8004e06:	817b      	strh	r3, [r7, #10]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e0c:	f7ff fb26 	bl	800445c <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	f040 80e0 	bne.w	8004fe0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2319      	movs	r3, #25
 8004e26:	2201      	movs	r2, #1
 8004e28:	4970      	ldr	r1, [pc, #448]	; (8004fec <HAL_I2C_Master_Transmit+0x1f4>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fc58 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e0d3      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_I2C_Master_Transmit+0x50>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0cc      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d007      	beq.n	8004e6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a50      	ldr	r2, [pc, #320]	; (8004ff0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eb0:	8979      	ldrh	r1, [r7, #10]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fac2 	bl	8005440 <I2C_MasterRequestWrite>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e08d      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004edc:	e066      	b.n	8004fac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	6a39      	ldr	r1, [r7, #32]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fcd2 	bl	800588c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d107      	bne.n	8004f06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06b      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d11b      	bne.n	8004f80 <HAL_I2C_Master_Transmit+0x188>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d017      	beq.n	8004f80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	6a39      	ldr	r1, [r7, #32]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fcc2 	bl	800590e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d107      	bne.n	8004fa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e01a      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d194      	bne.n	8004ede <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	00100002 	.word	0x00100002
 8004ff0:	ffff0000 	.word	0xffff0000

08004ff4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	461a      	mov	r2, r3
 8005000:	460b      	mov	r3, r1
 8005002:	817b      	strh	r3, [r7, #10]
 8005004:	4613      	mov	r3, r2
 8005006:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7ff fa28 	bl	800445c <HAL_GetTick>
 800500c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	f040 820b 	bne.w	8005432 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2319      	movs	r3, #25
 8005022:	2201      	movs	r2, #1
 8005024:	497c      	ldr	r1, [pc, #496]	; (8005218 <HAL_I2C_Master_Receive+0x224>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fb5a 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
 8005034:	e1fe      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_I2C_Master_Receive+0x50>
 8005040:	2302      	movs	r3, #2
 8005042:	e1f7      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d007      	beq.n	800506a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2222      	movs	r2, #34	; 0x22
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2210      	movs	r2, #16
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	893a      	ldrh	r2, [r7, #8]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_I2C_Master_Receive+0x228>)
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050ac:	8979      	ldrh	r1, [r7, #10]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa46 	bl	8005544 <I2C_MasterRequestRead>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1b8      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e18c      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d11b      	bne.n	8005132 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e16c      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b02      	cmp	r3, #2
 8005138:	d11b      	bne.n	8005172 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	e14c      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005198:	e138      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f200 80f1 	bhi.w	8005386 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d123      	bne.n	80051f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fbed 	bl	8005990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e139      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f2:	e10b      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d14e      	bne.n	800529a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	4906      	ldr	r1, [pc, #24]	; (8005220 <HAL_I2C_Master_Receive+0x22c>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fa6a 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e10e      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
 8005216:	bf00      	nop
 8005218:	00100002 	.word	0x00100002
 800521c:	ffff0000 	.word	0xffff0000
 8005220:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005298:	e0b8      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	4966      	ldr	r1, [pc, #408]	; (800543c <HAL_I2C_Master_Receive+0x448>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fa1b 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0bf      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	494f      	ldr	r1, [pc, #316]	; (800543c <HAL_I2C_Master_Receive+0x448>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f9ed 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e091      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005384:	e042      	b.n	800540c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fb00 	bl	8005990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e04c      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d118      	bne.n	800540c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	f47f aec2 	bne.w	800519a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	; 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	00010004 	.word	0x00010004

08005440 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	460b      	mov	r3, r1
 800544e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d006      	beq.n	800546a <I2C_MasterRequestWrite+0x2a>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d003      	beq.n	800546a <I2C_MasterRequestWrite+0x2a>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005468:	d108      	bne.n	800547c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e00b      	b.n	8005494 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	2b12      	cmp	r3, #18
 8005482:	d107      	bne.n	8005494 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f91d 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	d103      	bne.n	80054c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e035      	b.n	8005534 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d108      	bne.n	80054e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054e0:	611a      	str	r2, [r3, #16]
 80054e2:	e01b      	b.n	800551c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	11db      	asrs	r3, r3, #7
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f063 030f 	orn	r3, r3, #15
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <I2C_MasterRequestWrite+0xfc>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f943 	bl	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e010      	b.n	8005534 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4907      	ldr	r1, [pc, #28]	; (8005540 <I2C_MasterRequestWrite+0x100>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f933 	bl	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	00010008 	.word	0x00010008
 8005540:	00010002 	.word	0x00010002

08005544 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	460b      	mov	r3, r1
 8005552:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005568:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d006      	beq.n	800557e <I2C_MasterRequestRead+0x3a>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <I2C_MasterRequestRead+0x3a>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800557c:	d108      	bne.n	8005590 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e00b      	b.n	80055a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	2b11      	cmp	r3, #17
 8005596:	d107      	bne.n	80055a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f893 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d103      	bne.n	80055d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e079      	b.n	80056d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e4:	d108      	bne.n	80055f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e05f      	b.n	80056b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055f8:	897b      	ldrh	r3, [r7, #10]
 80055fa:	11db      	asrs	r3, r3, #7
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f063 030f 	orn	r3, r3, #15
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4930      	ldr	r1, [pc, #192]	; (80056d8 <I2C_MasterRequestRead+0x194>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f8b9 	bl	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e054      	b.n	80056d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4929      	ldr	r1, [pc, #164]	; (80056dc <I2C_MasterRequestRead+0x198>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f8a9 	bl	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e044      	b.n	80056d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f831 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d103      	bne.n	800569c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e017      	b.n	80056d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056a0:	897b      	ldrh	r3, [r7, #10]
 80056a2:	11db      	asrs	r3, r3, #7
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f003 0306 	and.w	r3, r3, #6
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f063 030e 	orn	r3, r3, #14
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4907      	ldr	r1, [pc, #28]	; (80056dc <I2C_MasterRequestRead+0x198>)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f865 	bl	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	00010008 	.word	0x00010008
 80056dc:	00010002 	.word	0x00010002

080056e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f0:	e025      	b.n	800573e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d021      	beq.n	800573e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fe feaf 	bl	800445c <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e023      	b.n	8005786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10d      	bne.n	8005764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	43da      	mvns	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	e00c      	b.n	800577e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	43da      	mvns	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d0b6      	beq.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800579c:	e051      	b.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ac:	d123      	bne.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0204 	orr.w	r2, r3, #4
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e046      	b.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d021      	beq.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fe fe2d 	bl	800445c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e020      	b.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10c      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	43da      	mvns	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	e00b      	b.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	43da      	mvns	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d18d      	bne.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005898:	e02d      	b.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f8ce 	bl	8005a3c <I2C_IsAcknowledgeFailed>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02d      	b.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d021      	beq.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b2:	f7fe fdd3 	bl	800445c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d302      	bcc.n	80058c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d116      	bne.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e007      	b.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	d1ca      	bne.n	800589a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800591a:	e02d      	b.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f88d 	bl	8005a3c <I2C_IsAcknowledgeFailed>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e02d      	b.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d021      	beq.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005934:	f7fe fd92 	bl	800445c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e007      	b.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d1ca      	bne.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800599c:	e042      	b.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d119      	bne.n	80059e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e029      	b.n	8005a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e0:	f7fe fd3c 	bl	800445c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d116      	bne.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	f043 0220 	orr.w	r2, r3, #32
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e007      	b.n	8005a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d1b5      	bne.n	800599e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a52:	d11b      	bne.n	8005a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	f043 0204 	orr.w	r2, r3, #4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <HAL_PWR_EnableBkUpAccess+0x20>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005aae:	687b      	ldr	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	420e0020 	.word	0x420e0020
 8005ac0:	40007000 	.word	0x40007000

08005ac4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005ad6:	687b      	ldr	r3, [r7, #4]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	420e0020 	.word	0x420e0020
 8005ae8:	40007000 	.word	0x40007000

08005aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e267      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d075      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b0a:	4b88      	ldr	r3, [pc, #544]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d00c      	beq.n	8005b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b16:	4b85      	ldr	r3, [pc, #532]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d112      	bne.n	8005b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b22:	4b82      	ldr	r3, [pc, #520]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2e:	d10b      	bne.n	8005b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	4b7e      	ldr	r3, [pc, #504]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05b      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x108>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d157      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e242      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_OscConfig+0x74>
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e01d      	b.n	8005b9c <HAL_RCC_OscConfig+0xb0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x98>
 8005b6a:	4b70      	ldr	r3, [pc, #448]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a6f      	ldr	r2, [pc, #444]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b6d      	ldr	r3, [pc, #436]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6c      	ldr	r2, [pc, #432]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e00b      	b.n	8005b9c <HAL_RCC_OscConfig+0xb0>
 8005b84:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a68      	ldr	r2, [pc, #416]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b66      	ldr	r3, [pc, #408]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a65      	ldr	r2, [pc, #404]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fe fc5a 	bl	800445c <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bac:	f7fe fc56 	bl	800445c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	; 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e207      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	4b5b      	ldr	r3, [pc, #364]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0xc0>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fe fc46 	bl	800445c <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fe fc42 	bl	800445c <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e1f3      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be6:	4b51      	ldr	r3, [pc, #324]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0xe8>
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d063      	beq.n	8005cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c02:	4b4a      	ldr	r3, [pc, #296]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d11c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d116      	bne.n	8005c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c26:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_RCC_OscConfig+0x152>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e1c7      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3e:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4937      	ldr	r1, [pc, #220]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c52:	e03a      	b.n	8005cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d020      	beq.n	8005c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c5c:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <HAL_RCC_OscConfig+0x244>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fe fbfb 	bl	800445c <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c6a:	f7fe fbf7 	bl	800445c <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e1a8      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c88:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4925      	ldr	r1, [pc, #148]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	600b      	str	r3, [r1, #0]
 8005c9c:	e015      	b.n	8005cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <HAL_RCC_OscConfig+0x244>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fe fbda 	bl	800445c <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cac:	f7fe fbd6 	bl	800445c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e187      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cbe:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d036      	beq.n	8005d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cde:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <HAL_RCC_OscConfig+0x248>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fe fbba 	bl	800445c <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cec:	f7fe fbb6 	bl	800445c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e167      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_RCC_OscConfig+0x240>)
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0x200>
 8005d0a:	e01b      	b.n	8005d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <HAL_RCC_OscConfig+0x248>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d12:	f7fe fba3 	bl	800445c <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d18:	e00e      	b.n	8005d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7fe fb9f 	bl	800445c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d907      	bls.n	8005d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e150      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	42470000 	.word	0x42470000
 8005d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d38:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ea      	bne.n	8005d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8097 	beq.w	8005e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10f      	bne.n	8005d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	4b7d      	ldr	r3, [pc, #500]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	4a7c      	ldr	r2, [pc, #496]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6413      	str	r3, [r2, #64]	; 0x40
 8005d72:	4b7a      	ldr	r3, [pc, #488]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b77      	ldr	r3, [pc, #476]	; (8005f60 <HAL_RCC_OscConfig+0x474>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d118      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d8e:	4b74      	ldr	r3, [pc, #464]	; (8005f60 <HAL_RCC_OscConfig+0x474>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a73      	ldr	r2, [pc, #460]	; (8005f60 <HAL_RCC_OscConfig+0x474>)
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9a:	f7fe fb5f 	bl	800445c <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da2:	f7fe fb5b 	bl	800445c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e10c      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db4:	4b6a      	ldr	r3, [pc, #424]	; (8005f60 <HAL_RCC_OscConfig+0x474>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d106      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x2ea>
 8005dc8:	4b64      	ldr	r3, [pc, #400]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	4a63      	ldr	r2, [pc, #396]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd4:	e01c      	b.n	8005e10 <HAL_RCC_OscConfig+0x324>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x30c>
 8005dde:	4b5f      	ldr	r3, [pc, #380]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	4a5e      	ldr	r2, [pc, #376]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dea:	4b5c      	ldr	r3, [pc, #368]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a5b      	ldr	r2, [pc, #364]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
 8005df6:	e00b      	b.n	8005e10 <HAL_RCC_OscConfig+0x324>
 8005df8:	4b58      	ldr	r3, [pc, #352]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	4a57      	ldr	r2, [pc, #348]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005dfe:	f023 0301 	bic.w	r3, r3, #1
 8005e02:	6713      	str	r3, [r2, #112]	; 0x70
 8005e04:	4b55      	ldr	r3, [pc, #340]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a54      	ldr	r2, [pc, #336]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e0a:	f023 0304 	bic.w	r3, r3, #4
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fe fb20 	bl	800445c <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e20:	f7fe fb1c 	bl	800445c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e0cb      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e36:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0ee      	beq.n	8005e20 <HAL_RCC_OscConfig+0x334>
 8005e42:	e014      	b.n	8005e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e44:	f7fe fb0a 	bl	800445c <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e4a:	e00a      	b.n	8005e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e4c:	f7fe fb06 	bl	800445c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e0b5      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e62:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1ee      	bne.n	8005e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e74:	4b39      	ldr	r3, [pc, #228]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	4a38      	ldr	r2, [pc, #224]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80a1 	beq.w	8005fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e8a:	4b34      	ldr	r3, [pc, #208]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d05c      	beq.n	8005f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d141      	bne.n	8005f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9e:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <HAL_RCC_OscConfig+0x478>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea4:	f7fe fada 	bl	800445c <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fe fad6 	bl	800445c <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e087      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69da      	ldr	r2, [r3, #28]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	019b      	lsls	r3, r3, #6
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	061b      	lsls	r3, r3, #24
 8005eee:	491b      	ldr	r1, [pc, #108]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_RCC_OscConfig+0x478>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efa:	f7fe faaf 	bl	800445c <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f02:	f7fe faab 	bl	800445c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e05c      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x416>
 8005f20:	e054      	b.n	8005fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <HAL_RCC_OscConfig+0x478>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f28:	f7fe fa98 	bl	800445c <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fe fa94 	bl	800445c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e045      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_OscConfig+0x470>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x444>
 8005f4e:	e03d      	b.n	8005fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e038      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	40007000 	.word	0x40007000
 8005f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCC_OscConfig+0x4ec>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d028      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d121      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d11a      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f98:	4013      	ands	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d111      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800

08005fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0cc      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b68      	ldr	r3, [pc, #416]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d90c      	bls.n	8006018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b65      	ldr	r3, [pc, #404]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b63      	ldr	r3, [pc, #396]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0b8      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006030:	4b59      	ldr	r3, [pc, #356]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4a58      	ldr	r2, [pc, #352]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800603a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006048:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a52      	ldr	r2, [pc, #328]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	494d      	ldr	r1, [pc, #308]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d044      	beq.n	80060fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d119      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e07f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d003      	beq.n	800609a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006096:	2b03      	cmp	r3, #3
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609a:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e06f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060aa:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e067      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ba:	4b37      	ldr	r3, [pc, #220]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 0203 	bic.w	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4934      	ldr	r1, [pc, #208]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060cc:	f7fe f9c6 	bl	800445c <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d4:	f7fe f9c2 	bl	800445c <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ea:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 020c 	and.w	r2, r3, #12
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1eb      	bne.n	80060d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d20c      	bcs.n	8006124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e032      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4916      	ldr	r1, [pc, #88]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	490e      	ldr	r1, [pc, #56]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006162:	f000 f821 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8006166:	4602      	mov	r2, r0
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	490a      	ldr	r1, [pc, #40]	; (800619c <HAL_RCC_ClockConfig+0x1c0>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <HAL_RCC_ClockConfig+0x1c4>)
 800617c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe f926 	bl	80043d4 <HAL_InitTick>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023c00 	.word	0x40023c00
 8006198:	40023800 	.word	0x40023800
 800619c:	0800f804 	.word	0x0800f804
 80061a0:	20000030 	.word	0x20000030
 80061a4:	20000034 	.word	0x20000034

080061a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ac:	b090      	sub	sp, #64	; 0x40
 80061ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
 80061b4:	2300      	movs	r3, #0
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b8:	2300      	movs	r3, #0
 80061ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061c0:	4b59      	ldr	r3, [pc, #356]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 030c 	and.w	r3, r3, #12
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d00d      	beq.n	80061e8 <HAL_RCC_GetSysClockFreq+0x40>
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	f200 80a1 	bhi.w	8006314 <HAL_RCC_GetSysClockFreq+0x16c>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x34>
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d003      	beq.n	80061e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061da:	e09b      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_RCC_GetSysClockFreq+0x184>)
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061e0:	e09b      	b.n	800631a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061e2:	4b53      	ldr	r3, [pc, #332]	; (8006330 <HAL_RCC_GetSysClockFreq+0x188>)
 80061e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061e6:	e098      	b.n	800631a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061e8:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061f2:	4b4d      	ldr	r3, [pc, #308]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d028      	beq.n	8006250 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fe:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	099b      	lsrs	r3, r3, #6
 8006204:	2200      	movs	r2, #0
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	627a      	str	r2, [r7, #36]	; 0x24
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006210:	2100      	movs	r1, #0
 8006212:	4b47      	ldr	r3, [pc, #284]	; (8006330 <HAL_RCC_GetSysClockFreq+0x188>)
 8006214:	fb03 f201 	mul.w	r2, r3, r1
 8006218:	2300      	movs	r3, #0
 800621a:	fb00 f303 	mul.w	r3, r0, r3
 800621e:	4413      	add	r3, r2
 8006220:	4a43      	ldr	r2, [pc, #268]	; (8006330 <HAL_RCC_GetSysClockFreq+0x188>)
 8006222:	fba0 1202 	umull	r1, r2, r0, r2
 8006226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006228:	460a      	mov	r2, r1
 800622a:	62ba      	str	r2, [r7, #40]	; 0x28
 800622c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622e:	4413      	add	r3, r2
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	2200      	movs	r2, #0
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	61fa      	str	r2, [r7, #28]
 800623a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800623e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006242:	f7fa fcd1 	bl	8000be8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4613      	mov	r3, r2
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624e:	e053      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006250:	4b35      	ldr	r3, [pc, #212]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	099b      	lsrs	r3, r3, #6
 8006256:	2200      	movs	r2, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	617a      	str	r2, [r7, #20]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006262:	f04f 0b00 	mov.w	fp, #0
 8006266:	4652      	mov	r2, sl
 8006268:	465b      	mov	r3, fp
 800626a:	f04f 0000 	mov.w	r0, #0
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	0159      	lsls	r1, r3, #5
 8006274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006278:	0150      	lsls	r0, r2, #5
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	ebb2 080a 	subs.w	r8, r2, sl
 8006282:	eb63 090b 	sbc.w	r9, r3, fp
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006292:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006296:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800629a:	ebb2 0408 	subs.w	r4, r2, r8
 800629e:	eb63 0509 	sbc.w	r5, r3, r9
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	00eb      	lsls	r3, r5, #3
 80062ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b0:	00e2      	lsls	r2, r4, #3
 80062b2:	4614      	mov	r4, r2
 80062b4:	461d      	mov	r5, r3
 80062b6:	eb14 030a 	adds.w	r3, r4, sl
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	eb45 030b 	adc.w	r3, r5, fp
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ce:	4629      	mov	r1, r5
 80062d0:	028b      	lsls	r3, r1, #10
 80062d2:	4621      	mov	r1, r4
 80062d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062d8:	4621      	mov	r1, r4
 80062da:	028a      	lsls	r2, r1, #10
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	2200      	movs	r2, #0
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	60fa      	str	r2, [r7, #12]
 80062e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ec:	f7fa fc7c 	bl	8000be8 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4613      	mov	r3, r2
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <HAL_RCC_GetSysClockFreq+0x180>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	3301      	adds	r3, #1
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006312:	e002      	b.n	800631a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCC_GetSysClockFreq+0x184>)
 8006316:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800631c:	4618      	mov	r0, r3
 800631e:	3740      	adds	r7, #64	; 0x40
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006326:	bf00      	nop
 8006328:	40023800 	.word	0x40023800
 800632c:	00f42400 	.word	0x00f42400
 8006330:	017d7840 	.word	0x017d7840

08006334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006338:	4b03      	ldr	r3, [pc, #12]	; (8006348 <HAL_RCC_GetHCLKFreq+0x14>)
 800633a:	681b      	ldr	r3, [r3, #0]
}
 800633c:	4618      	mov	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000030 	.word	0x20000030

0800634c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006350:	f7ff fff0 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 8006354:	4602      	mov	r2, r0
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	0a9b      	lsrs	r3, r3, #10
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	4903      	ldr	r1, [pc, #12]	; (8006370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006362:	5ccb      	ldrb	r3, [r1, r3]
 8006364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006368:	4618      	mov	r0, r3
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40023800 	.word	0x40023800
 8006370:	0800f814 	.word	0x0800f814

08006374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006378:	f7ff ffdc 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 800637c:	4602      	mov	r2, r0
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	0b5b      	lsrs	r3, r3, #13
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	4903      	ldr	r1, [pc, #12]	; (8006398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800638a:	5ccb      	ldrb	r3, [r1, r3]
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40023800 	.word	0x40023800
 8006398:	0800f814 	.word	0x0800f814

0800639c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e041      	b.n	8006432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fd fcd8 	bl	8003d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f001 f808 	bl	80073f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e046      	b.n	80064e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <HAL_TIM_Base_Start+0xb4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d01d      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_TIM_Base_Start+0xb8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <HAL_TIM_Base_Start+0xbc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_TIM_Base_Start+0xc0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIM_Base_Start+0xc4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_TIM_Base_Start+0xc8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIM_Base_Start+0x70>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIM_Base_Start+0xcc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d111      	bne.n	80064d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d010      	beq.n	80064e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	e007      	b.n	80064e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f839 	bl	80065aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 ff50 	bl	80073f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_TIM_PWM_Start+0x24>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e022      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d109      	bne.n	80065fe <HAL_TIM_PWM_Start+0x3e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e015      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d109      	bne.n	8006618 <HAL_TIM_PWM_Start+0x58>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e008      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e07c      	b.n	800672c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <HAL_TIM_PWM_Start+0x82>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006640:	e013      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d104      	bne.n	8006652 <HAL_TIM_PWM_Start+0x92>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006650:	e00b      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d104      	bne.n	8006662 <HAL_TIM_PWM_Start+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006660:	e003      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f001 fad0 	bl	8007c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <HAL_TIM_PWM_Start+0x174>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_PWM_Start+0xcc>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <HAL_TIM_PWM_Start+0x178>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_TIM_PWM_Start+0xd0>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <HAL_TIM_PWM_Start+0xd2>
 8006690:	2300      	movs	r3, #0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_TIM_PWM_Start+0x174>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d01d      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_TIM_PWM_Start+0x17c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_TIM_PWM_Start+0x180>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_TIM_PWM_Start+0x184>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_TIM_PWM_Start+0x178>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIM_PWM_Start+0x188>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <HAL_TIM_PWM_Start+0x18c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b06      	cmp	r3, #6
 8006706:	d010      	beq.n	800672a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006718:	e007      	b.n	800672a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40010000 	.word	0x40010000
 8006738:	40010400 	.word	0x40010400
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40014000 	.word	0x40014000
 800674c:	40001800 	.word	0x40001800

08006750 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e041      	b.n	80067e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f839 	bl	80067ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fe2e 	bl	80073f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_TIM_IC_Start_IT+0x1e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e013      	b.n	800684a <HAL_TIM_IC_Start_IT+0x46>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d104      	bne.n	8006832 <HAL_TIM_IC_Start_IT+0x2e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800682e:	b2db      	uxtb	r3, r3
 8006830:	e00b      	b.n	800684a <HAL_TIM_IC_Start_IT+0x46>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b08      	cmp	r3, #8
 8006836:	d104      	bne.n	8006842 <HAL_TIM_IC_Start_IT+0x3e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800683e:	b2db      	uxtb	r3, r3
 8006840:	e003      	b.n	800684a <HAL_TIM_IC_Start_IT+0x46>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <HAL_TIM_IC_Start_IT+0x58>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e013      	b.n	8006884 <HAL_TIM_IC_Start_IT+0x80>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d104      	bne.n	800686c <HAL_TIM_IC_Start_IT+0x68>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e00b      	b.n	8006884 <HAL_TIM_IC_Start_IT+0x80>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b08      	cmp	r3, #8
 8006870:	d104      	bne.n	800687c <HAL_TIM_IC_Start_IT+0x78>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006878:	b2db      	uxtb	r3, r3
 800687a:	e003      	b.n	8006884 <HAL_TIM_IC_Start_IT+0x80>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006882:	b2db      	uxtb	r3, r3
 8006884:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d102      	bne.n	8006892 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800688c:	7b7b      	ldrb	r3, [r7, #13]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0cc      	b.n	8006a30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_IC_Start_IT+0xa2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a4:	e013      	b.n	80068ce <HAL_TIM_IC_Start_IT+0xca>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_IC_Start_IT+0xb2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b4:	e00b      	b.n	80068ce <HAL_TIM_IC_Start_IT+0xca>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_IC_Start_IT+0xc2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c4:	e003      	b.n	80068ce <HAL_TIM_IC_Start_IT+0xca>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <HAL_TIM_IC_Start_IT+0xda>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068dc:	e013      	b.n	8006906 <HAL_TIM_IC_Start_IT+0x102>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d104      	bne.n	80068ee <HAL_TIM_IC_Start_IT+0xea>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ec:	e00b      	b.n	8006906 <HAL_TIM_IC_Start_IT+0x102>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d104      	bne.n	80068fe <HAL_TIM_IC_Start_IT+0xfa>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fc:	e003      	b.n	8006906 <HAL_TIM_IC_Start_IT+0x102>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d841      	bhi.n	8006990 <HAL_TIM_IC_Start_IT+0x18c>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <HAL_TIM_IC_Start_IT+0x110>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006949 	.word	0x08006949
 8006918:	08006991 	.word	0x08006991
 800691c:	08006991 	.word	0x08006991
 8006920:	08006991 	.word	0x08006991
 8006924:	0800695b 	.word	0x0800695b
 8006928:	08006991 	.word	0x08006991
 800692c:	08006991 	.word	0x08006991
 8006930:	08006991 	.word	0x08006991
 8006934:	0800696d 	.word	0x0800696d
 8006938:	08006991 	.word	0x08006991
 800693c:	08006991 	.word	0x08006991
 8006940:	08006991 	.word	0x08006991
 8006944:	0800697f 	.word	0x0800697f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0202 	orr.w	r2, r2, #2
 8006956:	60da      	str	r2, [r3, #12]
      break;
 8006958:	e01d      	b.n	8006996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0204 	orr.w	r2, r2, #4
 8006968:	60da      	str	r2, [r3, #12]
      break;
 800696a:	e014      	b.n	8006996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0208 	orr.w	r2, r2, #8
 800697a:	60da      	str	r2, [r3, #12]
      break;
 800697c:	e00b      	b.n	8006996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0210 	orr.w	r2, r2, #16
 800698c:	60da      	str	r2, [r3, #12]
      break;
 800698e:	e002      	b.n	8006996 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      break;
 8006994:	bf00      	nop
  }

  if (status == HAL_OK)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d148      	bne.n	8006a2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f937 	bl	8007c18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_TIM_IC_Start_IT+0x234>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d01d      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1e      	ldr	r2, [pc, #120]	; (8006a3c <HAL_TIM_IC_Start_IT+0x238>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1c      	ldr	r2, [pc, #112]	; (8006a40 <HAL_TIM_IC_Start_IT+0x23c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <HAL_TIM_IC_Start_IT+0x240>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_TIM_IC_Start_IT+0x244>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <HAL_TIM_IC_Start_IT+0x248>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_IC_Start_IT+0x1f6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <HAL_TIM_IC_Start_IT+0x24c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d111      	bne.n	8006a1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d010      	beq.n	8006a2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1c:	e007      	b.n	8006a2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40001800 	.word	0x40001800

08006a54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e097      	b.n	8006b98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fd fa17 	bl	8003eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 fca1 	bl	80073f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006af4:	f023 030c 	bic.w	r3, r3, #12
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	4313      	orrs	r3, r2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	011a      	lsls	r2, r3, #4
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	031b      	lsls	r3, r3, #12
 8006b24:	4313      	orrs	r3, r2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	4313      	orrs	r3, r2
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d102      	bne.n	8006bdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bd6:	7b7b      	ldrb	r3, [r7, #13]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e069      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf0:	e031      	b.n	8006c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d110      	bne.n	8006c1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d102      	bne.n	8006c04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bfe:	7b3b      	ldrb	r3, [r7, #12]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e055      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c18:	e01d      	b.n	8006c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d108      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d105      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c26:	7b7b      	ldrb	r3, [r7, #13]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d102      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c2c:	7b3b      	ldrb	r3, [r7, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e03e      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_TIM_Encoder_Start+0xc4>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d008      	beq.n	8006c74 <HAL_TIM_Encoder_Start+0xd4>
 8006c62:	e00f      	b.n	8006c84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 ffd3 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8006c72:	e016      	b.n	8006ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ffcb 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8006c82:	e00e      	b.n	8006ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 ffc3 	bl	8007c18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	2104      	movs	r1, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ffbc 	bl	8007c18 <TIM_CCxChannelCmd>
      break;
 8006ca0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d122      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d11b      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0202 	mvn.w	r2, #2
 8006ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fb fd46 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb54 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb5b 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d122      	bne.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d11b      	bne.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0204 	mvn.w	r2, #4
 8006d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fb fd1c 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8006d58:	e005      	b.n	8006d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fb2a 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb31 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d122      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d11b      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0208 	mvn.w	r2, #8
 8006d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2204      	movs	r2, #4
 8006d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fb fcf2 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8006dac:	e005      	b.n	8006dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fb00 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb07 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d122      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d11b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0210 	mvn.w	r2, #16
 8006de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2208      	movs	r2, #8
 8006dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fb fcc8 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fad6 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fadd 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10e      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0201 	mvn.w	r2, #1
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fab0 	bl	80073a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b80      	cmp	r3, #128	; 0x80
 8006e4c:	d10e      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d107      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 ffd4 	bl	8007e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d10e      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d107      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 faa2 	bl	80073dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d10e      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d107      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0220 	mvn.w	r2, #32
 8006ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 ff9e 	bl	8007e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e088      	b.n	8006ffc <HAL_TIM_IC_ConfigChannel+0x130>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f000 fcc2 	bl	8007890 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 020c 	bic.w	r2, r2, #12
 8006f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6999      	ldr	r1, [r3, #24]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	619a      	str	r2, [r3, #24]
 8006f2e:	e060      	b.n	8006ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d11c      	bne.n	8006f70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6819      	ldr	r1, [r3, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f000 fd46 	bl	80079d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6999      	ldr	r1, [r3, #24]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	021a      	lsls	r2, r3, #8
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	619a      	str	r2, [r3, #24]
 8006f6e:	e040      	b.n	8006ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d11b      	bne.n	8006fae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f000 fd93 	bl	8007ab0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 020c 	bic.w	r2, r2, #12
 8006f98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	61da      	str	r2, [r3, #28]
 8006fac:	e021      	b.n	8006ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b0c      	cmp	r3, #12
 8006fb2:	d11c      	bne.n	8006fee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6819      	ldr	r1, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f000 fdb0 	bl	8007b28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69d9      	ldr	r1, [r3, #28]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	021a      	lsls	r2, r3, #8
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	61da      	str	r2, [r3, #28]
 8006fec:	e001      	b.n	8006ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800701e:	2302      	movs	r3, #2
 8007020:	e0ae      	b.n	8007180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	f200 809f 	bhi.w	8007170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007032:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	0800706d 	.word	0x0800706d
 800703c:	08007171 	.word	0x08007171
 8007040:	08007171 	.word	0x08007171
 8007044:	08007171 	.word	0x08007171
 8007048:	080070ad 	.word	0x080070ad
 800704c:	08007171 	.word	0x08007171
 8007050:	08007171 	.word	0x08007171
 8007054:	08007171 	.word	0x08007171
 8007058:	080070ef 	.word	0x080070ef
 800705c:	08007171 	.word	0x08007171
 8007060:	08007171 	.word	0x08007171
 8007064:	08007171 	.word	0x08007171
 8007068:	0800712f 	.word	0x0800712f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fa5c 	bl	8007530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0208 	orr.w	r2, r2, #8
 8007086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0204 	bic.w	r2, r2, #4
 8007096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6999      	ldr	r1, [r3, #24]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	619a      	str	r2, [r3, #24]
      break;
 80070aa:	e064      	b.n	8007176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faac 	bl	8007610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6999      	ldr	r1, [r3, #24]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	021a      	lsls	r2, r3, #8
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	619a      	str	r2, [r3, #24]
      break;
 80070ec:	e043      	b.n	8007176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fb01 	bl	80076fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69da      	ldr	r2, [r3, #28]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0208 	orr.w	r2, r2, #8
 8007108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69da      	ldr	r2, [r3, #28]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0204 	bic.w	r2, r2, #4
 8007118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69d9      	ldr	r1, [r3, #28]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	61da      	str	r2, [r3, #28]
      break;
 800712c:	e023      	b.n	8007176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fb55 	bl	80077e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69d9      	ldr	r1, [r3, #28]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	021a      	lsls	r2, r3, #8
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	61da      	str	r2, [r3, #28]
      break;
 800716e:	e002      	b.n	8007176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      break;
 8007174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_TIM_ConfigClockSource+0x1c>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e0b4      	b.n	800730e <HAL_TIM_ConfigClockSource+0x186>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071dc:	d03e      	beq.n	800725c <HAL_TIM_ConfigClockSource+0xd4>
 80071de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071e2:	f200 8087 	bhi.w	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	f000 8086 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x172>
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f2:	d87f      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 80071f4:	2b70      	cmp	r3, #112	; 0x70
 80071f6:	d01a      	beq.n	800722e <HAL_TIM_ConfigClockSource+0xa6>
 80071f8:	2b70      	cmp	r3, #112	; 0x70
 80071fa:	d87b      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 80071fc:	2b60      	cmp	r3, #96	; 0x60
 80071fe:	d050      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007200:	2b60      	cmp	r3, #96	; 0x60
 8007202:	d877      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007204:	2b50      	cmp	r3, #80	; 0x50
 8007206:	d03c      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0xfa>
 8007208:	2b50      	cmp	r3, #80	; 0x50
 800720a:	d873      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d058      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007210:	2b40      	cmp	r3, #64	; 0x40
 8007212:	d86f      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007214:	2b30      	cmp	r3, #48	; 0x30
 8007216:	d064      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007218:	2b30      	cmp	r3, #48	; 0x30
 800721a:	d86b      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d060      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007220:	2b20      	cmp	r3, #32
 8007222:	d867      	bhi.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05c      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007228:	2b10      	cmp	r3, #16
 800722a:	d05a      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x15a>
 800722c:	e062      	b.n	80072f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f000 fccb 	bl	8007bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	609a      	str	r2, [r3, #8]
      break;
 800725a:	e04f      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	6899      	ldr	r1, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f000 fcb4 	bl	8007bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800727e:	609a      	str	r2, [r3, #8]
      break;
 8007280:	e03c      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6859      	ldr	r1, [r3, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	f000 fb72 	bl	8007978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2150      	movs	r1, #80	; 0x50
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fc81 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 80072a0:	e02c      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f000 fbce 	bl	8007a50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2160      	movs	r1, #96	; 0x60
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fc71 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 80072c0:	e01c      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6859      	ldr	r1, [r3, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f000 fb52 	bl	8007978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2140      	movs	r1, #64	; 0x40
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fc61 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 80072e0:	e00c      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f000 fc58 	bl	8007ba2 <TIM_ITRx_SetConfig>
      break;
 80072f2:	e003      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
      break;
 80072f8:	e000      	b.n	80072fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b0c      	cmp	r3, #12
 800732a:	d831      	bhi.n	8007390 <HAL_TIM_ReadCapturedValue+0x78>
 800732c:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <HAL_TIM_ReadCapturedValue+0x1c>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007369 	.word	0x08007369
 8007338:	08007391 	.word	0x08007391
 800733c:	08007391 	.word	0x08007391
 8007340:	08007391 	.word	0x08007391
 8007344:	08007373 	.word	0x08007373
 8007348:	08007391 	.word	0x08007391
 800734c:	08007391 	.word	0x08007391
 8007350:	08007391 	.word	0x08007391
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007391 	.word	0x08007391
 800735c:	08007391 	.word	0x08007391
 8007360:	08007391 	.word	0x08007391
 8007364:	08007387 	.word	0x08007387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	60fb      	str	r3, [r7, #12]

      break;
 8007370:	e00f      	b.n	8007392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	60fb      	str	r3, [r7, #12]

      break;
 800737a:	e00a      	b.n	8007392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	60fb      	str	r3, [r7, #12]

      break;
 8007384:	e005      	b.n	8007392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	60fb      	str	r3, [r7, #12]

      break;
 800738e:	e000      	b.n	8007392 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007390:	bf00      	nop
  }

  return tmpreg;
 8007392:	68fb      	ldr	r3, [r7, #12]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a40      	ldr	r2, [pc, #256]	; (8007504 <TIM_Base_SetConfig+0x114>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d013      	beq.n	8007430 <TIM_Base_SetConfig+0x40>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740e:	d00f      	beq.n	8007430 <TIM_Base_SetConfig+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a3d      	ldr	r2, [pc, #244]	; (8007508 <TIM_Base_SetConfig+0x118>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00b      	beq.n	8007430 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a3c      	ldr	r2, [pc, #240]	; (800750c <TIM_Base_SetConfig+0x11c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_Base_SetConfig+0x40>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a3b      	ldr	r2, [pc, #236]	; (8007510 <TIM_Base_SetConfig+0x120>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_Base_SetConfig+0x40>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a3a      	ldr	r2, [pc, #232]	; (8007514 <TIM_Base_SetConfig+0x124>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2f      	ldr	r2, [pc, #188]	; (8007504 <TIM_Base_SetConfig+0x114>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d02b      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007450:	d027      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <TIM_Base_SetConfig+0x118>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d023      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a2b      	ldr	r2, [pc, #172]	; (800750c <TIM_Base_SetConfig+0x11c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01f      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <TIM_Base_SetConfig+0x120>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01b      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a29      	ldr	r2, [pc, #164]	; (8007514 <TIM_Base_SetConfig+0x124>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d017      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a28      	ldr	r2, [pc, #160]	; (8007518 <TIM_Base_SetConfig+0x128>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a27      	ldr	r2, [pc, #156]	; (800751c <TIM_Base_SetConfig+0x12c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00f      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a26      	ldr	r2, [pc, #152]	; (8007520 <TIM_Base_SetConfig+0x130>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00b      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a25      	ldr	r2, [pc, #148]	; (8007524 <TIM_Base_SetConfig+0x134>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d007      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a24      	ldr	r2, [pc, #144]	; (8007528 <TIM_Base_SetConfig+0x138>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d003      	beq.n	80074a2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a23      	ldr	r2, [pc, #140]	; (800752c <TIM_Base_SetConfig+0x13c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d108      	bne.n	80074b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <TIM_Base_SetConfig+0x114>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_Base_SetConfig+0xf8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a0c      	ldr	r2, [pc, #48]	; (8007514 <TIM_Base_SetConfig+0x124>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d103      	bne.n	80074f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	615a      	str	r2, [r3, #20]
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40010000 	.word	0x40010000
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800
 8007510:	40000c00 	.word	0x40000c00
 8007514:	40010400 	.word	0x40010400
 8007518:	40014000 	.word	0x40014000
 800751c:	40014400 	.word	0x40014400
 8007520:	40014800 	.word	0x40014800
 8007524:	40001800 	.word	0x40001800
 8007528:	40001c00 	.word	0x40001c00
 800752c:	40002000 	.word	0x40002000

08007530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f023 0201 	bic.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 0302 	bic.w	r3, r3, #2
 8007578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a20      	ldr	r2, [pc, #128]	; (8007608 <TIM_OC1_SetConfig+0xd8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC1_SetConfig+0x64>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <TIM_OC1_SetConfig+0xdc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10c      	bne.n	80075ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 0308 	bic.w	r3, r3, #8
 800759a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 0304 	bic.w	r3, r3, #4
 80075ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	; (8007608 <TIM_OC1_SetConfig+0xd8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_OC1_SetConfig+0x8e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <TIM_OC1_SetConfig+0xdc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d111      	bne.n	80075e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	621a      	str	r2, [r3, #32]
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400

08007610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f023 0210 	bic.w	r2, r3, #16
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f023 0320 	bic.w	r3, r3, #32
 800765a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a22      	ldr	r2, [pc, #136]	; (80076f4 <TIM_OC2_SetConfig+0xe4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC2_SetConfig+0x68>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a21      	ldr	r2, [pc, #132]	; (80076f8 <TIM_OC2_SetConfig+0xe8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10d      	bne.n	8007694 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <TIM_OC2_SetConfig+0xe4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0x94>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a16      	ldr	r2, [pc, #88]	; (80076f8 <TIM_OC2_SetConfig+0xe8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d113      	bne.n	80076cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40010400 	.word	0x40010400

080076fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a21      	ldr	r2, [pc, #132]	; (80077dc <TIM_OC3_SetConfig+0xe0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_OC3_SetConfig+0x66>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <TIM_OC3_SetConfig+0xe4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d10d      	bne.n	800777e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800777c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a16      	ldr	r2, [pc, #88]	; (80077dc <TIM_OC3_SetConfig+0xe0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_OC3_SetConfig+0x92>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <TIM_OC3_SetConfig+0xe4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d113      	bne.n	80077b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800779c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40010400 	.word	0x40010400

080077e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	031b      	lsls	r3, r3, #12
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a12      	ldr	r2, [pc, #72]	; (8007888 <TIM_OC4_SetConfig+0xa4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_OC4_SetConfig+0x68>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <TIM_OC4_SetConfig+0xa8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d109      	bne.n	8007860 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	019b      	lsls	r3, r3, #6
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40010000 	.word	0x40010000
 800788c:	40010400 	.word	0x40010400

08007890 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4a28      	ldr	r2, [pc, #160]	; (800795c <TIM_TI1_SetConfig+0xcc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d01b      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c4:	d017      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a25      	ldr	r2, [pc, #148]	; (8007960 <TIM_TI1_SetConfig+0xd0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d013      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a24      	ldr	r2, [pc, #144]	; (8007964 <TIM_TI1_SetConfig+0xd4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a23      	ldr	r2, [pc, #140]	; (8007968 <TIM_TI1_SetConfig+0xd8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a22      	ldr	r2, [pc, #136]	; (800796c <TIM_TI1_SetConfig+0xdc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a21      	ldr	r2, [pc, #132]	; (8007970 <TIM_TI1_SetConfig+0xe0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_TI1_SetConfig+0x66>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a20      	ldr	r2, [pc, #128]	; (8007974 <TIM_TI1_SetConfig+0xe4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d101      	bne.n	80078fa <TIM_TI1_SetConfig+0x6a>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <TIM_TI1_SetConfig+0x6c>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e003      	b.n	800791a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f043 0301 	orr.w	r3, r3, #1
 8007918:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	b2db      	uxtb	r3, r3
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f023 030a 	bic.w	r3, r3, #10
 8007934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 030a 	and.w	r3, r3, #10
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40010400 	.word	0x40010400
 8007970:	40014000 	.word	0x40014000
 8007974:	40001800 	.word	0x40001800

08007978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0201 	bic.w	r2, r3, #1
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f023 030a 	bic.w	r3, r3, #10
 80079b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	f023 0210 	bic.w	r2, r3, #16
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	031b      	lsls	r3, r3, #12
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	621a      	str	r2, [r3, #32]
}
 8007a44:	bf00      	nop
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f023 0210 	bic.w	r2, r3, #16
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	031b      	lsls	r3, r3, #12
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	621a      	str	r2, [r3, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	621a      	str	r2, [r3, #32]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	031b      	lsls	r3, r3, #12
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	031b      	lsls	r3, r3, #12
 8007b80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f043 0307 	orr.w	r3, r3, #7
 8007bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	609a      	str	r2, [r3, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	021a      	lsls	r2, r3, #8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	609a      	str	r2, [r3, #8]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	401a      	ands	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	431a      	orrs	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e05a      	b.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a21      	ldr	r2, [pc, #132]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d022      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc8:	d01d      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d018      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1b      	ldr	r2, [pc, #108]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1a      	ldr	r2, [pc, #104]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00e      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d009      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a17      	ldr	r2, [pc, #92]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10c      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40001800 	.word	0x40001800

08007d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e03d      	b.n	8007df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e03f      	b.n	8007eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fc f90a 	bl	8004068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fddf 	bl	8008a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695a      	ldr	r2, [r3, #20]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b08a      	sub	sp, #40	; 0x28
 8007ec6:	af02      	add	r7, sp, #8
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d17c      	bne.n	8007fdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_UART_Transmit+0x2c>
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e075      	b.n	8007fde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_UART_Transmit+0x3e>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e06e      	b.n	8007fde <HAL_UART_Transmit+0x11c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f16:	f7fc faa1 	bl	800445c <HAL_GetTick>
 8007f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f30:	d108      	bne.n	8007f44 <HAL_UART_Transmit+0x82>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	e003      	b.n	8007f4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f54:	e02a      	b.n	8007fac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fb1f 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e036      	b.n	8007fde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	3302      	adds	r3, #2
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e007      	b.n	8007f9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1cf      	bne.n	8007f56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2140      	movs	r1, #64	; 0x40
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 faef 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e006      	b.n	8007fde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d11d      	bne.n	800803c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_UART_Receive_IT+0x26>
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e016      	b.n	800803e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UART_Receive_IT+0x38>
 800801a:	2302      	movs	r3, #2
 800801c:	e00f      	b.n	800803e <HAL_UART_Receive_IT+0x58>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	461a      	mov	r2, r3
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fb24 	bl	8008680 <UART_Start_Receive_IT>
 8008038:	4603      	mov	r3, r0
 800803a:	e000      	b.n	800803e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b0ba      	sub	sp, #232	; 0xe8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800806e:	2300      	movs	r3, #0
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10f      	bne.n	80080ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800808e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <HAL_UART_IRQHandler+0x66>
 800809a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fc07 	bl	80088ba <UART_Receive_IT>
      return;
 80080ac:	e256      	b.n	800855c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80de 	beq.w	8008274 <HAL_UART_IRQHandler+0x22c>
 80080b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80d1 	beq.w	8008274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <HAL_UART_IRQHandler+0xae>
 80080de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f043 0201 	orr.w	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_UART_IRQHandler+0xd2>
 8008102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f043 0202 	orr.w	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <HAL_UART_IRQHandler+0xf6>
 8008126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f043 0204 	orr.w	r2, r3, #4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d011      	beq.n	800816e <HAL_UART_IRQHandler+0x126>
 800814a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	f043 0208 	orr.w	r2, r3, #8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 81ed 	beq.w	8008552 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x14e>
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb92 	bl	80088ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	bf0c      	ite	eq
 80081a4:	2301      	moveq	r3, #1
 80081a6:	2300      	movne	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <HAL_UART_IRQHandler+0x17a>
 80081ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d04f      	beq.n	8008262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa9a 	bl	80086fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d141      	bne.n	800825a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800820e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800821a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1d9      	bne.n	80081d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	4a7d      	ldr	r2, [pc, #500]	; (8008424 <HAL_UART_IRQHandler+0x3dc>)
 8008230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4618      	mov	r0, r3
 8008238:	f7fc fac1 	bl	80047be <HAL_DMA_Abort_IT>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	e00e      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f990 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00a      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f98c 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e006      	b.n	8008270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f988 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800826e:	e170      	b.n	8008552 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	bf00      	nop
    return;
 8008272:	e16e      	b.n	8008552 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	2b01      	cmp	r3, #1
 800827a:	f040 814a 	bne.w	8008512 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8143 	beq.w	8008512 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 813c 	beq.w	8008512 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829a:	2300      	movs	r3, #0
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	f040 80b4 	bne.w	8008428 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8140 	beq.w	8008556 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082de:	429a      	cmp	r2, r3
 80082e0:	f080 8139 	bcs.w	8008556 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f6:	f000 8088 	beq.w	800840a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	330c      	adds	r3, #12
 8008322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800832a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800833e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1d9      	bne.n	80082fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3314      	adds	r3, #20
 800834c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3314      	adds	r3, #20
 8008366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800836a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800836e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800837c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e1      	bne.n	8008346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e3      	bne.n	8008382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083da:	f023 0310 	bic.w	r3, r3, #16
 80083de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80083ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e3      	bne.n	80083c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	4618      	mov	r0, r3
 8008406:	f7fc f96a 	bl	80046de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008412:	b29b      	uxth	r3, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	b29b      	uxth	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8b6 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008420:	e099      	b.n	8008556 <HAL_UART_IRQHandler+0x50e>
 8008422:	bf00      	nop
 8008424:	080087c3 	.word	0x080087c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008430:	b29b      	uxth	r3, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 808b 	beq.w	800855a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8086 	beq.w	800855a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	330c      	adds	r3, #12
 800846e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008472:	647a      	str	r2, [r7, #68]	; 0x44
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e3      	bne.n	800844e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	623b      	str	r3, [r7, #32]
   return(result);
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	f023 0301 	bic.w	r3, r3, #1
 800849c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084aa:	633a      	str	r2, [r7, #48]	; 0x30
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e3      	bne.n	8008486 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60fb      	str	r3, [r7, #12]
   return(result);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0310 	bic.w	r3, r3, #16
 80084e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f0:	61fa      	str	r2, [r7, #28]
 80084f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	617b      	str	r3, [r7, #20]
   return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e3      	bne.n	80084cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f83e 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008510:	e023      	b.n	800855a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <HAL_UART_IRQHandler+0x4ea>
 800851e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f95d 	bl	80087ea <UART_Transmit_IT>
    return;
 8008530:	e014      	b.n	800855c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <HAL_UART_IRQHandler+0x514>
 800853e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d008      	beq.n	800855c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f99d 	bl	800888a <UART_EndTransmit_IT>
    return;
 8008550:	e004      	b.n	800855c <HAL_UART_IRQHandler+0x514>
    return;
 8008552:	bf00      	nop
 8008554:	e002      	b.n	800855c <HAL_UART_IRQHandler+0x514>
      return;
 8008556:	bf00      	nop
 8008558:	e000      	b.n	800855c <HAL_UART_IRQHandler+0x514>
      return;
 800855a:	bf00      	nop
  }
}
 800855c:	37e8      	adds	r7, #232	; 0xe8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop

08008564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b090      	sub	sp, #64	; 0x40
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b4:	e050      	b.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d04c      	beq.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085c4:	f7fb ff4a 	bl	800445c <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d241      	bcs.n	8008658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	330c      	adds	r3, #12
 80085f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f4:	637a      	str	r2, [r7, #52]	; 0x34
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e5      	bne.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3314      	adds	r3, #20
 800860e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	613b      	str	r3, [r7, #16]
   return(result);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008628:	623a      	str	r2, [r7, #32]
 800862a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	69f9      	ldr	r1, [r7, #28]
 800862e:	6a3a      	ldr	r2, [r7, #32]
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	61bb      	str	r3, [r7, #24]
   return(result);
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e00f      	b.n	8008678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4013      	ands	r3, r2
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	429a      	cmp	r2, r3
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	429a      	cmp	r2, r3
 8008674:	d09f      	beq.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3740      	adds	r7, #64	; 0x40
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2222      	movs	r2, #34	; 0x22
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0220 	orr.w	r2, r2, #32
 80086ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b095      	sub	sp, #84	; 0x54
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	330c      	adds	r3, #12
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800871a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008724:	643a      	str	r2, [r7, #64]	; 0x40
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800872a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3314      	adds	r3, #20
 800873e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	61fb      	str	r3, [r7, #28]
   return(result);
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3314      	adds	r3, #20
 8008756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e5      	bne.n	8008738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b01      	cmp	r3, #1
 8008772:	d119      	bne.n	80087a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60bb      	str	r3, [r7, #8]
   return(result);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008794:	61ba      	str	r2, [r7, #24]
 8008796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	613b      	str	r3, [r7, #16]
   return(result);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087b6:	bf00      	nop
 80087b8:	3754      	adds	r7, #84	; 0x54
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7ff fecb 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b21      	cmp	r3, #33	; 0x21
 80087fc:	d13e      	bne.n	800887c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008806:	d114      	bne.n	8008832 <UART_Transmit_IT+0x48>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d110      	bne.n	8008832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	1c9a      	adds	r2, r3, #2
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]
 8008830:	e008      	b.n	8008844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	1c59      	adds	r1, r3, #1
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6211      	str	r1, [r2, #32]
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29b      	uxth	r3, r3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4619      	mov	r1, r3
 8008852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10f      	bne.n	8008878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e000      	b.n	800887e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe5a 	bl	8008564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b08c      	sub	sp, #48	; 0x30
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b22      	cmp	r3, #34	; 0x22
 80088cc:	f040 80ab 	bne.w	8008a26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d8:	d117      	bne.n	800890a <UART_Receive_IT+0x50>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d113      	bne.n	800890a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	1c9a      	adds	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	629a      	str	r2, [r3, #40]	; 0x28
 8008908:	e026      	b.n	8008958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891c:	d007      	beq.n	800892e <UART_Receive_IT+0x74>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <UART_Receive_IT+0x82>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	b2da      	uxtb	r2, r3
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e008      	b.n	800894e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29b      	uxth	r3, r3
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4619      	mov	r1, r3
 8008966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008968:	2b00      	cmp	r3, #0
 800896a:	d15a      	bne.n	8008a22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0220 	bic.w	r2, r2, #32
 800897a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800898a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d135      	bne.n	8008a18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d2:	623a      	str	r2, [r7, #32]
 80089d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	69f9      	ldr	r1, [r7, #28]
 80089d8:	6a3a      	ldr	r2, [r7, #32]
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e5      	bne.n	80089b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d10a      	bne.n	8008a0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fdbb 	bl	800858c <HAL_UARTEx_RxEventCallback>
 8008a16:	e002      	b.n	8008a1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7f9 fdb5 	bl	8002588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e002      	b.n	8008a28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a34:	b0c0      	sub	sp, #256	; 0x100
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	68d9      	ldr	r1, [r3, #12]
 8008a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	ea40 0301 	orr.w	r3, r0, r1
 8008a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a88:	f021 010c 	bic.w	r1, r1, #12
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a96:	430b      	orrs	r3, r1
 8008a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aaa:	6999      	ldr	r1, [r3, #24]
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	ea40 0301 	orr.w	r3, r0, r1
 8008ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b8f      	ldr	r3, [pc, #572]	; (8008cfc <UART_SetConfig+0x2cc>)
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d005      	beq.n	8008ad0 <UART_SetConfig+0xa0>
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b8d      	ldr	r3, [pc, #564]	; (8008d00 <UART_SetConfig+0x2d0>)
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d104      	bne.n	8008ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ad0:	f7fd fc50 	bl	8006374 <HAL_RCC_GetPCLK2Freq>
 8008ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ad8:	e003      	b.n	8008ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ada:	f7fd fc37 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 8008ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aec:	f040 810c 	bne.w	8008d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	1891      	adds	r1, r2, r2
 8008b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b0a:	415b      	adcs	r3, r3
 8008b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b12:	4621      	mov	r1, r4
 8008b14:	eb12 0801 	adds.w	r8, r2, r1
 8008b18:	4629      	mov	r1, r5
 8008b1a:	eb43 0901 	adc.w	r9, r3, r1
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b32:	4690      	mov	r8, r2
 8008b34:	4699      	mov	r9, r3
 8008b36:	4623      	mov	r3, r4
 8008b38:	eb18 0303 	adds.w	r3, r8, r3
 8008b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b40:	462b      	mov	r3, r5
 8008b42:	eb49 0303 	adc.w	r3, r9, r3
 8008b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b5e:	460b      	mov	r3, r1
 8008b60:	18db      	adds	r3, r3, r3
 8008b62:	653b      	str	r3, [r7, #80]	; 0x50
 8008b64:	4613      	mov	r3, r2
 8008b66:	eb42 0303 	adc.w	r3, r2, r3
 8008b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b74:	f7f8 f838 	bl	8000be8 <__aeabi_uldivmod>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4b61      	ldr	r3, [pc, #388]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	011c      	lsls	r4, r3, #4
 8008b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	1891      	adds	r1, r2, r2
 8008b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ba0:	415b      	adcs	r3, r3
 8008ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ba8:	4641      	mov	r1, r8
 8008baa:	eb12 0a01 	adds.w	sl, r2, r1
 8008bae:	4649      	mov	r1, r9
 8008bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bc8:	4692      	mov	sl, r2
 8008bca:	469b      	mov	fp, r3
 8008bcc:	4643      	mov	r3, r8
 8008bce:	eb1a 0303 	adds.w	r3, sl, r3
 8008bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8008bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	18db      	adds	r3, r3, r3
 8008bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	eb42 0303 	adc.w	r3, r2, r3
 8008c00:	647b      	str	r3, [r7, #68]	; 0x44
 8008c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c0a:	f7f7 ffed 	bl	8000be8 <__aeabi_uldivmod>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	4b3b      	ldr	r3, [pc, #236]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008c16:	fba3 2301 	umull	r2, r3, r3, r1
 8008c1a:	095b      	lsrs	r3, r3, #5
 8008c1c:	2264      	movs	r2, #100	; 0x64
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	1acb      	subs	r3, r1, r3
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c2a:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c38:	441c      	add	r4, r3
 8008c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	1891      	adds	r1, r2, r2
 8008c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c54:	415b      	adcs	r3, r3
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	1851      	adds	r1, r2, r1
 8008c60:	6339      	str	r1, [r7, #48]	; 0x30
 8008c62:	4649      	mov	r1, r9
 8008c64:	414b      	adcs	r3, r1
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c74:	4659      	mov	r1, fp
 8008c76:	00cb      	lsls	r3, r1, #3
 8008c78:	4651      	mov	r1, sl
 8008c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c7e:	4651      	mov	r1, sl
 8008c80:	00ca      	lsls	r2, r1, #3
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	4642      	mov	r2, r8
 8008c8a:	189b      	adds	r3, r3, r2
 8008c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c90:	464b      	mov	r3, r9
 8008c92:	460a      	mov	r2, r1
 8008c94:	eb42 0303 	adc.w	r3, r2, r3
 8008c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	18db      	adds	r3, r3, r3
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	eb42 0303 	adc.w	r3, r2, r3
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cc6:	f7f7 ff8f 	bl	8000be8 <__aeabi_uldivmod>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	2164      	movs	r1, #100	; 0x64
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	3332      	adds	r3, #50	; 0x32
 8008ce2:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <UART_SetConfig+0x2d4>)
 8008ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	f003 0207 	and.w	r2, r3, #7
 8008cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4422      	add	r2, r4
 8008cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cf8:	e105      	b.n	8008f06 <UART_SetConfig+0x4d6>
 8008cfa:	bf00      	nop
 8008cfc:	40011000 	.word	0x40011000
 8008d00:	40011400 	.word	0x40011400
 8008d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d1a:	4642      	mov	r2, r8
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	1891      	adds	r1, r2, r2
 8008d20:	6239      	str	r1, [r7, #32]
 8008d22:	415b      	adcs	r3, r3
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
 8008d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	1854      	adds	r4, r2, r1
 8008d2e:	4649      	mov	r1, r9
 8008d30:	eb43 0501 	adc.w	r5, r3, r1
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	00eb      	lsls	r3, r5, #3
 8008d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d42:	00e2      	lsls	r2, r4, #3
 8008d44:	4614      	mov	r4, r2
 8008d46:	461d      	mov	r5, r3
 8008d48:	4643      	mov	r3, r8
 8008d4a:	18e3      	adds	r3, r4, r3
 8008d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d50:	464b      	mov	r3, r9
 8008d52:	eb45 0303 	adc.w	r3, r5, r3
 8008d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d76:	4629      	mov	r1, r5
 8008d78:	008b      	lsls	r3, r1, #2
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d80:	4621      	mov	r1, r4
 8008d82:	008a      	lsls	r2, r1, #2
 8008d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d88:	f7f7 ff2e 	bl	8000be8 <__aeabi_uldivmod>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4b60      	ldr	r3, [pc, #384]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	011c      	lsls	r4, r3, #4
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	61b9      	str	r1, [r7, #24]
 8008db4:	415b      	adcs	r3, r3
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	1851      	adds	r1, r2, r1
 8008dc0:	6139      	str	r1, [r7, #16]
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	414b      	adcs	r3, r1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	00cb      	lsls	r3, r1, #3
 8008dd8:	4651      	mov	r1, sl
 8008dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dde:	4651      	mov	r1, sl
 8008de0:	00ca      	lsls	r2, r1, #3
 8008de2:	4610      	mov	r0, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	4642      	mov	r2, r8
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008df0:	464b      	mov	r3, r9
 8008df2:	460a      	mov	r2, r1
 8008df4:	eb42 0303 	adc.w	r3, r2, r3
 8008df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e14:	4649      	mov	r1, r9
 8008e16:	008b      	lsls	r3, r1, #2
 8008e18:	4641      	mov	r1, r8
 8008e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e1e:	4641      	mov	r1, r8
 8008e20:	008a      	lsls	r2, r1, #2
 8008e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e26:	f7f7 fedf 	bl	8000be8 <__aeabi_uldivmod>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008e30:	fba3 1302 	umull	r1, r3, r3, r2
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	2164      	movs	r1, #100	; 0x64
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	3332      	adds	r3, #50	; 0x32
 8008e42:	4a34      	ldr	r2, [pc, #208]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008e44:	fba2 2303 	umull	r2, r3, r2, r3
 8008e48:	095b      	lsrs	r3, r3, #5
 8008e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e4e:	441c      	add	r4, r3
 8008e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e54:	2200      	movs	r2, #0
 8008e56:	673b      	str	r3, [r7, #112]	; 0x70
 8008e58:	677a      	str	r2, [r7, #116]	; 0x74
 8008e5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	1891      	adds	r1, r2, r2
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	415b      	adcs	r3, r3
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e6e:	4641      	mov	r1, r8
 8008e70:	1851      	adds	r1, r2, r1
 8008e72:	6039      	str	r1, [r7, #0]
 8008e74:	4649      	mov	r1, r9
 8008e76:	414b      	adcs	r3, r1
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e86:	4659      	mov	r1, fp
 8008e88:	00cb      	lsls	r3, r1, #3
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e90:	4651      	mov	r1, sl
 8008e92:	00ca      	lsls	r2, r1, #3
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4642      	mov	r2, r8
 8008e9c:	189b      	adds	r3, r3, r2
 8008e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	460a      	mov	r2, r1
 8008ea4:	eb42 0303 	adc.w	r3, r2, r3
 8008ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8008eb4:	667a      	str	r2, [r7, #100]	; 0x64
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	008b      	lsls	r3, r1, #2
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ecc:	4641      	mov	r1, r8
 8008ece:	008a      	lsls	r2, r1, #2
 8008ed0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ed4:	f7f7 fe88 	bl	8000be8 <__aeabi_uldivmod>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008ede:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	2164      	movs	r1, #100	; 0x64
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	3332      	adds	r3, #50	; 0x32
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <UART_SetConfig+0x4e4>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4422      	add	r2, r4
 8008f04:	609a      	str	r2, [r3, #8]
}
 8008f06:	bf00      	nop
 8008f08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f12:	bf00      	nop
 8008f14:	51eb851f 	.word	0x51eb851f

08008f18 <__NVIC_SetPriority>:
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db0a      	blt.n	8008f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	490c      	ldr	r1, [pc, #48]	; (8008f64 <__NVIC_SetPriority+0x4c>)
 8008f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f36:	0112      	lsls	r2, r2, #4
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f40:	e00a      	b.n	8008f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	4908      	ldr	r1, [pc, #32]	; (8008f68 <__NVIC_SetPriority+0x50>)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	3b04      	subs	r3, #4
 8008f50:	0112      	lsls	r2, r2, #4
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	440b      	add	r3, r1
 8008f56:	761a      	strb	r2, [r3, #24]
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	e000e100 	.word	0xe000e100
 8008f68:	e000ed00 	.word	0xe000ed00

08008f6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f70:	2100      	movs	r1, #0
 8008f72:	f06f 0004 	mvn.w	r0, #4
 8008f76:	f7ff ffcf 	bl	8008f18 <__NVIC_SetPriority>
#endif
}
 8008f7a:	bf00      	nop
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f86:	f3ef 8305 	mrs	r3, IPSR
 8008f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f92:	f06f 0305 	mvn.w	r3, #5
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	e00c      	b.n	8008fb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <osKernelInitialize+0x44>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d105      	bne.n	8008fae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fa2:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <osKernelInitialize+0x44>)
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	607b      	str	r3, [r7, #4]
 8008fac:	e002      	b.n	8008fb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fb4:	687b      	ldr	r3, [r7, #4]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000a28 	.word	0x20000a28

08008fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8008fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fda:	f06f 0305 	mvn.w	r3, #5
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	e010      	b.n	8009004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <osKernelStart+0x48>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d109      	bne.n	8008ffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fea:	f7ff ffbf 	bl	8008f6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <osKernelStart+0x48>)
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ff4:	f001 f910 	bl	800a218 <vTaskStartScheduler>
      stat = osOK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e002      	b.n	8009004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8009002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009004:	687b      	ldr	r3, [r7, #4]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000a28 	.word	0x20000a28

08009014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b08e      	sub	sp, #56	; 0x38
 8009018:	af04      	add	r7, sp, #16
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009024:	f3ef 8305 	mrs	r3, IPSR
 8009028:	617b      	str	r3, [r7, #20]
  return(result);
 800902a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800902c:	2b00      	cmp	r3, #0
 800902e:	d17e      	bne.n	800912e <osThreadNew+0x11a>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d07b      	beq.n	800912e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800903a:	2318      	movs	r3, #24
 800903c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d045      	beq.n	80090da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <osThreadNew+0x48>
        name = attr->name;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d008      	beq.n	8009082 <osThreadNew+0x6e>
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b38      	cmp	r3, #56	; 0x38
 8009074:	d805      	bhi.n	8009082 <osThreadNew+0x6e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <osThreadNew+0x72>
        return (NULL);
 8009082:	2300      	movs	r3, #0
 8009084:	e054      	b.n	8009130 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <osThreadNew+0xa8>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b5b      	cmp	r3, #91	; 0x5b
 80090a4:	d90a      	bls.n	80090bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d006      	beq.n	80090bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <osThreadNew+0xa8>
        mem = 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	e010      	b.n	80090de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10c      	bne.n	80090de <osThreadNew+0xca>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d108      	bne.n	80090de <osThreadNew+0xca>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <osThreadNew+0xca>
          mem = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	e001      	b.n	80090de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d110      	bne.n	8009106 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090ec:	9202      	str	r2, [sp, #8]
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	6a3a      	ldr	r2, [r7, #32]
 80090f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fe38 	bl	8009d70 <xTaskCreateStatic>
 8009100:	4603      	mov	r3, r0
 8009102:	613b      	str	r3, [r7, #16]
 8009104:	e013      	b.n	800912e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d110      	bne.n	800912e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	b29a      	uxth	r2, r3
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fe83 	bl	8009e2a <xTaskCreate>
 8009124:	4603      	mov	r3, r0
 8009126:	2b01      	cmp	r3, #1
 8009128:	d001      	beq.n	800912e <osThreadNew+0x11a>
            hTask = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800912e:	693b      	ldr	r3, [r7, #16]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3728      	adds	r7, #40	; 0x28
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009140:	f3ef 8305 	mrs	r3, IPSR
 8009144:	60bb      	str	r3, [r7, #8]
  return(result);
 8009146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <osDelay+0x1c>
    stat = osErrorISR;
 800914c:	f06f 0305 	mvn.w	r3, #5
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e007      	b.n	8009164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 f826 	bl	800a1b0 <vTaskDelay>
    }
  }

  return (stat);
 8009164:	68fb      	ldr	r3, [r7, #12]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009176:	f3ef 8305 	mrs	r3, IPSR
 800917a:	60fb      	str	r3, [r7, #12]
  return(result);
 800917c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009182:	f06f 0305 	mvn.w	r3, #5
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e019      	b.n	80091be <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800918e:	f001 f955 	bl	800a43c <xTaskGetTickCount>
 8009192:	4603      	mov	r3, r0
 8009194:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <osDelayUntil+0x4a>
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	db06      	blt.n	80091b8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80091aa:	f107 0308 	add.w	r3, r7, #8
 80091ae:	6939      	ldr	r1, [r7, #16]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 ff7f 	bl	800a0b4 <vTaskDelayUntil>
 80091b6:	e002      	b.n	80091be <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80091b8:	f06f 0303 	mvn.w	r3, #3
 80091bc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80091be:	697b      	ldr	r3, [r7, #20]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a07      	ldr	r2, [pc, #28]	; (80091f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80091d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4a06      	ldr	r2, [pc, #24]	; (80091f8 <vApplicationGetIdleTaskMemory+0x30>)
 80091de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2280      	movs	r2, #128	; 0x80
 80091e4:	601a      	str	r2, [r3, #0]
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20000a2c 	.word	0x20000a2c
 80091f8:	20000a88 	.word	0x20000a88

080091fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a07      	ldr	r2, [pc, #28]	; (8009228 <vApplicationGetTimerTaskMemory+0x2c>)
 800920c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4a06      	ldr	r2, [pc, #24]	; (800922c <vApplicationGetTimerTaskMemory+0x30>)
 8009212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800921a:	601a      	str	r2, [r3, #0]
}
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20000c88 	.word	0x20000c88
 800922c:	20000ce4 	.word	0x20000ce4

08009230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f103 0208 	add.w	r2, r3, #8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f04f 32ff 	mov.w	r2, #4294967295
 8009248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f103 0208 	add.w	r2, r3, #8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f103 0208 	add.w	r2, r3, #8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092d2:	b480      	push	{r7}
 80092d4:	b085      	sub	sp, #20
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d103      	bne.n	80092f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	e00c      	b.n	800930c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3308      	adds	r3, #8
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	e002      	b.n	8009300 <vListInsert+0x2e>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	429a      	cmp	r2, r3
 800930a:	d2f6      	bcs.n	80092fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	601a      	str	r2, [r3, #0]
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6892      	ldr	r2, [r2, #8]
 800935a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6852      	ldr	r2, [r2, #4]
 8009364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d103      	bne.n	8009378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	1e5a      	subs	r2, r3, #1
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80093c2:	f002 f8cf 	bl	800b564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093d2:	fb01 f303 	mul.w	r3, r1, r3
 80093d6:	441a      	add	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f2:	3b01      	subs	r3, #1
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	441a      	add	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	22ff      	movs	r2, #255	; 0xff
 8009406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	22ff      	movs	r2, #255	; 0xff
 800940e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d114      	bne.n	8009442 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01a      	beq.n	8009456 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3310      	adds	r3, #16
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f981 	bl	800a72c <xTaskRemoveFromEventList>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d012      	beq.n	8009456 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009430:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <xQueueGenericReset+0xcc>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	e009      	b.n	8009456 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3310      	adds	r3, #16
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff fef2 	bl	8009230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3324      	adds	r3, #36	; 0x24
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff feed 	bl	8009230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009456:	f002 f8b5 	bl	800b5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800945a:	2301      	movs	r3, #1
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af02      	add	r7, sp, #8
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <xQueueGenericCreateStatic+0x52>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <xQueueGenericCreateStatic+0x56>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <xQueueGenericCreateStatic+0x58>
 80094be:	2300      	movs	r3, #0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	623b      	str	r3, [r7, #32]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <xQueueGenericCreateStatic+0x7e>
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <xQueueGenericCreateStatic+0x82>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <xQueueGenericCreateStatic+0x84>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	61fb      	str	r3, [r7, #28]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009506:	2350      	movs	r3, #80	; 0x50
 8009508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b50      	cmp	r3, #80	; 0x50
 800950e:	d00a      	beq.n	8009526 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	61bb      	str	r3, [r7, #24]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009526:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800953a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f805 	bl	8009558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009550:	4618      	mov	r0, r3
 8009552:	3730      	adds	r7, #48	; 0x30
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	e002      	b.n	800957a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009586:	2101      	movs	r1, #1
 8009588:	69b8      	ldr	r0, [r7, #24]
 800958a:	f7ff ff05 	bl	8009398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08e      	sub	sp, #56	; 0x38
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095ae:	2300      	movs	r3, #0
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericSend+0x32>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <xQueueGenericSend+0x40>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <xQueueGenericSend+0x44>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e000      	b.n	80095e6 <xQueueGenericSend+0x46>
 80095e4:	2300      	movs	r3, #0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <xQueueGenericSend+0x60>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d103      	bne.n	800960e <xQueueGenericSend+0x6e>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <xQueueGenericSend+0x72>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <xQueueGenericSend+0x74>
 8009612:	2300      	movs	r3, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueGenericSend+0x8e>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	623b      	str	r3, [r7, #32]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800962e:	f001 fa3b 	bl	800aaa8 <xTaskGetSchedulerState>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <xQueueGenericSend+0x9e>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <xQueueGenericSend+0xa2>
 800963e:	2301      	movs	r3, #1
 8009640:	e000      	b.n	8009644 <xQueueGenericSend+0xa4>
 8009642:	2300      	movs	r3, #0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xQueueGenericSend+0xbe>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	61fb      	str	r3, [r7, #28]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800965e:	f001 ff81 	bl	800b564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	429a      	cmp	r2, r3
 800966c:	d302      	bcc.n	8009674 <xQueueGenericSend+0xd4>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d129      	bne.n	80096c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967a:	f000 fa0b 	bl	8009a94 <prvCopyDataToQueue>
 800967e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	d010      	beq.n	80096aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	3324      	adds	r3, #36	; 0x24
 800968c:	4618      	mov	r0, r3
 800968e:	f001 f84d 	bl	800a72c <xTaskRemoveFromEventList>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d013      	beq.n	80096c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009698:	4b3f      	ldr	r3, [pc, #252]	; (8009798 <xQueueGenericSend+0x1f8>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	e00a      	b.n	80096c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096b0:	4b39      	ldr	r3, [pc, #228]	; (8009798 <xQueueGenericSend+0x1f8>)
 80096b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096c0:	f001 ff80 	bl	800b5c4 <vPortExitCritical>
				return pdPASS;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e063      	b.n	8009790 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d103      	bne.n	80096d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ce:	f001 ff79 	bl	800b5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e05c      	b.n	8009790 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096dc:	f107 0314 	add.w	r3, r7, #20
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 f887 	bl	800a7f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e6:	2301      	movs	r3, #1
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096ea:	f001 ff6b 	bl	800b5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ee:	f000 fdf9 	bl	800a2e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096f2:	f001 ff37 	bl	800b564 <vPortEnterCritical>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096fc:	b25b      	sxtb	r3, r3
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009702:	d103      	bne.n	800970c <xQueueGenericSend+0x16c>
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009712:	b25b      	sxtb	r3, r3
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d103      	bne.n	8009722 <xQueueGenericSend+0x182>
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009722:	f001 ff4f 	bl	800b5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009726:	1d3a      	adds	r2, r7, #4
 8009728:	f107 0314 	add.w	r3, r7, #20
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f001 f876 	bl	800a820 <xTaskCheckForTimeOut>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d124      	bne.n	8009784 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800973a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800973c:	f000 faa2 	bl	8009c84 <prvIsQueueFull>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d018      	beq.n	8009778 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	3310      	adds	r3, #16
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4611      	mov	r1, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f000 ff9c 	bl	800a68c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009756:	f000 fa2d 	bl	8009bb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800975a:	f000 fdd1 	bl	800a300 <xTaskResumeAll>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	f47f af7c 	bne.w	800965e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <xQueueGenericSend+0x1f8>)
 8009768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	e772      	b.n	800965e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977a:	f000 fa1b 	bl	8009bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800977e:	f000 fdbf 	bl	800a300 <xTaskResumeAll>
 8009782:	e76c      	b.n	800965e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009786:	f000 fa15 	bl	8009bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800978a:	f000 fdb9 	bl	800a300 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800978e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009790:	4618      	mov	r0, r3
 8009792:	3738      	adds	r7, #56	; 0x38
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b090      	sub	sp, #64	; 0x40
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <xQueueGenericSendFromISR+0x3c>
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <xQueueGenericSendFromISR+0x40>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <xQueueGenericSendFromISR+0x42>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d103      	bne.n	8009806 <xQueueGenericSendFromISR+0x6a>
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <xQueueGenericSendFromISR+0x6e>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <xQueueGenericSendFromISR+0x70>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	623b      	str	r3, [r7, #32]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009826:	f001 ff7f 	bl	800b728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800982a:	f3ef 8211 	mrs	r2, BASEPRI
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	61fa      	str	r2, [r7, #28]
 8009840:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009842:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	429a      	cmp	r2, r3
 8009850:	d302      	bcc.n	8009858 <xQueueGenericSendFromISR+0xbc>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d12f      	bne.n	80098b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800986e:	f000 f911 	bl	8009a94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009872:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d112      	bne.n	80098a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d016      	beq.n	80098b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	3324      	adds	r3, #36	; 0x24
 8009888:	4618      	mov	r0, r3
 800988a:	f000 ff4f 	bl	800a72c <xTaskRemoveFromEventList>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e007      	b.n	80098b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098a6:	3301      	adds	r3, #1
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	b25a      	sxtb	r2, r3
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098b2:	2301      	movs	r3, #1
 80098b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098b6:	e001      	b.n	80098bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3740      	adds	r7, #64	; 0x40
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08c      	sub	sp, #48	; 0x30
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <xQueueReceive+0x30>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	623b      	str	r3, [r7, #32]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <xQueueReceive+0x3e>
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <xQueueReceive+0x42>
 8009912:	2301      	movs	r3, #1
 8009914:	e000      	b.n	8009918 <xQueueReceive+0x44>
 8009916:	2300      	movs	r3, #0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xQueueReceive+0x5e>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	61fb      	str	r3, [r7, #28]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009932:	f001 f8b9 	bl	800aaa8 <xTaskGetSchedulerState>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <xQueueReceive+0x6e>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <xQueueReceive+0x72>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <xQueueReceive+0x74>
 8009946:	2300      	movs	r3, #0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <xQueueReceive+0x8e>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	61bb      	str	r3, [r7, #24]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009962:	f001 fdff 	bl	800b564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01f      	beq.n	80099b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009976:	f000 f8f7 	bl	8009b68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	1e5a      	subs	r2, r3, #1
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00f      	beq.n	80099aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	3310      	adds	r3, #16
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fecc 	bl	800a72c <xTaskRemoveFromEventList>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800999a:	4b3d      	ldr	r3, [pc, #244]	; (8009a90 <xQueueReceive+0x1bc>)
 800999c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099aa:	f001 fe0b 	bl	800b5c4 <vPortExitCritical>
				return pdPASS;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e069      	b.n	8009a86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b8:	f001 fe04 	bl	800b5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099bc:	2300      	movs	r3, #0
 80099be:	e062      	b.n	8009a86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c6:	f107 0310 	add.w	r3, r7, #16
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 ff12 	bl	800a7f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099d0:	2301      	movs	r3, #1
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099d4:	f001 fdf6 	bl	800b5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d8:	f000 fc84 	bl	800a2e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099dc:	f001 fdc2 	bl	800b564 <vPortEnterCritical>
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e6:	b25b      	sxtb	r3, r3
 80099e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ec:	d103      	bne.n	80099f6 <xQueueReceive+0x122>
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fc:	b25b      	sxtb	r3, r3
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d103      	bne.n	8009a0c <xQueueReceive+0x138>
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a0c:	f001 fdda 	bl	800b5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a10:	1d3a      	adds	r2, r7, #4
 8009a12:	f107 0310 	add.w	r3, r7, #16
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 ff01 	bl	800a820 <xTaskCheckForTimeOut>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d123      	bne.n	8009a6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a26:	f000 f917 	bl	8009c58 <prvIsQueueEmpty>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d017      	beq.n	8009a60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	3324      	adds	r3, #36	; 0x24
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fe27 	bl	800a68c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a40:	f000 f8b8 	bl	8009bb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a44:	f000 fc5c 	bl	800a300 <xTaskResumeAll>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d189      	bne.n	8009962 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a4e:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <xQueueReceive+0x1bc>)
 8009a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	e780      	b.n	8009962 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a62:	f000 f8a7 	bl	8009bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a66:	f000 fc4b 	bl	800a300 <xTaskResumeAll>
 8009a6a:	e77a      	b.n	8009962 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6e:	f000 f8a1 	bl	8009bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a72:	f000 fc45 	bl	800a300 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a78:	f000 f8ee 	bl	8009c58 <prvIsQueueEmpty>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f43f af6f 	beq.w	8009962 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3730      	adds	r7, #48	; 0x30
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10d      	bne.n	8009ace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d14d      	bne.n	8009b56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f810 	bl	800aae4 <xTaskPriorityDisinherit>
 8009ac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	609a      	str	r2, [r3, #8]
 8009acc:	e043      	b.n	8009b56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d119      	bne.n	8009b08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6858      	ldr	r0, [r3, #4]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	461a      	mov	r2, r3
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	f002 f87a 	bl	800bbd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	441a      	add	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d32b      	bcc.n	8009b56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	e026      	b.n	8009b56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68d8      	ldr	r0, [r3, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	461a      	mov	r2, r3
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	f002 f860 	bl	800bbd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68da      	ldr	r2, [r3, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	425b      	negs	r3, r3
 8009b22:	441a      	add	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d207      	bcs.n	8009b44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	441a      	add	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d105      	bne.n	8009b56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b5e:	697b      	ldr	r3, [r7, #20]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d018      	beq.n	8009bac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68da      	ldr	r2, [r3, #12]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	441a      	add	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d303      	bcc.n	8009b9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68d9      	ldr	r1, [r3, #12]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6838      	ldr	r0, [r7, #0]
 8009ba8:	f002 f816 	bl	800bbd8 <memcpy>
	}
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bbc:	f001 fcd2 	bl	800b564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bc8:	e011      	b.n	8009bee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d012      	beq.n	8009bf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3324      	adds	r3, #36	; 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fda8 	bl	800a72c <xTaskRemoveFromEventList>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009be2:	f000 fe7f 	bl	800a8e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dce9      	bgt.n	8009bca <prvUnlockQueue+0x16>
 8009bf6:	e000      	b.n	8009bfa <prvUnlockQueue+0x46>
					break;
 8009bf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	22ff      	movs	r2, #255	; 0xff
 8009bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c02:	f001 fcdf 	bl	800b5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c06:	f001 fcad 	bl	800b564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c12:	e011      	b.n	8009c38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d012      	beq.n	8009c42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3310      	adds	r3, #16
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 fd83 	bl	800a72c <xTaskRemoveFromEventList>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c2c:	f000 fe5a 	bl	800a8e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dce9      	bgt.n	8009c14 <prvUnlockQueue+0x60>
 8009c40:	e000      	b.n	8009c44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	22ff      	movs	r2, #255	; 0xff
 8009c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c4c:	f001 fcba 	bl	800b5c4 <vPortExitCritical>
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c60:	f001 fc80 	bl	800b564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e001      	b.n	8009c76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c76:	f001 fca5 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c8c:	f001 fc6a 	bl	800b564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d102      	bne.n	8009ca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e001      	b.n	8009ca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ca6:	f001 fc8d 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 8009caa:	68fb      	ldr	r3, [r7, #12]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e014      	b.n	8009cee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cc4:	4a0f      	ldr	r2, [pc, #60]	; (8009d04 <vQueueAddToRegistry+0x50>)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10b      	bne.n	8009ce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cd0:	490c      	ldr	r1, [pc, #48]	; (8009d04 <vQueueAddToRegistry+0x50>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cda:	4a0a      	ldr	r2, [pc, #40]	; (8009d04 <vQueueAddToRegistry+0x50>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ce6:	e006      	b.n	8009cf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b07      	cmp	r3, #7
 8009cf2:	d9e7      	bls.n	8009cc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	200010e4 	.word	0x200010e4

08009d08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d18:	f001 fc24 	bl	800b564 <vPortEnterCritical>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d103      	bne.n	8009d32 <vQueueWaitForMessageRestricted+0x2a>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d103      	bne.n	8009d48 <vQueueWaitForMessageRestricted+0x40>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d48:	f001 fc3c 	bl	800b5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d106      	bne.n	8009d62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fcb9 	bl	800a6d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	f7ff ff26 	bl	8009bb4 <prvUnlockQueue>
	}
 8009d68:	bf00      	nop
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	; 0x38
 8009d74:	af04      	add	r7, sp, #16
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	623b      	str	r3, [r7, #32]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	61fb      	str	r3, [r7, #28]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009db6:	235c      	movs	r3, #92	; 0x5c
 8009db8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8009dbe:	d00a      	beq.n	8009dd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	61bb      	str	r3, [r7, #24]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01e      	beq.n	8009e1c <xTaskCreateStatic+0xac>
 8009dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01b      	beq.n	8009e1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	2202      	movs	r2, #2
 8009df2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009df6:	2300      	movs	r3, #0
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	9302      	str	r3, [sp, #8]
 8009dfe:	f107 0314 	add.w	r3, r7, #20
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	68b9      	ldr	r1, [r7, #8]
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 f850 	bl	8009eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e16:	f000 f8dd 	bl	8009fd4 <prvAddNewTaskToReadyList>
 8009e1a:	e001      	b.n	8009e20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e20:	697b      	ldr	r3, [r7, #20]
	}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3728      	adds	r7, #40	; 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b08c      	sub	sp, #48	; 0x30
 8009e2e:	af04      	add	r7, sp, #16
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e3a:	88fb      	ldrh	r3, [r7, #6]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fcb2 	bl	800b7a8 <pvPortMalloc>
 8009e44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00e      	beq.n	8009e6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e4c:	205c      	movs	r0, #92	; 0x5c
 8009e4e:	f001 fcab 	bl	800b7a8 <pvPortMalloc>
 8009e52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e60:	e005      	b.n	8009e6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e62:	6978      	ldr	r0, [r7, #20]
 8009e64:	f001 fd6c 	bl	800b940 <vPortFree>
 8009e68:	e001      	b.n	8009e6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d017      	beq.n	8009ea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e7c:	88fa      	ldrh	r2, [r7, #6]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9303      	str	r3, [sp, #12]
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	9302      	str	r3, [sp, #8]
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f80e 	bl	8009eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e98:	69f8      	ldr	r0, [r7, #28]
 8009e9a:	f000 f89b 	bl	8009fd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	61bb      	str	r3, [r7, #24]
 8009ea2:	e002      	b.n	8009eaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3720      	adds	r7, #32
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	461a      	mov	r2, r3
 8009ecc:	21a5      	movs	r1, #165	; 0xa5
 8009ece:	f001 fe91 	bl	800bbf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009edc:	3b01      	subs	r3, #1
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	f003 0307 	and.w	r3, r3, #7
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	617b      	str	r3, [r7, #20]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01f      	beq.n	8009f52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e012      	b.n	8009f3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	7819      	ldrb	r1, [r3, #0]
 8009f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	4413      	add	r3, r2
 8009f26:	3334      	adds	r3, #52	; 0x34
 8009f28:	460a      	mov	r2, r1
 8009f2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	4413      	add	r3, r2
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d9e9      	bls.n	8009f18 <prvInitialiseNewTask+0x64>
 8009f44:	e000      	b.n	8009f48 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f50:	e003      	b.n	8009f5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5c:	2b37      	cmp	r3, #55	; 0x37
 8009f5e:	d901      	bls.n	8009f64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f60:	2337      	movs	r3, #55	; 0x37
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	2200      	movs	r2, #0
 8009f74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff f978 	bl	8009270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	3318      	adds	r3, #24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff f973 	bl	8009270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	68f9      	ldr	r1, [r7, #12]
 8009fb2:	69b8      	ldr	r0, [r7, #24]
 8009fb4:	f001 f9a6 	bl	800b304 <pxPortInitialiseStack>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fca:	bf00      	nop
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fdc:	f001 fac2 	bl	800b564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fe0:	4b2d      	ldr	r3, [pc, #180]	; (800a098 <prvAddNewTaskToReadyList+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	4a2c      	ldr	r2, [pc, #176]	; (800a098 <prvAddNewTaskToReadyList+0xc4>)
 8009fe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fea:	4b2c      	ldr	r3, [pc, #176]	; (800a09c <prvAddNewTaskToReadyList+0xc8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ff2:	4a2a      	ldr	r2, [pc, #168]	; (800a09c <prvAddNewTaskToReadyList+0xc8>)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ff8:	4b27      	ldr	r3, [pc, #156]	; (800a098 <prvAddNewTaskToReadyList+0xc4>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d110      	bne.n	800a022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a000:	f000 fc94 	bl	800a92c <prvInitialiseTaskLists>
 800a004:	e00d      	b.n	800a022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a006:	4b26      	ldr	r3, [pc, #152]	; (800a0a0 <prvAddNewTaskToReadyList+0xcc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a00e:	4b23      	ldr	r3, [pc, #140]	; (800a09c <prvAddNewTaskToReadyList+0xc8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	429a      	cmp	r2, r3
 800a01a:	d802      	bhi.n	800a022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a01c:	4a1f      	ldr	r2, [pc, #124]	; (800a09c <prvAddNewTaskToReadyList+0xc8>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a022:	4b20      	ldr	r3, [pc, #128]	; (800a0a4 <prvAddNewTaskToReadyList+0xd0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	4a1e      	ldr	r2, [pc, #120]	; (800a0a4 <prvAddNewTaskToReadyList+0xd0>)
 800a02a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a02c:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <prvAddNewTaskToReadyList+0xd0>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4b1b      	ldr	r3, [pc, #108]	; (800a0a8 <prvAddNewTaskToReadyList+0xd4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d903      	bls.n	800a048 <prvAddNewTaskToReadyList+0x74>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a18      	ldr	r2, [pc, #96]	; (800a0a8 <prvAddNewTaskToReadyList+0xd4>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <prvAddNewTaskToReadyList+0xd8>)
 800a056:	441a      	add	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7ff f913 	bl	800928a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a064:	f001 faae 	bl	800b5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a068:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <prvAddNewTaskToReadyList+0xcc>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00e      	beq.n	800a08e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <prvAddNewTaskToReadyList+0xc8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d207      	bcs.n	800a08e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <prvAddNewTaskToReadyList+0xdc>)
 800a080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	200015f8 	.word	0x200015f8
 800a09c:	20001124 	.word	0x20001124
 800a0a0:	20001604 	.word	0x20001604
 800a0a4:	20001614 	.word	0x20001614
 800a0a8:	20001600 	.word	0x20001600
 800a0ac:	20001128 	.word	0x20001128
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08a      	sub	sp, #40	; 0x28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <vTaskDelayUntil+0x2a>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	617b      	str	r3, [r7, #20]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <vTaskDelayUntil+0x46>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	613b      	str	r3, [r7, #16]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a0fa:	4b2a      	ldr	r3, [pc, #168]	; (800a1a4 <vTaskDelayUntil+0xf0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <vTaskDelayUntil+0x64>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60fb      	str	r3, [r7, #12]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a118:	f000 f8e4 	bl	800a2e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <vTaskDelayUntil+0xf4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	4413      	add	r3, r2
 800a12a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6a3a      	ldr	r2, [r7, #32]
 800a132:	429a      	cmp	r2, r3
 800a134:	d20b      	bcs.n	800a14e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d211      	bcs.n	800a164 <vTaskDelayUntil+0xb0>
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	429a      	cmp	r2, r3
 800a146:	d90d      	bls.n	800a164 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
 800a14c:	e00a      	b.n	800a164 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	429a      	cmp	r2, r3
 800a156:	d303      	bcc.n	800a160 <vTaskDelayUntil+0xac>
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d901      	bls.n	800a164 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2100      	movs	r1, #0
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fd21 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a17e:	f000 f8bf 	bl	800a300 <xTaskResumeAll>
 800a182:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a18a:	4b08      	ldr	r3, [pc, #32]	; (800a1ac <vTaskDelayUntil+0xf8>)
 800a18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a19a:	bf00      	nop
 800a19c:	3728      	adds	r7, #40	; 0x28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20001620 	.word	0x20001620
 800a1a8:	200015fc 	.word	0x200015fc
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d017      	beq.n	800a1f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1c2:	4b13      	ldr	r3, [pc, #76]	; (800a210 <vTaskDelay+0x60>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <vTaskDelay+0x30>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	60bb      	str	r3, [r7, #8]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1e0:	f000 f880 	bl	800a2e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fcea 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1ec:	f000 f888 	bl	800a300 <xTaskResumeAll>
 800a1f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d107      	bne.n	800a208 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <vTaskDelay+0x64>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a208:	bf00      	nop
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20001620 	.word	0x20001620
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	; 0x28
 800a21c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a226:	463a      	mov	r2, r7
 800a228:	1d39      	adds	r1, r7, #4
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe ffca 	bl	80091c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	9202      	str	r2, [sp, #8]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	2300      	movs	r3, #0
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	460a      	mov	r2, r1
 800a246:	4921      	ldr	r1, [pc, #132]	; (800a2cc <vTaskStartScheduler+0xb4>)
 800a248:	4821      	ldr	r0, [pc, #132]	; (800a2d0 <vTaskStartScheduler+0xb8>)
 800a24a:	f7ff fd91 	bl	8009d70 <xTaskCreateStatic>
 800a24e:	4603      	mov	r3, r0
 800a250:	4a20      	ldr	r2, [pc, #128]	; (800a2d4 <vTaskStartScheduler+0xbc>)
 800a252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a254:	4b1f      	ldr	r3, [pc, #124]	; (800a2d4 <vTaskStartScheduler+0xbc>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e001      	b.n	800a266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d102      	bne.n	800a272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a26c:	f000 fcfc 	bl	800ac68 <xTimerCreateTimerTask>
 800a270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d116      	bne.n	800a2a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	613b      	str	r3, [r7, #16]
}
 800a28a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a28c:	4b12      	ldr	r3, [pc, #72]	; (800a2d8 <vTaskStartScheduler+0xc0>)
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
 800a292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <vTaskStartScheduler+0xc4>)
 800a296:	2201      	movs	r2, #1
 800a298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a29a:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <vTaskStartScheduler+0xc8>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2a0:	f001 f8be 	bl	800b420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2a4:	e00e      	b.n	800a2c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ac:	d10a      	bne.n	800a2c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	60fb      	str	r3, [r7, #12]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <vTaskStartScheduler+0xaa>
}
 800a2c4:	bf00      	nop
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	0800ecac 	.word	0x0800ecac
 800a2d0:	0800a8fd 	.word	0x0800a8fd
 800a2d4:	2000161c 	.word	0x2000161c
 800a2d8:	20001618 	.word	0x20001618
 800a2dc:	20001604 	.word	0x20001604
 800a2e0:	200015fc 	.word	0x200015fc

0800a2e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2e8:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <vTaskSuspendAll+0x18>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	4a03      	ldr	r2, [pc, #12]	; (800a2fc <vTaskSuspendAll+0x18>)
 800a2f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2f2:	bf00      	nop
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	20001620 	.word	0x20001620

0800a300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a30e:	4b42      	ldr	r3, [pc, #264]	; (800a418 <xTaskResumeAll+0x118>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10a      	bne.n	800a32c <xTaskResumeAll+0x2c>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	603b      	str	r3, [r7, #0]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a32c:	f001 f91a 	bl	800b564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a330:	4b39      	ldr	r3, [pc, #228]	; (800a418 <xTaskResumeAll+0x118>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3b01      	subs	r3, #1
 800a336:	4a38      	ldr	r2, [pc, #224]	; (800a418 <xTaskResumeAll+0x118>)
 800a338:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33a:	4b37      	ldr	r3, [pc, #220]	; (800a418 <xTaskResumeAll+0x118>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d162      	bne.n	800a408 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a342:	4b36      	ldr	r3, [pc, #216]	; (800a41c <xTaskResumeAll+0x11c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d05e      	beq.n	800a408 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a34a:	e02f      	b.n	800a3ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34c:	4b34      	ldr	r3, [pc, #208]	; (800a420 <xTaskResumeAll+0x120>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3318      	adds	r3, #24
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe fff3 	bl	8009344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3304      	adds	r3, #4
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe ffee 	bl	8009344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <xTaskResumeAll+0x124>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d903      	bls.n	800a37c <xTaskResumeAll+0x7c>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <xTaskResumeAll+0x124>)
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	4613      	mov	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4a27      	ldr	r2, [pc, #156]	; (800a428 <xTaskResumeAll+0x128>)
 800a38a:	441a      	add	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3304      	adds	r3, #4
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7fe ff79 	bl	800928a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	4b23      	ldr	r3, [pc, #140]	; (800a42c <xTaskResumeAll+0x12c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d302      	bcc.n	800a3ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3a6:	4b22      	ldr	r3, [pc, #136]	; (800a430 <xTaskResumeAll+0x130>)
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ac:	4b1c      	ldr	r3, [pc, #112]	; (800a420 <xTaskResumeAll+0x120>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1cb      	bne.n	800a34c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3ba:	f000 fb55 	bl	800aa68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3be:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <xTaskResumeAll+0x134>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ca:	f000 f847 	bl	800a45c <xTaskIncrementTick>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3d4:	4b16      	ldr	r3, [pc, #88]	; (800a430 <xTaskResumeAll+0x130>)
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1f1      	bne.n	800a3ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3e6:	4b13      	ldr	r3, [pc, #76]	; (800a434 <xTaskResumeAll+0x134>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <xTaskResumeAll+0x130>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d009      	beq.n	800a408 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3f8:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <xTaskResumeAll+0x138>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a408:	f001 f8dc 	bl	800b5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800a40c:	68bb      	ldr	r3, [r7, #8]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20001620 	.word	0x20001620
 800a41c:	200015f8 	.word	0x200015f8
 800a420:	200015b8 	.word	0x200015b8
 800a424:	20001600 	.word	0x20001600
 800a428:	20001128 	.word	0x20001128
 800a42c:	20001124 	.word	0x20001124
 800a430:	2000160c 	.word	0x2000160c
 800a434:	20001608 	.word	0x20001608
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <xTaskGetTickCount+0x1c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a448:	687b      	ldr	r3, [r7, #4]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	200015fc 	.word	0x200015fc

0800a45c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a466:	4b4f      	ldr	r3, [pc, #316]	; (800a5a4 <xTaskIncrementTick+0x148>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f040 808f 	bne.w	800a58e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a470:	4b4d      	ldr	r3, [pc, #308]	; (800a5a8 <xTaskIncrementTick+0x14c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a478:	4a4b      	ldr	r2, [pc, #300]	; (800a5a8 <xTaskIncrementTick+0x14c>)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d120      	bne.n	800a4c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a484:	4b49      	ldr	r3, [pc, #292]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00a      	beq.n	800a4a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	603b      	str	r3, [r7, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xTaskIncrementTick+0x46>
 800a4a4:	4b41      	ldr	r3, [pc, #260]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	4b41      	ldr	r3, [pc, #260]	; (800a5b0 <xTaskIncrementTick+0x154>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a3f      	ldr	r2, [pc, #252]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4a3f      	ldr	r2, [pc, #252]	; (800a5b0 <xTaskIncrementTick+0x154>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	4b3e      	ldr	r3, [pc, #248]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	4a3d      	ldr	r2, [pc, #244]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	f000 fad1 	bl	800aa68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4c6:	4b3c      	ldr	r3, [pc, #240]	; (800a5b8 <xTaskIncrementTick+0x15c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d349      	bcc.n	800a564 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d0:	4b36      	ldr	r3, [pc, #216]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	4b37      	ldr	r3, [pc, #220]	; (800a5b8 <xTaskIncrementTick+0x15c>)
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e0:	601a      	str	r2, [r3, #0]
					break;
 800a4e2:	e03f      	b.n	800a564 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e4:	4b31      	ldr	r3, [pc, #196]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d203      	bcs.n	800a504 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4fc:	4a2e      	ldr	r2, [pc, #184]	; (800a5b8 <xTaskIncrementTick+0x15c>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a502:	e02f      	b.n	800a564 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3304      	adds	r3, #4
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe ff1b 	bl	8009344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3318      	adds	r3, #24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe ff12 	bl	8009344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <xTaskIncrementTick+0x160>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d903      	bls.n	800a534 <xTaskIncrementTick+0xd8>
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	4a22      	ldr	r2, [pc, #136]	; (800a5bc <xTaskIncrementTick+0x160>)
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <xTaskIncrementTick+0x164>)
 800a542:	441a      	add	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f7fe fe9d 	bl	800928a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <xTaskIncrementTick+0x168>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d3b8      	bcc.n	800a4d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a562:	e7b5      	b.n	800a4d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a564:	4b17      	ldr	r3, [pc, #92]	; (800a5c4 <xTaskIncrementTick+0x168>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56a:	4915      	ldr	r1, [pc, #84]	; (800a5c0 <xTaskIncrementTick+0x164>)
 800a56c:	4613      	mov	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d901      	bls.n	800a580 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a580:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <xTaskIncrementTick+0x16c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d007      	beq.n	800a598 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e004      	b.n	800a598 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a58e:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <xTaskIncrementTick+0x170>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	4a0d      	ldr	r2, [pc, #52]	; (800a5cc <xTaskIncrementTick+0x170>)
 800a596:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a598:	697b      	ldr	r3, [r7, #20]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001620 	.word	0x20001620
 800a5a8:	200015fc 	.word	0x200015fc
 800a5ac:	200015b0 	.word	0x200015b0
 800a5b0:	200015b4 	.word	0x200015b4
 800a5b4:	20001610 	.word	0x20001610
 800a5b8:	20001618 	.word	0x20001618
 800a5bc:	20001600 	.word	0x20001600
 800a5c0:	20001128 	.word	0x20001128
 800a5c4:	20001124 	.word	0x20001124
 800a5c8:	2000160c 	.word	0x2000160c
 800a5cc:	20001608 	.word	0x20001608

0800a5d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5d6:	4b28      	ldr	r3, [pc, #160]	; (800a678 <vTaskSwitchContext+0xa8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5de:	4b27      	ldr	r3, [pc, #156]	; (800a67c <vTaskSwitchContext+0xac>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5e4:	e041      	b.n	800a66a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5e6:	4b25      	ldr	r3, [pc, #148]	; (800a67c <vTaskSwitchContext+0xac>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ec:	4b24      	ldr	r3, [pc, #144]	; (800a680 <vTaskSwitchContext+0xb0>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e010      	b.n	800a616 <vTaskSwitchContext+0x46>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	607b      	str	r3, [r7, #4]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <vTaskSwitchContext+0x3e>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3b01      	subs	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	491b      	ldr	r1, [pc, #108]	; (800a684 <vTaskSwitchContext+0xb4>)
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	440b      	add	r3, r1
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0e4      	beq.n	800a5f4 <vTaskSwitchContext+0x24>
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <vTaskSwitchContext+0xb4>)
 800a636:	4413      	add	r3, r2
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	3308      	adds	r3, #8
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d104      	bne.n	800a65a <vTaskSwitchContext+0x8a>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4a09      	ldr	r2, [pc, #36]	; (800a688 <vTaskSwitchContext+0xb8>)
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	4a06      	ldr	r2, [pc, #24]	; (800a680 <vTaskSwitchContext+0xb0>)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6013      	str	r3, [r2, #0]
}
 800a66a:	bf00      	nop
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20001620 	.word	0x20001620
 800a67c:	2000160c 	.word	0x2000160c
 800a680:	20001600 	.word	0x20001600
 800a684:	20001128 	.word	0x20001128
 800a688:	20001124 	.word	0x20001124

0800a68c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	60fb      	str	r3, [r7, #12]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <vTaskPlaceOnEventList+0x44>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3318      	adds	r3, #24
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7fe fe09 	bl	80092d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f000 fa7c 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20001124 	.word	0x20001124

0800a6d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	617b      	str	r3, [r7, #20]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3318      	adds	r3, #24
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7fe fdc0 	bl	800928a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a710:	f04f 33ff 	mov.w	r3, #4294967295
 800a714:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	68b8      	ldr	r0, [r7, #8]
 800a71a:	f000 fa51 	bl	800abc0 <prvAddCurrentTaskToDelayedList>
	}
 800a71e:	bf00      	nop
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20001124 	.word	0x20001124

0800a72c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60fb      	str	r3, [r7, #12]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3318      	adds	r3, #24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fdf1 	bl	8009344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a762:	4b1e      	ldr	r3, [pc, #120]	; (800a7dc <xTaskRemoveFromEventList+0xb0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d11d      	bne.n	800a7a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fde8 	bl	8009344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b19      	ldr	r3, [pc, #100]	; (800a7e0 <xTaskRemoveFromEventList+0xb4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <xTaskRemoveFromEventList+0x5c>
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a16      	ldr	r2, [pc, #88]	; (800a7e0 <xTaskRemoveFromEventList+0xb4>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a13      	ldr	r2, [pc, #76]	; (800a7e4 <xTaskRemoveFromEventList+0xb8>)
 800a796:	441a      	add	r2, r3
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fe fd73 	bl	800928a <vListInsertEnd>
 800a7a4:	e005      	b.n	800a7b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	3318      	adds	r3, #24
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	480e      	ldr	r0, [pc, #56]	; (800a7e8 <xTaskRemoveFromEventList+0xbc>)
 800a7ae:	f7fe fd6c 	bl	800928a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <xTaskRemoveFromEventList+0xc0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d905      	bls.n	800a7cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7c4:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <xTaskRemoveFromEventList+0xc4>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e001      	b.n	800a7d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7d0:	697b      	ldr	r3, [r7, #20]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20001620 	.word	0x20001620
 800a7e0:	20001600 	.word	0x20001600
 800a7e4:	20001128 	.word	0x20001128
 800a7e8:	200015b8 	.word	0x200015b8
 800a7ec:	20001124 	.word	0x20001124
 800a7f0:	2000160c 	.word	0x2000160c

0800a7f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <vTaskInternalSetTimeOutState+0x24>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <vTaskInternalSetTimeOutState+0x28>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	605a      	str	r2, [r3, #4]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	20001610 	.word	0x20001610
 800a81c:	200015fc 	.word	0x200015fc

0800a820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	613b      	str	r3, [r7, #16]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	60fb      	str	r3, [r7, #12]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a862:	f000 fe7f 	bl	800b564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a866:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <xTaskCheckForTimeOut+0xbc>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87e:	d102      	bne.n	800a886 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a880:	2300      	movs	r3, #0
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	e023      	b.n	800a8ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <xTaskCheckForTimeOut+0xc0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d007      	beq.n	800a8a2 <xTaskCheckForTimeOut+0x82>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d302      	bcc.n	800a8a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a89c:	2301      	movs	r3, #1
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	e015      	b.n	800a8ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d20b      	bcs.n	800a8c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	1ad2      	subs	r2, r2, r3
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff ff9b 	bl	800a7f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	e004      	b.n	800a8ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ce:	f000 fe79 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 800a8d2:	69fb      	ldr	r3, [r7, #28]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3720      	adds	r7, #32
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	200015fc 	.word	0x200015fc
 800a8e0:	20001610 	.word	0x20001610

0800a8e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8e8:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <vTaskMissedYield+0x14>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	2000160c 	.word	0x2000160c

0800a8fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a904:	f000 f852 	bl	800a9ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <prvIdleTask+0x28>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d9f9      	bls.n	800a904 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <prvIdleTask+0x2c>)
 800a912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a920:	e7f0      	b.n	800a904 <prvIdleTask+0x8>
 800a922:	bf00      	nop
 800a924:	20001128 	.word	0x20001128
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a932:	2300      	movs	r3, #0
 800a934:	607b      	str	r3, [r7, #4]
 800a936:	e00c      	b.n	800a952 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4a12      	ldr	r2, [pc, #72]	; (800a98c <prvInitialiseTaskLists+0x60>)
 800a944:	4413      	add	r3, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fc72 	bl	8009230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3301      	adds	r3, #1
 800a950:	607b      	str	r3, [r7, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b37      	cmp	r3, #55	; 0x37
 800a956:	d9ef      	bls.n	800a938 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a958:	480d      	ldr	r0, [pc, #52]	; (800a990 <prvInitialiseTaskLists+0x64>)
 800a95a:	f7fe fc69 	bl	8009230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a95e:	480d      	ldr	r0, [pc, #52]	; (800a994 <prvInitialiseTaskLists+0x68>)
 800a960:	f7fe fc66 	bl	8009230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a964:	480c      	ldr	r0, [pc, #48]	; (800a998 <prvInitialiseTaskLists+0x6c>)
 800a966:	f7fe fc63 	bl	8009230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a96a:	480c      	ldr	r0, [pc, #48]	; (800a99c <prvInitialiseTaskLists+0x70>)
 800a96c:	f7fe fc60 	bl	8009230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a970:	480b      	ldr	r0, [pc, #44]	; (800a9a0 <prvInitialiseTaskLists+0x74>)
 800a972:	f7fe fc5d 	bl	8009230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <prvInitialiseTaskLists+0x78>)
 800a978:	4a05      	ldr	r2, [pc, #20]	; (800a990 <prvInitialiseTaskLists+0x64>)
 800a97a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <prvInitialiseTaskLists+0x7c>)
 800a97e:	4a05      	ldr	r2, [pc, #20]	; (800a994 <prvInitialiseTaskLists+0x68>)
 800a980:	601a      	str	r2, [r3, #0]
}
 800a982:	bf00      	nop
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20001128 	.word	0x20001128
 800a990:	20001588 	.word	0x20001588
 800a994:	2000159c 	.word	0x2000159c
 800a998:	200015b8 	.word	0x200015b8
 800a99c:	200015cc 	.word	0x200015cc
 800a9a0:	200015e4 	.word	0x200015e4
 800a9a4:	200015b0 	.word	0x200015b0
 800a9a8:	200015b4 	.word	0x200015b4

0800a9ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9b2:	e019      	b.n	800a9e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9b4:	f000 fdd6 	bl	800b564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b8:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <prvCheckTasksWaitingTermination+0x50>)
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fe fcbd 	bl	8009344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <prvCheckTasksWaitingTermination+0x54>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	4a0b      	ldr	r2, [pc, #44]	; (800aa00 <prvCheckTasksWaitingTermination+0x54>)
 800a9d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <prvCheckTasksWaitingTermination+0x58>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4a0a      	ldr	r2, [pc, #40]	; (800aa04 <prvCheckTasksWaitingTermination+0x58>)
 800a9dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9de:	f000 fdf1 	bl	800b5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f810 	bl	800aa08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <prvCheckTasksWaitingTermination+0x58>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e1      	bne.n	800a9b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200015cc 	.word	0x200015cc
 800aa00:	200015f8 	.word	0x200015f8
 800aa04:	200015e0 	.word	0x200015e0

0800aa08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d108      	bne.n	800aa2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 ff8e 	bl	800b940 <vPortFree>
				vPortFree( pxTCB );
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 ff8b 	bl	800b940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa2a:	e018      	b.n	800aa5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d103      	bne.n	800aa3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 ff82 	bl	800b940 <vPortFree>
	}
 800aa3c:	e00f      	b.n	800aa5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d00a      	beq.n	800aa5e <prvDeleteTCB+0x56>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	60fb      	str	r3, [r7, #12]
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <prvDeleteTCB+0x54>
	}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <prvResetNextTaskUnblockTime+0x38>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d104      	bne.n	800aa82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa80:	e008      	b.n	800aa94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <prvResetNextTaskUnblockTime+0x38>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800aa92:	6013      	str	r3, [r2, #0]
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	200015b0 	.word	0x200015b0
 800aaa4:	20001618 	.word	0x20001618

0800aaa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaae:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <xTaskGetSchedulerState+0x34>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aab6:	2301      	movs	r3, #1
 800aab8:	607b      	str	r3, [r7, #4]
 800aaba:	e008      	b.n	800aace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabc:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <xTaskGetSchedulerState+0x38>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aac4:	2302      	movs	r3, #2
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	e001      	b.n	800aace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaca:	2300      	movs	r3, #0
 800aacc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aace:	687b      	ldr	r3, [r7, #4]
	}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	20001604 	.word	0x20001604
 800aae0:	20001620 	.word	0x20001620

0800aae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d056      	beq.n	800aba8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aafa:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <xTaskPriorityDisinherit+0xd0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d00a      	beq.n	800ab1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	60fb      	str	r3, [r7, #12]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60bb      	str	r3, [r7, #8]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3c:	1e5a      	subs	r2, r3, #1
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d02c      	beq.n	800aba8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d128      	bne.n	800aba8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fbf2 	bl	8009344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <xTaskPriorityDisinherit+0xd4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d903      	bls.n	800ab88 <xTaskPriorityDisinherit+0xa4>
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a0c      	ldr	r2, [pc, #48]	; (800abb8 <xTaskPriorityDisinherit+0xd4>)
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a09      	ldr	r2, [pc, #36]	; (800abbc <xTaskPriorityDisinherit+0xd8>)
 800ab96:	441a      	add	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7fe fb73 	bl	800928a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aba4:	2301      	movs	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aba8:	697b      	ldr	r3, [r7, #20]
	}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20001124 	.word	0x20001124
 800abb8:	20001600 	.word	0x20001600
 800abbc:	20001128 	.word	0x20001128

0800abc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abca:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <prvAddCurrentTaskToDelayedList+0x90>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd0:	4b20      	ldr	r3, [pc, #128]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fbb4 	bl	8009344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe2:	d10a      	bne.n	800abfa <prvAddCurrentTaskToDelayedList+0x3a>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d007      	beq.n	800abfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abea:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	4819      	ldr	r0, [pc, #100]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x98>)
 800abf4:	f7fe fb49 	bl	800928a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abf8:	e026      	b.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4413      	add	r3, r2
 800ac00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac02:	4b14      	ldr	r3, [pc, #80]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d209      	bcs.n	800ac26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac12:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f7fe fb57 	bl	80092d2 <vListInsert>
}
 800ac24:	e010      	b.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac26:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f7fe fb4d 	bl	80092d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d202      	bcs.n	800ac48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac42:	4a08      	ldr	r2, [pc, #32]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6013      	str	r3, [r2, #0]
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	200015fc 	.word	0x200015fc
 800ac54:	20001124 	.word	0x20001124
 800ac58:	200015e4 	.word	0x200015e4
 800ac5c:	200015b4 	.word	0x200015b4
 800ac60:	200015b0 	.word	0x200015b0
 800ac64:	20001618 	.word	0x20001618

0800ac68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08a      	sub	sp, #40	; 0x28
 800ac6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac72:	f000 fb07 	bl	800b284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac76:	4b1c      	ldr	r3, [pc, #112]	; (800ace8 <xTimerCreateTimerTask+0x80>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d021      	beq.n	800acc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac86:	1d3a      	adds	r2, r7, #4
 800ac88:	f107 0108 	add.w	r1, r7, #8
 800ac8c:	f107 030c 	add.w	r3, r7, #12
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fe fab3 	bl	80091fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	9202      	str	r2, [sp, #8]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	2302      	movs	r3, #2
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	2300      	movs	r3, #0
 800aca6:	460a      	mov	r2, r1
 800aca8:	4910      	ldr	r1, [pc, #64]	; (800acec <xTimerCreateTimerTask+0x84>)
 800acaa:	4811      	ldr	r0, [pc, #68]	; (800acf0 <xTimerCreateTimerTask+0x88>)
 800acac:	f7ff f860 	bl	8009d70 <xTaskCreateStatic>
 800acb0:	4603      	mov	r3, r0
 800acb2:	4a10      	ldr	r2, [pc, #64]	; (800acf4 <xTimerCreateTimerTask+0x8c>)
 800acb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acb6:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <xTimerCreateTimerTask+0x8c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acbe:	2301      	movs	r3, #1
 800acc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <xTimerCreateTimerTask+0x76>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	613b      	str	r3, [r7, #16]
}
 800acda:	bf00      	nop
 800acdc:	e7fe      	b.n	800acdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acde:	697b      	ldr	r3, [r7, #20]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20001654 	.word	0x20001654
 800acec:	0800ecb4 	.word	0x0800ecb4
 800acf0:	0800ae2d 	.word	0x0800ae2d
 800acf4:	20001658 	.word	0x20001658

0800acf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	623b      	str	r3, [r7, #32]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad26:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d02a      	beq.n	800ad84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b05      	cmp	r3, #5
 800ad3e:	dc18      	bgt.n	800ad72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad40:	f7ff feb2 	bl	800aaa8 <xTaskGetSchedulerState>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d109      	bne.n	800ad5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad4a:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	f107 0110 	add.w	r1, r7, #16
 800ad52:	2300      	movs	r3, #0
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	f7fe fc23 	bl	80095a0 <xQueueGenericSend>
 800ad5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ad5c:	e012      	b.n	800ad84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f107 0110 	add.w	r1, r7, #16
 800ad66:	2300      	movs	r3, #0
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f7fe fc19 	bl	80095a0 <xQueueGenericSend>
 800ad6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ad70:	e008      	b.n	800ad84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad72:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <xTimerGenericCommand+0x98>)
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	f107 0110 	add.w	r1, r7, #16
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f7fe fd0d 	bl	800979c <xQueueGenericSendFromISR>
 800ad82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3728      	adds	r7, #40	; 0x28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20001654 	.word	0x20001654

0800ad94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <prvProcessExpiredTimer+0x94>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fac9 	bl	8009344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d022      	beq.n	800ae06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	18d1      	adds	r1, r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	6978      	ldr	r0, [r7, #20]
 800adce:	f000 f8d1 	bl	800af74 <prvInsertTimerInActiveList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01f      	beq.n	800ae18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	2100      	movs	r1, #0
 800ade2:	6978      	ldr	r0, [r7, #20]
 800ade4:	f7ff ff88 	bl	800acf8 <xTimerGenericCommand>
 800ade8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d113      	bne.n	800ae18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60fb      	str	r3, [r7, #12]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	4798      	blx	r3
}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	2000164c 	.word	0x2000164c

0800ae2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f857 	bl	800aeec <prvGetNextExpireTime>
 800ae3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	4619      	mov	r1, r3
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 f803 	bl	800ae50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae4a:	f000 f8d5 	bl	800aff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae4e:	e7f1      	b.n	800ae34 <prvTimerTask+0x8>

0800ae50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae5a:	f7ff fa43 	bl	800a2e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae5e:	f107 0308 	add.w	r3, r7, #8
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f866 	bl	800af34 <prvSampleTimeNow>
 800ae68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d130      	bne.n	800aed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10a      	bne.n	800ae8c <prvProcessTimerOrBlockTask+0x3c>
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d806      	bhi.n	800ae8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae7e:	f7ff fa3f 	bl	800a300 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ff85 	bl	800ad94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae8a:	e024      	b.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d008      	beq.n	800aea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <prvProcessTimerOrBlockTask+0x90>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <prvProcessTimerOrBlockTask+0x50>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <prvProcessTimerOrBlockTask+0x52>
 800aea0:	2300      	movs	r3, #0
 800aea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aea4:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <prvProcessTimerOrBlockTask+0x94>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe ff29 	bl	8009d08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aeb6:	f7ff fa23 	bl	800a300 <xTaskResumeAll>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aec0:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <prvProcessTimerOrBlockTask+0x98>)
 800aec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
}
 800aed0:	e001      	b.n	800aed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aed2:	f7ff fa15 	bl	800a300 <xTaskResumeAll>
}
 800aed6:	bf00      	nop
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20001650 	.word	0x20001650
 800aee4:	20001654 	.word	0x20001654
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aef4:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <prvGetNextExpireTime+0x44>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <prvGetNextExpireTime+0x16>
 800aefe:	2201      	movs	r2, #1
 800af00:	e000      	b.n	800af04 <prvGetNextExpireTime+0x18>
 800af02:	2200      	movs	r2, #0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d105      	bne.n	800af1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <prvGetNextExpireTime+0x44>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e001      	b.n	800af20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af20:	68fb      	ldr	r3, [r7, #12]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	2000164c 	.word	0x2000164c

0800af34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af3c:	f7ff fa7e 	bl	800a43c <xTaskGetTickCount>
 800af40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af42:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <prvSampleTimeNow+0x3c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d205      	bcs.n	800af58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af4c:	f000 f936 	bl	800b1bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	e002      	b.n	800af5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af5e:	4a04      	ldr	r2, [pc, #16]	; (800af70 <prvSampleTimeNow+0x3c>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af64:	68fb      	ldr	r3, [r7, #12]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000165c 	.word	0x2000165c

0800af74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d812      	bhi.n	800afc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d302      	bcc.n	800afae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afa8:	2301      	movs	r3, #1
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	e01b      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <prvInsertTimerInActiveList+0x7c>)
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7fe f98a 	bl	80092d2 <vListInsert>
 800afbe:	e012      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d206      	bcs.n	800afd6 <prvInsertTimerInActiveList+0x62>
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d302      	bcc.n	800afd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e007      	b.n	800afe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afd6:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <prvInsertTimerInActiveList+0x80>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3304      	adds	r3, #4
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fe f976 	bl	80092d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afe6:	697b      	ldr	r3, [r7, #20]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20001650 	.word	0x20001650
 800aff4:	2000164c 	.word	0x2000164c

0800aff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08e      	sub	sp, #56	; 0x38
 800affc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800affe:	e0ca      	b.n	800b196 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	da18      	bge.n	800b038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b006:	1d3b      	adds	r3, r7, #4
 800b008:	3304      	adds	r3, #4
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	61fb      	str	r3, [r7, #28]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b02e:	6850      	ldr	r0, [r2, #4]
 800b030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b032:	6892      	ldr	r2, [r2, #8]
 800b034:	4611      	mov	r1, r2
 800b036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f2c0 80aa 	blt.w	800b194 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	3304      	adds	r3, #4
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe f977 	bl	8009344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b056:	463b      	mov	r3, r7
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff ff6b 	bl	800af34 <prvSampleTimeNow>
 800b05e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b09      	cmp	r3, #9
 800b064:	f200 8097 	bhi.w	800b196 <prvProcessReceivedCommands+0x19e>
 800b068:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <prvProcessReceivedCommands+0x78>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b099 	.word	0x0800b099
 800b074:	0800b099 	.word	0x0800b099
 800b078:	0800b099 	.word	0x0800b099
 800b07c:	0800b10d 	.word	0x0800b10d
 800b080:	0800b121 	.word	0x0800b121
 800b084:	0800b16b 	.word	0x0800b16b
 800b088:	0800b099 	.word	0x0800b099
 800b08c:	0800b099 	.word	0x0800b099
 800b090:	0800b10d 	.word	0x0800b10d
 800b094:	0800b121 	.word	0x0800b121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b09e:	f043 0301 	orr.w	r3, r3, #1
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	18d1      	adds	r1, r2, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b8:	f7ff ff5c 	bl	800af74 <prvInsertTimerInActiveList>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d069      	beq.n	800b196 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d05e      	beq.n	800b196 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	441a      	add	r2, r3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ea:	f7ff fe05 	bl	800acf8 <xTimerGenericCommand>
 800b0ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d14f      	bne.n	800b196 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	61bb      	str	r3, [r7, #24]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b112:	f023 0301 	bic.w	r3, r3, #1
 800b116:	b2da      	uxtb	r2, r3
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b11e:	e03a      	b.n	800b196 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	617b      	str	r3, [r7, #20]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	699a      	ldr	r2, [r3, #24]
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	18d1      	adds	r1, r2, r3
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b164:	f7ff ff06 	bl	800af74 <prvInsertTimerInActiveList>
					break;
 800b168:	e015      	b.n	800b196 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17a:	f000 fbe1 	bl	800b940 <vPortFree>
 800b17e:	e00a      	b.n	800b196 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b186:	f023 0301 	bic.w	r3, r3, #1
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b192:	e000      	b.n	800b196 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b196:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <prvProcessReceivedCommands+0x1c0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	1d39      	adds	r1, r7, #4
 800b19c:	2200      	movs	r2, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fb98 	bl	80098d4 <xQueueReceive>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f47f af2a 	bne.w	800b000 <prvProcessReceivedCommands+0x8>
	}
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	3730      	adds	r7, #48	; 0x30
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20001654 	.word	0x20001654

0800b1bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1c2:	e048      	b.n	800b256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1c4:	4b2d      	ldr	r3, [pc, #180]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ce:	4b2b      	ldr	r3, [pc, #172]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe f8b1 	bl	8009344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02e      	beq.n	800b256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4413      	add	r3, r2
 800b200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	429a      	cmp	r2, r3
 800b208:	d90e      	bls.n	800b228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b216:	4b19      	ldr	r3, [pc, #100]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4619      	mov	r1, r3
 800b220:	4610      	mov	r0, r2
 800b222:	f7fe f856 	bl	80092d2 <vListInsert>
 800b226:	e016      	b.n	800b256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b228:	2300      	movs	r3, #0
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	2300      	movs	r3, #0
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	2100      	movs	r1, #0
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff fd60 	bl	800acf8 <xTimerGenericCommand>
 800b238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	603b      	str	r3, [r7, #0]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b256:	4b09      	ldr	r3, [pc, #36]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1b1      	bne.n	800b1c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b260:	4b06      	ldr	r3, [pc, #24]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b266:	4b06      	ldr	r3, [pc, #24]	; (800b280 <prvSwitchTimerLists+0xc4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a04      	ldr	r2, [pc, #16]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b26c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b26e:	4a04      	ldr	r2, [pc, #16]	; (800b280 <prvSwitchTimerLists+0xc4>)
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	6013      	str	r3, [r2, #0]
}
 800b274:	bf00      	nop
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	2000164c 	.word	0x2000164c
 800b280:	20001650 	.word	0x20001650

0800b284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b28a:	f000 f96b 	bl	800b564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d120      	bne.n	800b2d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b296:	4814      	ldr	r0, [pc, #80]	; (800b2e8 <prvCheckForValidListAndQueue+0x64>)
 800b298:	f7fd ffca 	bl	8009230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b29c:	4813      	ldr	r0, [pc, #76]	; (800b2ec <prvCheckForValidListAndQueue+0x68>)
 800b29e:	f7fd ffc7 	bl	8009230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <prvCheckForValidListAndQueue+0x6c>)
 800b2a4:	4a10      	ldr	r2, [pc, #64]	; (800b2e8 <prvCheckForValidListAndQueue+0x64>)
 800b2a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2a8:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <prvCheckForValidListAndQueue+0x70>)
 800b2aa:	4a10      	ldr	r2, [pc, #64]	; (800b2ec <prvCheckForValidListAndQueue+0x68>)
 800b2ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4b11      	ldr	r3, [pc, #68]	; (800b2f8 <prvCheckForValidListAndQueue+0x74>)
 800b2b4:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <prvCheckForValidListAndQueue+0x78>)
 800b2b6:	2110      	movs	r1, #16
 800b2b8:	200a      	movs	r0, #10
 800b2ba:	f7fe f8d5 	bl	8009468 <xQueueGenericCreateStatic>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	490b      	ldr	r1, [pc, #44]	; (800b300 <prvCheckForValidListAndQueue+0x7c>)
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fcee 	bl	8009cb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d8:	f000 f974 	bl	800b5c4 <vPortExitCritical>
}
 800b2dc:	bf00      	nop
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20001654 	.word	0x20001654
 800b2e8:	20001624 	.word	0x20001624
 800b2ec:	20001638 	.word	0x20001638
 800b2f0:	2000164c 	.word	0x2000164c
 800b2f4:	20001650 	.word	0x20001650
 800b2f8:	20001700 	.word	0x20001700
 800b2fc:	20001660 	.word	0x20001660
 800b300:	0800ecbc 	.word	0x0800ecbc

0800b304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3b04      	subs	r3, #4
 800b314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b31c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3b04      	subs	r3, #4
 800b322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f023 0201 	bic.w	r2, r3, #1
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3b04      	subs	r3, #4
 800b332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b334:	4a0c      	ldr	r2, [pc, #48]	; (800b368 <pxPortInitialiseStack+0x64>)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b14      	subs	r3, #20
 800b33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3b04      	subs	r3, #4
 800b34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f06f 0202 	mvn.w	r2, #2
 800b352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3b20      	subs	r3, #32
 800b358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b35a:	68fb      	ldr	r3, [r7, #12]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	0800b36d 	.word	0x0800b36d

0800b36c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <prvTaskExitError+0x54>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37e:	d00a      	beq.n	800b396 <prvTaskExitError+0x2a>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60fb      	str	r3, [r7, #12]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <prvTaskExitError+0x28>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	60bb      	str	r3, [r7, #8]
}
 800b3a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3aa:	bf00      	nop
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0fc      	beq.n	800b3ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	2000003c 	.word	0x2000003c
	...

0800b3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <pxCurrentTCBConst2>)
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	6808      	ldr	r0, [r1, #0]
 800b3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	f380 8809 	msr	PSP, r0
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8811 	msr	BASEPRI, r0
 800b3ea:	4770      	bx	lr
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst2>:
 800b3f0:	20001124 	.word	0x20001124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3f8:	4808      	ldr	r0, [pc, #32]	; (800b41c <prvPortStartFirstTask+0x24>)
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	6800      	ldr	r0, [r0, #0]
 800b3fe:	f380 8808 	msr	MSP, r0
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8814 	msr	CONTROL, r0
 800b40a:	b662      	cpsie	i
 800b40c:	b661      	cpsie	f
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	df00      	svc	0
 800b418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b41a:	bf00      	nop
 800b41c:	e000ed08 	.word	0xe000ed08

0800b420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b426:	4b46      	ldr	r3, [pc, #280]	; (800b540 <xPortStartScheduler+0x120>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a46      	ldr	r2, [pc, #280]	; (800b544 <xPortStartScheduler+0x124>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d10a      	bne.n	800b446 <xPortStartScheduler+0x26>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b446:	4b3e      	ldr	r3, [pc, #248]	; (800b540 <xPortStartScheduler+0x120>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a3f      	ldr	r2, [pc, #252]	; (800b548 <xPortStartScheduler+0x128>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d10a      	bne.n	800b466 <xPortStartScheduler+0x46>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60fb      	str	r3, [r7, #12]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b466:	4b39      	ldr	r3, [pc, #228]	; (800b54c <xPortStartScheduler+0x12c>)
 800b468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	4b31      	ldr	r3, [pc, #196]	; (800b550 <xPortStartScheduler+0x130>)
 800b48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b48e:	4b31      	ldr	r3, [pc, #196]	; (800b554 <xPortStartScheduler+0x134>)
 800b490:	2207      	movs	r2, #7
 800b492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b494:	e009      	b.n	800b4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b496:	4b2f      	ldr	r3, [pc, #188]	; (800b554 <xPortStartScheduler+0x134>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3b01      	subs	r3, #1
 800b49c:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <xPortStartScheduler+0x134>)
 800b49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b2:	2b80      	cmp	r3, #128	; 0x80
 800b4b4:	d0ef      	beq.n	800b496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4b6:	4b27      	ldr	r3, [pc, #156]	; (800b554 <xPortStartScheduler+0x134>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f1c3 0307 	rsb	r3, r3, #7
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d00a      	beq.n	800b4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	60bb      	str	r3, [r7, #8]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4d8:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <xPortStartScheduler+0x134>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	4a1d      	ldr	r2, [pc, #116]	; (800b554 <xPortStartScheduler+0x134>)
 800b4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4e2:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <xPortStartScheduler+0x134>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ea:	4a1a      	ldr	r2, [pc, #104]	; (800b554 <xPortStartScheduler+0x134>)
 800b4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4f6:	4b18      	ldr	r3, [pc, #96]	; (800b558 <xPortStartScheduler+0x138>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <xPortStartScheduler+0x138>)
 800b4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <xPortStartScheduler+0x138>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a14      	ldr	r2, [pc, #80]	; (800b558 <xPortStartScheduler+0x138>)
 800b508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b50e:	f000 f8dd 	bl	800b6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <xPortStartScheduler+0x13c>)
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b518:	f000 f8fc 	bl	800b714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <xPortStartScheduler+0x140>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a0f      	ldr	r2, [pc, #60]	; (800b560 <xPortStartScheduler+0x140>)
 800b522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b528:	f7ff ff66 	bl	800b3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b52c:	f7ff f850 	bl	800a5d0 <vTaskSwitchContext>
	prvTaskExitError();
 800b530:	f7ff ff1c 	bl	800b36c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	e000ed00 	.word	0xe000ed00
 800b544:	410fc271 	.word	0x410fc271
 800b548:	410fc270 	.word	0x410fc270
 800b54c:	e000e400 	.word	0xe000e400
 800b550:	20001750 	.word	0x20001750
 800b554:	20001754 	.word	0x20001754
 800b558:	e000ed20 	.word	0xe000ed20
 800b55c:	2000003c 	.word	0x2000003c
 800b560:	e000ef34 	.word	0xe000ef34

0800b564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	607b      	str	r3, [r7, #4]
}
 800b57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b57e:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <vPortEnterCritical+0x58>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	4a0d      	ldr	r2, [pc, #52]	; (800b5bc <vPortEnterCritical+0x58>)
 800b586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <vPortEnterCritical+0x58>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d10f      	bne.n	800b5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <vPortEnterCritical+0x5c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	603b      	str	r3, [r7, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <vPortEnterCritical+0x4a>
	}
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	2000003c 	.word	0x2000003c
 800b5c0:	e000ed04 	.word	0xe000ed04

0800b5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5ca:	4b12      	ldr	r3, [pc, #72]	; (800b614 <vPortExitCritical+0x50>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <vPortExitCritical+0x24>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	607b      	str	r3, [r7, #4]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <vPortExitCritical+0x50>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	4a09      	ldr	r2, [pc, #36]	; (800b614 <vPortExitCritical+0x50>)
 800b5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5f2:	4b08      	ldr	r3, [pc, #32]	; (800b614 <vPortExitCritical+0x50>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <vPortExitCritical+0x42>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f383 8811 	msr	BASEPRI, r3
}
 800b604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	2000003c 	.word	0x2000003c
	...

0800b620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b620:	f3ef 8009 	mrs	r0, PSP
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	4b15      	ldr	r3, [pc, #84]	; (800b680 <pxCurrentTCBConst>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	f01e 0f10 	tst.w	lr, #16
 800b630:	bf08      	it	eq
 800b632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63a:	6010      	str	r0, [r2, #0]
 800b63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b644:	f380 8811 	msr	BASEPRI, r0
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f7fe ffbe 	bl	800a5d0 <vTaskSwitchContext>
 800b654:	f04f 0000 	mov.w	r0, #0
 800b658:	f380 8811 	msr	BASEPRI, r0
 800b65c:	bc09      	pop	{r0, r3}
 800b65e:	6819      	ldr	r1, [r3, #0]
 800b660:	6808      	ldr	r0, [r1, #0]
 800b662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b666:	f01e 0f10 	tst.w	lr, #16
 800b66a:	bf08      	it	eq
 800b66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b670:	f380 8809 	msr	PSP, r0
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	f3af 8000 	nop.w

0800b680 <pxCurrentTCBConst>:
 800b680:	20001124 	.word	0x20001124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop

0800b688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	607b      	str	r3, [r7, #4]
}
 800b6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6a2:	f7fe fedb 	bl	800a45c <xTaskIncrementTick>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <xPortSysTickHandler+0x40>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed04 	.word	0xe000ed04

0800b6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <vPortSetupTimerInterrupt+0x34>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <vPortSetupTimerInterrupt+0x38>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <vPortSetupTimerInterrupt+0x3c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <vPortSetupTimerInterrupt+0x40>)
 800b6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <vPortSetupTimerInterrupt+0x44>)
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ee:	4b04      	ldr	r3, [pc, #16]	; (800b700 <vPortSetupTimerInterrupt+0x34>)
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	e000e010 	.word	0xe000e010
 800b704:	e000e018 	.word	0xe000e018
 800b708:	20000030 	.word	0x20000030
 800b70c:	10624dd3 	.word	0x10624dd3
 800b710:	e000e014 	.word	0xe000e014

0800b714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b724 <vPortEnableVFP+0x10>
 800b718:	6801      	ldr	r1, [r0, #0]
 800b71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b71e:	6001      	str	r1, [r0, #0]
 800b720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b722:	bf00      	nop
 800b724:	e000ed88 	.word	0xe000ed88

0800b728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b72e:	f3ef 8305 	mrs	r3, IPSR
 800b732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b0f      	cmp	r3, #15
 800b738:	d914      	bls.n	800b764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b73a:	4a17      	ldr	r2, [pc, #92]	; (800b798 <vPortValidateInterruptPriority+0x70>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b744:	4b15      	ldr	r3, [pc, #84]	; (800b79c <vPortValidateInterruptPriority+0x74>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	7afa      	ldrb	r2, [r7, #11]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d20a      	bcs.n	800b764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b764:	4b0e      	ldr	r3, [pc, #56]	; (800b7a0 <vPortValidateInterruptPriority+0x78>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <vPortValidateInterruptPriority+0x7c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d90a      	bls.n	800b78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	603b      	str	r3, [r7, #0]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <vPortValidateInterruptPriority+0x60>
	}
 800b78a:	bf00      	nop
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	e000e3f0 	.word	0xe000e3f0
 800b79c:	20001750 	.word	0x20001750
 800b7a0:	e000ed0c 	.word	0xe000ed0c
 800b7a4:	20001754 	.word	0x20001754

0800b7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08a      	sub	sp, #40	; 0x28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7b4:	f7fe fd96 	bl	800a2e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7b8:	4b5b      	ldr	r3, [pc, #364]	; (800b928 <pvPortMalloc+0x180>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7c0:	f000 f920 	bl	800ba04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7c4:	4b59      	ldr	r3, [pc, #356]	; (800b92c <pvPortMalloc+0x184>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 8093 	bne.w	800b8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01d      	beq.n	800b814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7d8:	2208      	movs	r2, #8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f003 0307 	and.w	r3, r3, #7
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d014      	beq.n	800b814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f023 0307 	bic.w	r3, r3, #7
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <pvPortMalloc+0x6c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	617b      	str	r3, [r7, #20]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d06e      	beq.n	800b8f8 <pvPortMalloc+0x150>
 800b81a:	4b45      	ldr	r3, [pc, #276]	; (800b930 <pvPortMalloc+0x188>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d869      	bhi.n	800b8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b824:	4b43      	ldr	r3, [pc, #268]	; (800b934 <pvPortMalloc+0x18c>)
 800b826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b828:	4b42      	ldr	r3, [pc, #264]	; (800b934 <pvPortMalloc+0x18c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b82e:	e004      	b.n	800b83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <pvPortMalloc+0xa4>
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f1      	bne.n	800b830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b84c:	4b36      	ldr	r3, [pc, #216]	; (800b928 <pvPortMalloc+0x180>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b852:	429a      	cmp	r2, r3
 800b854:	d050      	beq.n	800b8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2208      	movs	r2, #8
 800b85c:	4413      	add	r3, r2
 800b85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	2308      	movs	r3, #8
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	d91f      	bls.n	800b8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4413      	add	r3, r2
 800b87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	613b      	str	r3, [r7, #16]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8b2:	69b8      	ldr	r0, [r7, #24]
 800b8b4:	f000 f908 	bl	800bac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <pvPortMalloc+0x188>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	4a1b      	ldr	r2, [pc, #108]	; (800b930 <pvPortMalloc+0x188>)
 800b8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8c6:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <pvPortMalloc+0x188>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <pvPortMalloc+0x190>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d203      	bcs.n	800b8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8d2:	4b17      	ldr	r3, [pc, #92]	; (800b930 <pvPortMalloc+0x188>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a18      	ldr	r2, [pc, #96]	; (800b938 <pvPortMalloc+0x190>)
 800b8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <pvPortMalloc+0x184>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	431a      	orrs	r2, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8ee:	4b13      	ldr	r3, [pc, #76]	; (800b93c <pvPortMalloc+0x194>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	4a11      	ldr	r2, [pc, #68]	; (800b93c <pvPortMalloc+0x194>)
 800b8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8f8:	f7fe fd02 	bl	800a300 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <pvPortMalloc+0x174>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <pvPortMalloc+0x172>
	return pvReturn;
 800b91c:	69fb      	ldr	r3, [r7, #28]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20005360 	.word	0x20005360
 800b92c:	20005374 	.word	0x20005374
 800b930:	20005364 	.word	0x20005364
 800b934:	20005358 	.word	0x20005358
 800b938:	20005368 	.word	0x20005368
 800b93c:	2000536c 	.word	0x2000536c

0800b940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d04d      	beq.n	800b9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b952:	2308      	movs	r3, #8
 800b954:	425b      	negs	r3, r3
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	4b24      	ldr	r3, [pc, #144]	; (800b9f8 <vPortFree+0xb8>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4013      	ands	r3, r2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <vPortFree+0x44>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	60fb      	str	r3, [r7, #12]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <vPortFree+0x62>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60bb      	str	r3, [r7, #8]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	4b14      	ldr	r3, [pc, #80]	; (800b9f8 <vPortFree+0xb8>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01e      	beq.n	800b9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11a      	bne.n	800b9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <vPortFree+0xb8>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9c8:	f7fe fc8c 	bl	800a2e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <vPortFree+0xbc>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <vPortFree+0xbc>)
 800b9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9da:	6938      	ldr	r0, [r7, #16]
 800b9dc:	f000 f874 	bl	800bac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <vPortFree+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	4a06      	ldr	r2, [pc, #24]	; (800ba00 <vPortFree+0xc0>)
 800b9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9ea:	f7fe fc89 	bl	800a300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ee:	bf00      	nop
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20005374 	.word	0x20005374
 800b9fc:	20005364 	.word	0x20005364
 800ba00:	20005370 	.word	0x20005370

0800ba04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba10:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <prvHeapInit+0xac>)
 800ba12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3307      	adds	r3, #7
 800ba22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	4a1f      	ldr	r2, [pc, #124]	; (800bab0 <prvHeapInit+0xac>)
 800ba34:	4413      	add	r3, r2
 800ba36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	; (800bab4 <prvHeapInit+0xb0>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba42:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <prvHeapInit+0xb0>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba50:	2208      	movs	r2, #8
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <prvHeapInit+0xb4>)
 800ba64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba66:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <prvHeapInit+0xb4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba6e:	4b12      	ldr	r3, [pc, #72]	; (800bab8 <prvHeapInit+0xb4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <prvHeapInit+0xb4>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a0a      	ldr	r2, [pc, #40]	; (800babc <prvHeapInit+0xb8>)
 800ba92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a09      	ldr	r2, [pc, #36]	; (800bac0 <prvHeapInit+0xbc>)
 800ba9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <prvHeapInit+0xc0>)
 800ba9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baa2:	601a      	str	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	20001758 	.word	0x20001758
 800bab4:	20005358 	.word	0x20005358
 800bab8:	20005360 	.word	0x20005360
 800babc:	20005368 	.word	0x20005368
 800bac0:	20005364 	.word	0x20005364
 800bac4:	20005374 	.word	0x20005374

0800bac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bad0:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <prvInsertBlockIntoFreeList+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e002      	b.n	800badc <prvInsertBlockIntoFreeList+0x14>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d8f7      	bhi.n	800bad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d108      	bne.n	800bb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d118      	bne.n	800bb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d00d      	beq.n	800bb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	441a      	add	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e008      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	e003      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d002      	beq.n	800bb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	20005358 	.word	0x20005358
 800bb78:	20005360 	.word	0x20005360

0800bb7c <atoi>:
 800bb7c:	220a      	movs	r2, #10
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f000 bdb0 	b.w	800c6e4 <strtol>

0800bb84 <__errno>:
 800bb84:	4b01      	ldr	r3, [pc, #4]	; (800bb8c <__errno+0x8>)
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	20000040 	.word	0x20000040

0800bb90 <__libc_init_array>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	4d0d      	ldr	r5, [pc, #52]	; (800bbc8 <__libc_init_array+0x38>)
 800bb94:	4c0d      	ldr	r4, [pc, #52]	; (800bbcc <__libc_init_array+0x3c>)
 800bb96:	1b64      	subs	r4, r4, r5
 800bb98:	10a4      	asrs	r4, r4, #2
 800bb9a:	2600      	movs	r6, #0
 800bb9c:	42a6      	cmp	r6, r4
 800bb9e:	d109      	bne.n	800bbb4 <__libc_init_array+0x24>
 800bba0:	4d0b      	ldr	r5, [pc, #44]	; (800bbd0 <__libc_init_array+0x40>)
 800bba2:	4c0c      	ldr	r4, [pc, #48]	; (800bbd4 <__libc_init_array+0x44>)
 800bba4:	f002 fff4 	bl	800eb90 <_init>
 800bba8:	1b64      	subs	r4, r4, r5
 800bbaa:	10a4      	asrs	r4, r4, #2
 800bbac:	2600      	movs	r6, #0
 800bbae:	42a6      	cmp	r6, r4
 800bbb0:	d105      	bne.n	800bbbe <__libc_init_array+0x2e>
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb8:	4798      	blx	r3
 800bbba:	3601      	adds	r6, #1
 800bbbc:	e7ee      	b.n	800bb9c <__libc_init_array+0xc>
 800bbbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc2:	4798      	blx	r3
 800bbc4:	3601      	adds	r6, #1
 800bbc6:	e7f2      	b.n	800bbae <__libc_init_array+0x1e>
 800bbc8:	0800fc64 	.word	0x0800fc64
 800bbcc:	0800fc64 	.word	0x0800fc64
 800bbd0:	0800fc64 	.word	0x0800fc64
 800bbd4:	0800fc68 	.word	0x0800fc68

0800bbd8 <memcpy>:
 800bbd8:	440a      	add	r2, r1
 800bbda:	4291      	cmp	r1, r2
 800bbdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbe0:	d100      	bne.n	800bbe4 <memcpy+0xc>
 800bbe2:	4770      	bx	lr
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbee:	4291      	cmp	r1, r2
 800bbf0:	d1f9      	bne.n	800bbe6 <memcpy+0xe>
 800bbf2:	bd10      	pop	{r4, pc}

0800bbf4 <memset>:
 800bbf4:	4402      	add	r2, r0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d100      	bne.n	800bbfe <memset+0xa>
 800bbfc:	4770      	bx	lr
 800bbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800bc02:	e7f9      	b.n	800bbf8 <memset+0x4>

0800bc04 <__cvt>:
 800bc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	ec55 4b10 	vmov	r4, r5, d0
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	460e      	mov	r6, r1
 800bc10:	4619      	mov	r1, r3
 800bc12:	462b      	mov	r3, r5
 800bc14:	bfbb      	ittet	lt
 800bc16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc1a:	461d      	movlt	r5, r3
 800bc1c:	2300      	movge	r3, #0
 800bc1e:	232d      	movlt	r3, #45	; 0x2d
 800bc20:	700b      	strb	r3, [r1, #0]
 800bc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc28:	4691      	mov	r9, r2
 800bc2a:	f023 0820 	bic.w	r8, r3, #32
 800bc2e:	bfbc      	itt	lt
 800bc30:	4622      	movlt	r2, r4
 800bc32:	4614      	movlt	r4, r2
 800bc34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc38:	d005      	beq.n	800bc46 <__cvt+0x42>
 800bc3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc3e:	d100      	bne.n	800bc42 <__cvt+0x3e>
 800bc40:	3601      	adds	r6, #1
 800bc42:	2102      	movs	r1, #2
 800bc44:	e000      	b.n	800bc48 <__cvt+0x44>
 800bc46:	2103      	movs	r1, #3
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	ab02      	add	r3, sp, #8
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	ec45 4b10 	vmov	d0, r4, r5
 800bc54:	4653      	mov	r3, sl
 800bc56:	4632      	mov	r2, r6
 800bc58:	f000 fdfa 	bl	800c850 <_dtoa_r>
 800bc5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc60:	4607      	mov	r7, r0
 800bc62:	d102      	bne.n	800bc6a <__cvt+0x66>
 800bc64:	f019 0f01 	tst.w	r9, #1
 800bc68:	d022      	beq.n	800bcb0 <__cvt+0xac>
 800bc6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc6e:	eb07 0906 	add.w	r9, r7, r6
 800bc72:	d110      	bne.n	800bc96 <__cvt+0x92>
 800bc74:	783b      	ldrb	r3, [r7, #0]
 800bc76:	2b30      	cmp	r3, #48	; 0x30
 800bc78:	d10a      	bne.n	800bc90 <__cvt+0x8c>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc86:	b918      	cbnz	r0, 800bc90 <__cvt+0x8c>
 800bc88:	f1c6 0601 	rsb	r6, r6, #1
 800bc8c:	f8ca 6000 	str.w	r6, [sl]
 800bc90:	f8da 3000 	ldr.w	r3, [sl]
 800bc94:	4499      	add	r9, r3
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	f7f4 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca2:	b108      	cbz	r0, 800bca8 <__cvt+0xa4>
 800bca4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bca8:	2230      	movs	r2, #48	; 0x30
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	454b      	cmp	r3, r9
 800bcae:	d307      	bcc.n	800bcc0 <__cvt+0xbc>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcb4:	1bdb      	subs	r3, r3, r7
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	b004      	add	sp, #16
 800bcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc0:	1c59      	adds	r1, r3, #1
 800bcc2:	9103      	str	r1, [sp, #12]
 800bcc4:	701a      	strb	r2, [r3, #0]
 800bcc6:	e7f0      	b.n	800bcaa <__cvt+0xa6>

0800bcc8 <__exponent>:
 800bcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcca:	4603      	mov	r3, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	bfb8      	it	lt
 800bcd0:	4249      	neglt	r1, r1
 800bcd2:	f803 2b02 	strb.w	r2, [r3], #2
 800bcd6:	bfb4      	ite	lt
 800bcd8:	222d      	movlt	r2, #45	; 0x2d
 800bcda:	222b      	movge	r2, #43	; 0x2b
 800bcdc:	2909      	cmp	r1, #9
 800bcde:	7042      	strb	r2, [r0, #1]
 800bce0:	dd2a      	ble.n	800bd38 <__exponent+0x70>
 800bce2:	f10d 0407 	add.w	r4, sp, #7
 800bce6:	46a4      	mov	ip, r4
 800bce8:	270a      	movs	r7, #10
 800bcea:	46a6      	mov	lr, r4
 800bcec:	460a      	mov	r2, r1
 800bcee:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcf2:	fb07 1516 	mls	r5, r7, r6, r1
 800bcf6:	3530      	adds	r5, #48	; 0x30
 800bcf8:	2a63      	cmp	r2, #99	; 0x63
 800bcfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800bcfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bd02:	4631      	mov	r1, r6
 800bd04:	dcf1      	bgt.n	800bcea <__exponent+0x22>
 800bd06:	3130      	adds	r1, #48	; 0x30
 800bd08:	f1ae 0502 	sub.w	r5, lr, #2
 800bd0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bd10:	1c44      	adds	r4, r0, #1
 800bd12:	4629      	mov	r1, r5
 800bd14:	4561      	cmp	r1, ip
 800bd16:	d30a      	bcc.n	800bd2e <__exponent+0x66>
 800bd18:	f10d 0209 	add.w	r2, sp, #9
 800bd1c:	eba2 020e 	sub.w	r2, r2, lr
 800bd20:	4565      	cmp	r5, ip
 800bd22:	bf88      	it	hi
 800bd24:	2200      	movhi	r2, #0
 800bd26:	4413      	add	r3, r2
 800bd28:	1a18      	subs	r0, r3, r0
 800bd2a:	b003      	add	sp, #12
 800bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd36:	e7ed      	b.n	800bd14 <__exponent+0x4c>
 800bd38:	2330      	movs	r3, #48	; 0x30
 800bd3a:	3130      	adds	r1, #48	; 0x30
 800bd3c:	7083      	strb	r3, [r0, #2]
 800bd3e:	70c1      	strb	r1, [r0, #3]
 800bd40:	1d03      	adds	r3, r0, #4
 800bd42:	e7f1      	b.n	800bd28 <__exponent+0x60>

0800bd44 <_printf_float>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	ed2d 8b02 	vpush	{d8}
 800bd4c:	b08d      	sub	sp, #52	; 0x34
 800bd4e:	460c      	mov	r4, r1
 800bd50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd54:	4616      	mov	r6, r2
 800bd56:	461f      	mov	r7, r3
 800bd58:	4605      	mov	r5, r0
 800bd5a:	f001 fb79 	bl	800d450 <_localeconv_r>
 800bd5e:	f8d0 a000 	ldr.w	sl, [r0]
 800bd62:	4650      	mov	r0, sl
 800bd64:	f7f4 fa34 	bl	80001d0 <strlen>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	9305      	str	r3, [sp, #20]
 800bd70:	f8d8 3000 	ldr.w	r3, [r8]
 800bd74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd78:	3307      	adds	r3, #7
 800bd7a:	f023 0307 	bic.w	r3, r3, #7
 800bd7e:	f103 0208 	add.w	r2, r3, #8
 800bd82:	f8c8 2000 	str.w	r2, [r8]
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd96:	9307      	str	r3, [sp, #28]
 800bd98:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd9c:	ee08 0a10 	vmov	s16, r0
 800bda0:	4b9f      	ldr	r3, [pc, #636]	; (800c020 <_printf_float+0x2dc>)
 800bda2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bda6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdaa:	f7f4 febf 	bl	8000b2c <__aeabi_dcmpun>
 800bdae:	bb88      	cbnz	r0, 800be14 <_printf_float+0xd0>
 800bdb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdb4:	4b9a      	ldr	r3, [pc, #616]	; (800c020 <_printf_float+0x2dc>)
 800bdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdba:	f7f4 fe99 	bl	8000af0 <__aeabi_dcmple>
 800bdbe:	bb48      	cbnz	r0, 800be14 <_printf_float+0xd0>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f7f4 fe88 	bl	8000adc <__aeabi_dcmplt>
 800bdcc:	b110      	cbz	r0, 800bdd4 <_printf_float+0x90>
 800bdce:	232d      	movs	r3, #45	; 0x2d
 800bdd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd4:	4b93      	ldr	r3, [pc, #588]	; (800c024 <_printf_float+0x2e0>)
 800bdd6:	4894      	ldr	r0, [pc, #592]	; (800c028 <_printf_float+0x2e4>)
 800bdd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bddc:	bf94      	ite	ls
 800bdde:	4698      	movls	r8, r3
 800bde0:	4680      	movhi	r8, r0
 800bde2:	2303      	movs	r3, #3
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	9b05      	ldr	r3, [sp, #20]
 800bde8:	f023 0204 	bic.w	r2, r3, #4
 800bdec:	6022      	str	r2, [r4, #0]
 800bdee:	f04f 0900 	mov.w	r9, #0
 800bdf2:	9700      	str	r7, [sp, #0]
 800bdf4:	4633      	mov	r3, r6
 800bdf6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f000 f9d8 	bl	800c1b0 <_printf_common>
 800be00:	3001      	adds	r0, #1
 800be02:	f040 8090 	bne.w	800bf26 <_printf_float+0x1e2>
 800be06:	f04f 30ff 	mov.w	r0, #4294967295
 800be0a:	b00d      	add	sp, #52	; 0x34
 800be0c:	ecbd 8b02 	vpop	{d8}
 800be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be14:	4642      	mov	r2, r8
 800be16:	464b      	mov	r3, r9
 800be18:	4640      	mov	r0, r8
 800be1a:	4649      	mov	r1, r9
 800be1c:	f7f4 fe86 	bl	8000b2c <__aeabi_dcmpun>
 800be20:	b140      	cbz	r0, 800be34 <_printf_float+0xf0>
 800be22:	464b      	mov	r3, r9
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfbc      	itt	lt
 800be28:	232d      	movlt	r3, #45	; 0x2d
 800be2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be2e:	487f      	ldr	r0, [pc, #508]	; (800c02c <_printf_float+0x2e8>)
 800be30:	4b7f      	ldr	r3, [pc, #508]	; (800c030 <_printf_float+0x2ec>)
 800be32:	e7d1      	b.n	800bdd8 <_printf_float+0x94>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be3a:	9206      	str	r2, [sp, #24]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	d13f      	bne.n	800bec0 <_printf_float+0x17c>
 800be40:	2306      	movs	r3, #6
 800be42:	6063      	str	r3, [r4, #4]
 800be44:	9b05      	ldr	r3, [sp, #20]
 800be46:	6861      	ldr	r1, [r4, #4]
 800be48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be4c:	2300      	movs	r3, #0
 800be4e:	9303      	str	r3, [sp, #12]
 800be50:	ab0a      	add	r3, sp, #40	; 0x28
 800be52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be56:	ab09      	add	r3, sp, #36	; 0x24
 800be58:	ec49 8b10 	vmov	d0, r8, r9
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	6022      	str	r2, [r4, #0]
 800be60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be64:	4628      	mov	r0, r5
 800be66:	f7ff fecd 	bl	800bc04 <__cvt>
 800be6a:	9b06      	ldr	r3, [sp, #24]
 800be6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be6e:	2b47      	cmp	r3, #71	; 0x47
 800be70:	4680      	mov	r8, r0
 800be72:	d108      	bne.n	800be86 <_printf_float+0x142>
 800be74:	1cc8      	adds	r0, r1, #3
 800be76:	db02      	blt.n	800be7e <_printf_float+0x13a>
 800be78:	6863      	ldr	r3, [r4, #4]
 800be7a:	4299      	cmp	r1, r3
 800be7c:	dd41      	ble.n	800bf02 <_printf_float+0x1be>
 800be7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800be82:	fa5f fb8b 	uxtb.w	fp, fp
 800be86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be8a:	d820      	bhi.n	800bece <_printf_float+0x18a>
 800be8c:	3901      	subs	r1, #1
 800be8e:	465a      	mov	r2, fp
 800be90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be94:	9109      	str	r1, [sp, #36]	; 0x24
 800be96:	f7ff ff17 	bl	800bcc8 <__exponent>
 800be9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be9c:	1813      	adds	r3, r2, r0
 800be9e:	2a01      	cmp	r2, #1
 800bea0:	4681      	mov	r9, r0
 800bea2:	6123      	str	r3, [r4, #16]
 800bea4:	dc02      	bgt.n	800beac <_printf_float+0x168>
 800bea6:	6822      	ldr	r2, [r4, #0]
 800bea8:	07d2      	lsls	r2, r2, #31
 800beaa:	d501      	bpl.n	800beb0 <_printf_float+0x16c>
 800beac:	3301      	adds	r3, #1
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d09c      	beq.n	800bdf2 <_printf_float+0xae>
 800beb8:	232d      	movs	r3, #45	; 0x2d
 800beba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bebe:	e798      	b.n	800bdf2 <_printf_float+0xae>
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	2a47      	cmp	r2, #71	; 0x47
 800bec4:	d1be      	bne.n	800be44 <_printf_float+0x100>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1bc      	bne.n	800be44 <_printf_float+0x100>
 800beca:	2301      	movs	r3, #1
 800becc:	e7b9      	b.n	800be42 <_printf_float+0xfe>
 800bece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bed2:	d118      	bne.n	800bf06 <_printf_float+0x1c2>
 800bed4:	2900      	cmp	r1, #0
 800bed6:	6863      	ldr	r3, [r4, #4]
 800bed8:	dd0b      	ble.n	800bef2 <_printf_float+0x1ae>
 800beda:	6121      	str	r1, [r4, #16]
 800bedc:	b913      	cbnz	r3, 800bee4 <_printf_float+0x1a0>
 800bede:	6822      	ldr	r2, [r4, #0]
 800bee0:	07d0      	lsls	r0, r2, #31
 800bee2:	d502      	bpl.n	800beea <_printf_float+0x1a6>
 800bee4:	3301      	adds	r3, #1
 800bee6:	440b      	add	r3, r1
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	65a1      	str	r1, [r4, #88]	; 0x58
 800beec:	f04f 0900 	mov.w	r9, #0
 800bef0:	e7de      	b.n	800beb0 <_printf_float+0x16c>
 800bef2:	b913      	cbnz	r3, 800befa <_printf_float+0x1b6>
 800bef4:	6822      	ldr	r2, [r4, #0]
 800bef6:	07d2      	lsls	r2, r2, #31
 800bef8:	d501      	bpl.n	800befe <_printf_float+0x1ba>
 800befa:	3302      	adds	r3, #2
 800befc:	e7f4      	b.n	800bee8 <_printf_float+0x1a4>
 800befe:	2301      	movs	r3, #1
 800bf00:	e7f2      	b.n	800bee8 <_printf_float+0x1a4>
 800bf02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	db05      	blt.n	800bf18 <_printf_float+0x1d4>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	6121      	str	r1, [r4, #16]
 800bf10:	07d8      	lsls	r0, r3, #31
 800bf12:	d5ea      	bpl.n	800beea <_printf_float+0x1a6>
 800bf14:	1c4b      	adds	r3, r1, #1
 800bf16:	e7e7      	b.n	800bee8 <_printf_float+0x1a4>
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	bfd4      	ite	le
 800bf1c:	f1c1 0202 	rsble	r2, r1, #2
 800bf20:	2201      	movgt	r2, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	e7e0      	b.n	800bee8 <_printf_float+0x1a4>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	055a      	lsls	r2, r3, #21
 800bf2a:	d407      	bmi.n	800bf3c <_printf_float+0x1f8>
 800bf2c:	6923      	ldr	r3, [r4, #16]
 800bf2e:	4642      	mov	r2, r8
 800bf30:	4631      	mov	r1, r6
 800bf32:	4628      	mov	r0, r5
 800bf34:	47b8      	blx	r7
 800bf36:	3001      	adds	r0, #1
 800bf38:	d12c      	bne.n	800bf94 <_printf_float+0x250>
 800bf3a:	e764      	b.n	800be06 <_printf_float+0xc2>
 800bf3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf40:	f240 80e0 	bls.w	800c104 <_printf_float+0x3c0>
 800bf44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f7f4 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d034      	beq.n	800bfbe <_printf_float+0x27a>
 800bf54:	4a37      	ldr	r2, [pc, #220]	; (800c034 <_printf_float+0x2f0>)
 800bf56:	2301      	movs	r3, #1
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b8      	blx	r7
 800bf5e:	3001      	adds	r0, #1
 800bf60:	f43f af51 	beq.w	800be06 <_printf_float+0xc2>
 800bf64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	db02      	blt.n	800bf72 <_printf_float+0x22e>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	07d8      	lsls	r0, r3, #31
 800bf70:	d510      	bpl.n	800bf94 <_printf_float+0x250>
 800bf72:	ee18 3a10 	vmov	r3, s16
 800bf76:	4652      	mov	r2, sl
 800bf78:	4631      	mov	r1, r6
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	47b8      	blx	r7
 800bf7e:	3001      	adds	r0, #1
 800bf80:	f43f af41 	beq.w	800be06 <_printf_float+0xc2>
 800bf84:	f04f 0800 	mov.w	r8, #0
 800bf88:	f104 091a 	add.w	r9, r4, #26
 800bf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	4543      	cmp	r3, r8
 800bf92:	dc09      	bgt.n	800bfa8 <_printf_float+0x264>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	079b      	lsls	r3, r3, #30
 800bf98:	f100 8105 	bmi.w	800c1a6 <_printf_float+0x462>
 800bf9c:	68e0      	ldr	r0, [r4, #12]
 800bf9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa0:	4298      	cmp	r0, r3
 800bfa2:	bfb8      	it	lt
 800bfa4:	4618      	movlt	r0, r3
 800bfa6:	e730      	b.n	800be0a <_printf_float+0xc6>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	464a      	mov	r2, r9
 800bfac:	4631      	mov	r1, r6
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	f43f af27 	beq.w	800be06 <_printf_float+0xc2>
 800bfb8:	f108 0801 	add.w	r8, r8, #1
 800bfbc:	e7e6      	b.n	800bf8c <_printf_float+0x248>
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dc39      	bgt.n	800c038 <_printf_float+0x2f4>
 800bfc4:	4a1b      	ldr	r2, [pc, #108]	; (800c034 <_printf_float+0x2f0>)
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4628      	mov	r0, r5
 800bfcc:	47b8      	blx	r7
 800bfce:	3001      	adds	r0, #1
 800bfd0:	f43f af19 	beq.w	800be06 <_printf_float+0xc2>
 800bfd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	d102      	bne.n	800bfe2 <_printf_float+0x29e>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	07d9      	lsls	r1, r3, #31
 800bfe0:	d5d8      	bpl.n	800bf94 <_printf_float+0x250>
 800bfe2:	ee18 3a10 	vmov	r3, s16
 800bfe6:	4652      	mov	r2, sl
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	f43f af09 	beq.w	800be06 <_printf_float+0xc2>
 800bff4:	f04f 0900 	mov.w	r9, #0
 800bff8:	f104 0a1a 	add.w	sl, r4, #26
 800bffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffe:	425b      	negs	r3, r3
 800c000:	454b      	cmp	r3, r9
 800c002:	dc01      	bgt.n	800c008 <_printf_float+0x2c4>
 800c004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c006:	e792      	b.n	800bf2e <_printf_float+0x1ea>
 800c008:	2301      	movs	r3, #1
 800c00a:	4652      	mov	r2, sl
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	f43f aef7 	beq.w	800be06 <_printf_float+0xc2>
 800c018:	f109 0901 	add.w	r9, r9, #1
 800c01c:	e7ee      	b.n	800bffc <_printf_float+0x2b8>
 800c01e:	bf00      	nop
 800c020:	7fefffff 	.word	0x7fefffff
 800c024:	0800f820 	.word	0x0800f820
 800c028:	0800f824 	.word	0x0800f824
 800c02c:	0800f82c 	.word	0x0800f82c
 800c030:	0800f828 	.word	0x0800f828
 800c034:	0800f830 	.word	0x0800f830
 800c038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c03a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c03c:	429a      	cmp	r2, r3
 800c03e:	bfa8      	it	ge
 800c040:	461a      	movge	r2, r3
 800c042:	2a00      	cmp	r2, #0
 800c044:	4691      	mov	r9, r2
 800c046:	dc37      	bgt.n	800c0b8 <_printf_float+0x374>
 800c048:	f04f 0b00 	mov.w	fp, #0
 800c04c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c050:	f104 021a 	add.w	r2, r4, #26
 800c054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c056:	9305      	str	r3, [sp, #20]
 800c058:	eba3 0309 	sub.w	r3, r3, r9
 800c05c:	455b      	cmp	r3, fp
 800c05e:	dc33      	bgt.n	800c0c8 <_printf_float+0x384>
 800c060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c064:	429a      	cmp	r2, r3
 800c066:	db3b      	blt.n	800c0e0 <_printf_float+0x39c>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	07da      	lsls	r2, r3, #31
 800c06c:	d438      	bmi.n	800c0e0 <_printf_float+0x39c>
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	9a05      	ldr	r2, [sp, #20]
 800c072:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c074:	1a9a      	subs	r2, r3, r2
 800c076:	eba3 0901 	sub.w	r9, r3, r1
 800c07a:	4591      	cmp	r9, r2
 800c07c:	bfa8      	it	ge
 800c07e:	4691      	movge	r9, r2
 800c080:	f1b9 0f00 	cmp.w	r9, #0
 800c084:	dc35      	bgt.n	800c0f2 <_printf_float+0x3ae>
 800c086:	f04f 0800 	mov.w	r8, #0
 800c08a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c08e:	f104 0a1a 	add.w	sl, r4, #26
 800c092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	eba3 0309 	sub.w	r3, r3, r9
 800c09c:	4543      	cmp	r3, r8
 800c09e:	f77f af79 	ble.w	800bf94 <_printf_float+0x250>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4652      	mov	r2, sl
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b8      	blx	r7
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f43f aeaa 	beq.w	800be06 <_printf_float+0xc2>
 800c0b2:	f108 0801 	add.w	r8, r8, #1
 800c0b6:	e7ec      	b.n	800c092 <_printf_float+0x34e>
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4642      	mov	r2, r8
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	d1c0      	bne.n	800c048 <_printf_float+0x304>
 800c0c6:	e69e      	b.n	800be06 <_printf_float+0xc2>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	9205      	str	r2, [sp, #20]
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f43f ae97 	beq.w	800be06 <_printf_float+0xc2>
 800c0d8:	9a05      	ldr	r2, [sp, #20]
 800c0da:	f10b 0b01 	add.w	fp, fp, #1
 800c0de:	e7b9      	b.n	800c054 <_printf_float+0x310>
 800c0e0:	ee18 3a10 	vmov	r3, s16
 800c0e4:	4652      	mov	r2, sl
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	47b8      	blx	r7
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d1be      	bne.n	800c06e <_printf_float+0x32a>
 800c0f0:	e689      	b.n	800be06 <_printf_float+0xc2>
 800c0f2:	9a05      	ldr	r2, [sp, #20]
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	4442      	add	r2, r8
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	47b8      	blx	r7
 800c0fe:	3001      	adds	r0, #1
 800c100:	d1c1      	bne.n	800c086 <_printf_float+0x342>
 800c102:	e680      	b.n	800be06 <_printf_float+0xc2>
 800c104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c106:	2a01      	cmp	r2, #1
 800c108:	dc01      	bgt.n	800c10e <_printf_float+0x3ca>
 800c10a:	07db      	lsls	r3, r3, #31
 800c10c:	d538      	bpl.n	800c180 <_printf_float+0x43c>
 800c10e:	2301      	movs	r3, #1
 800c110:	4642      	mov	r2, r8
 800c112:	4631      	mov	r1, r6
 800c114:	4628      	mov	r0, r5
 800c116:	47b8      	blx	r7
 800c118:	3001      	adds	r0, #1
 800c11a:	f43f ae74 	beq.w	800be06 <_printf_float+0xc2>
 800c11e:	ee18 3a10 	vmov	r3, s16
 800c122:	4652      	mov	r2, sl
 800c124:	4631      	mov	r1, r6
 800c126:	4628      	mov	r0, r5
 800c128:	47b8      	blx	r7
 800c12a:	3001      	adds	r0, #1
 800c12c:	f43f ae6b 	beq.w	800be06 <_printf_float+0xc2>
 800c130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c134:	2200      	movs	r2, #0
 800c136:	2300      	movs	r3, #0
 800c138:	f7f4 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c13c:	b9d8      	cbnz	r0, 800c176 <_printf_float+0x432>
 800c13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c140:	f108 0201 	add.w	r2, r8, #1
 800c144:	3b01      	subs	r3, #1
 800c146:	4631      	mov	r1, r6
 800c148:	4628      	mov	r0, r5
 800c14a:	47b8      	blx	r7
 800c14c:	3001      	adds	r0, #1
 800c14e:	d10e      	bne.n	800c16e <_printf_float+0x42a>
 800c150:	e659      	b.n	800be06 <_printf_float+0xc2>
 800c152:	2301      	movs	r3, #1
 800c154:	4652      	mov	r2, sl
 800c156:	4631      	mov	r1, r6
 800c158:	4628      	mov	r0, r5
 800c15a:	47b8      	blx	r7
 800c15c:	3001      	adds	r0, #1
 800c15e:	f43f ae52 	beq.w	800be06 <_printf_float+0xc2>
 800c162:	f108 0801 	add.w	r8, r8, #1
 800c166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c168:	3b01      	subs	r3, #1
 800c16a:	4543      	cmp	r3, r8
 800c16c:	dcf1      	bgt.n	800c152 <_printf_float+0x40e>
 800c16e:	464b      	mov	r3, r9
 800c170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c174:	e6dc      	b.n	800bf30 <_printf_float+0x1ec>
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	f104 0a1a 	add.w	sl, r4, #26
 800c17e:	e7f2      	b.n	800c166 <_printf_float+0x422>
 800c180:	2301      	movs	r3, #1
 800c182:	4642      	mov	r2, r8
 800c184:	e7df      	b.n	800c146 <_printf_float+0x402>
 800c186:	2301      	movs	r3, #1
 800c188:	464a      	mov	r2, r9
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	f43f ae38 	beq.w	800be06 <_printf_float+0xc2>
 800c196:	f108 0801 	add.w	r8, r8, #1
 800c19a:	68e3      	ldr	r3, [r4, #12]
 800c19c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c19e:	1a5b      	subs	r3, r3, r1
 800c1a0:	4543      	cmp	r3, r8
 800c1a2:	dcf0      	bgt.n	800c186 <_printf_float+0x442>
 800c1a4:	e6fa      	b.n	800bf9c <_printf_float+0x258>
 800c1a6:	f04f 0800 	mov.w	r8, #0
 800c1aa:	f104 0919 	add.w	r9, r4, #25
 800c1ae:	e7f4      	b.n	800c19a <_printf_float+0x456>

0800c1b0 <_printf_common>:
 800c1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b4:	4616      	mov	r6, r2
 800c1b6:	4699      	mov	r9, r3
 800c1b8:	688a      	ldr	r2, [r1, #8]
 800c1ba:	690b      	ldr	r3, [r1, #16]
 800c1bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	bfb8      	it	lt
 800c1c4:	4613      	movlt	r3, r2
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1cc:	4607      	mov	r7, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	b10a      	cbz	r2, 800c1d6 <_printf_common+0x26>
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	6033      	str	r3, [r6, #0]
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	0699      	lsls	r1, r3, #26
 800c1da:	bf42      	ittt	mi
 800c1dc:	6833      	ldrmi	r3, [r6, #0]
 800c1de:	3302      	addmi	r3, #2
 800c1e0:	6033      	strmi	r3, [r6, #0]
 800c1e2:	6825      	ldr	r5, [r4, #0]
 800c1e4:	f015 0506 	ands.w	r5, r5, #6
 800c1e8:	d106      	bne.n	800c1f8 <_printf_common+0x48>
 800c1ea:	f104 0a19 	add.w	sl, r4, #25
 800c1ee:	68e3      	ldr	r3, [r4, #12]
 800c1f0:	6832      	ldr	r2, [r6, #0]
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	42ab      	cmp	r3, r5
 800c1f6:	dc26      	bgt.n	800c246 <_printf_common+0x96>
 800c1f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1fc:	1e13      	subs	r3, r2, #0
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	bf18      	it	ne
 800c202:	2301      	movne	r3, #1
 800c204:	0692      	lsls	r2, r2, #26
 800c206:	d42b      	bmi.n	800c260 <_printf_common+0xb0>
 800c208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c20c:	4649      	mov	r1, r9
 800c20e:	4638      	mov	r0, r7
 800c210:	47c0      	blx	r8
 800c212:	3001      	adds	r0, #1
 800c214:	d01e      	beq.n	800c254 <_printf_common+0xa4>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	68e5      	ldr	r5, [r4, #12]
 800c21a:	6832      	ldr	r2, [r6, #0]
 800c21c:	f003 0306 	and.w	r3, r3, #6
 800c220:	2b04      	cmp	r3, #4
 800c222:	bf08      	it	eq
 800c224:	1aad      	subeq	r5, r5, r2
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	6922      	ldr	r2, [r4, #16]
 800c22a:	bf0c      	ite	eq
 800c22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c230:	2500      	movne	r5, #0
 800c232:	4293      	cmp	r3, r2
 800c234:	bfc4      	itt	gt
 800c236:	1a9b      	subgt	r3, r3, r2
 800c238:	18ed      	addgt	r5, r5, r3
 800c23a:	2600      	movs	r6, #0
 800c23c:	341a      	adds	r4, #26
 800c23e:	42b5      	cmp	r5, r6
 800c240:	d11a      	bne.n	800c278 <_printf_common+0xc8>
 800c242:	2000      	movs	r0, #0
 800c244:	e008      	b.n	800c258 <_printf_common+0xa8>
 800c246:	2301      	movs	r3, #1
 800c248:	4652      	mov	r2, sl
 800c24a:	4649      	mov	r1, r9
 800c24c:	4638      	mov	r0, r7
 800c24e:	47c0      	blx	r8
 800c250:	3001      	adds	r0, #1
 800c252:	d103      	bne.n	800c25c <_printf_common+0xac>
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25c:	3501      	adds	r5, #1
 800c25e:	e7c6      	b.n	800c1ee <_printf_common+0x3e>
 800c260:	18e1      	adds	r1, r4, r3
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	2030      	movs	r0, #48	; 0x30
 800c266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c26a:	4422      	add	r2, r4
 800c26c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c274:	3302      	adds	r3, #2
 800c276:	e7c7      	b.n	800c208 <_printf_common+0x58>
 800c278:	2301      	movs	r3, #1
 800c27a:	4622      	mov	r2, r4
 800c27c:	4649      	mov	r1, r9
 800c27e:	4638      	mov	r0, r7
 800c280:	47c0      	blx	r8
 800c282:	3001      	adds	r0, #1
 800c284:	d0e6      	beq.n	800c254 <_printf_common+0xa4>
 800c286:	3601      	adds	r6, #1
 800c288:	e7d9      	b.n	800c23e <_printf_common+0x8e>
	...

0800c28c <_printf_i>:
 800c28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c290:	7e0f      	ldrb	r7, [r1, #24]
 800c292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c294:	2f78      	cmp	r7, #120	; 0x78
 800c296:	4691      	mov	r9, r2
 800c298:	4680      	mov	r8, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	469a      	mov	sl, r3
 800c29e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2a2:	d807      	bhi.n	800c2b4 <_printf_i+0x28>
 800c2a4:	2f62      	cmp	r7, #98	; 0x62
 800c2a6:	d80a      	bhi.n	800c2be <_printf_i+0x32>
 800c2a8:	2f00      	cmp	r7, #0
 800c2aa:	f000 80d8 	beq.w	800c45e <_printf_i+0x1d2>
 800c2ae:	2f58      	cmp	r7, #88	; 0x58
 800c2b0:	f000 80a3 	beq.w	800c3fa <_printf_i+0x16e>
 800c2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2bc:	e03a      	b.n	800c334 <_printf_i+0xa8>
 800c2be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2c2:	2b15      	cmp	r3, #21
 800c2c4:	d8f6      	bhi.n	800c2b4 <_printf_i+0x28>
 800c2c6:	a101      	add	r1, pc, #4	; (adr r1, 800c2cc <_printf_i+0x40>)
 800c2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2cc:	0800c325 	.word	0x0800c325
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c2b5 	.word	0x0800c2b5
 800c2d8:	0800c2b5 	.word	0x0800c2b5
 800c2dc:	0800c2b5 	.word	0x0800c2b5
 800c2e0:	0800c2b5 	.word	0x0800c2b5
 800c2e4:	0800c339 	.word	0x0800c339
 800c2e8:	0800c2b5 	.word	0x0800c2b5
 800c2ec:	0800c2b5 	.word	0x0800c2b5
 800c2f0:	0800c2b5 	.word	0x0800c2b5
 800c2f4:	0800c2b5 	.word	0x0800c2b5
 800c2f8:	0800c445 	.word	0x0800c445
 800c2fc:	0800c369 	.word	0x0800c369
 800c300:	0800c427 	.word	0x0800c427
 800c304:	0800c2b5 	.word	0x0800c2b5
 800c308:	0800c2b5 	.word	0x0800c2b5
 800c30c:	0800c467 	.word	0x0800c467
 800c310:	0800c2b5 	.word	0x0800c2b5
 800c314:	0800c369 	.word	0x0800c369
 800c318:	0800c2b5 	.word	0x0800c2b5
 800c31c:	0800c2b5 	.word	0x0800c2b5
 800c320:	0800c42f 	.word	0x0800c42f
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	602a      	str	r2, [r5, #0]
 800c32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c334:	2301      	movs	r3, #1
 800c336:	e0a3      	b.n	800c480 <_printf_i+0x1f4>
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	6829      	ldr	r1, [r5, #0]
 800c33c:	0606      	lsls	r6, r0, #24
 800c33e:	f101 0304 	add.w	r3, r1, #4
 800c342:	d50a      	bpl.n	800c35a <_printf_i+0xce>
 800c344:	680e      	ldr	r6, [r1, #0]
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	2e00      	cmp	r6, #0
 800c34a:	da03      	bge.n	800c354 <_printf_i+0xc8>
 800c34c:	232d      	movs	r3, #45	; 0x2d
 800c34e:	4276      	negs	r6, r6
 800c350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c354:	485e      	ldr	r0, [pc, #376]	; (800c4d0 <_printf_i+0x244>)
 800c356:	230a      	movs	r3, #10
 800c358:	e019      	b.n	800c38e <_printf_i+0x102>
 800c35a:	680e      	ldr	r6, [r1, #0]
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c362:	bf18      	it	ne
 800c364:	b236      	sxthne	r6, r6
 800c366:	e7ef      	b.n	800c348 <_printf_i+0xbc>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	6820      	ldr	r0, [r4, #0]
 800c36c:	1d19      	adds	r1, r3, #4
 800c36e:	6029      	str	r1, [r5, #0]
 800c370:	0601      	lsls	r1, r0, #24
 800c372:	d501      	bpl.n	800c378 <_printf_i+0xec>
 800c374:	681e      	ldr	r6, [r3, #0]
 800c376:	e002      	b.n	800c37e <_printf_i+0xf2>
 800c378:	0646      	lsls	r6, r0, #25
 800c37a:	d5fb      	bpl.n	800c374 <_printf_i+0xe8>
 800c37c:	881e      	ldrh	r6, [r3, #0]
 800c37e:	4854      	ldr	r0, [pc, #336]	; (800c4d0 <_printf_i+0x244>)
 800c380:	2f6f      	cmp	r7, #111	; 0x6f
 800c382:	bf0c      	ite	eq
 800c384:	2308      	moveq	r3, #8
 800c386:	230a      	movne	r3, #10
 800c388:	2100      	movs	r1, #0
 800c38a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c38e:	6865      	ldr	r5, [r4, #4]
 800c390:	60a5      	str	r5, [r4, #8]
 800c392:	2d00      	cmp	r5, #0
 800c394:	bfa2      	ittt	ge
 800c396:	6821      	ldrge	r1, [r4, #0]
 800c398:	f021 0104 	bicge.w	r1, r1, #4
 800c39c:	6021      	strge	r1, [r4, #0]
 800c39e:	b90e      	cbnz	r6, 800c3a4 <_printf_i+0x118>
 800c3a0:	2d00      	cmp	r5, #0
 800c3a2:	d04d      	beq.n	800c440 <_printf_i+0x1b4>
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c3ae:	5dc7      	ldrb	r7, [r0, r7]
 800c3b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	42bb      	cmp	r3, r7
 800c3b8:	460e      	mov	r6, r1
 800c3ba:	d9f4      	bls.n	800c3a6 <_printf_i+0x11a>
 800c3bc:	2b08      	cmp	r3, #8
 800c3be:	d10b      	bne.n	800c3d8 <_printf_i+0x14c>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	07de      	lsls	r6, r3, #31
 800c3c4:	d508      	bpl.n	800c3d8 <_printf_i+0x14c>
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	6861      	ldr	r1, [r4, #4]
 800c3ca:	4299      	cmp	r1, r3
 800c3cc:	bfde      	ittt	le
 800c3ce:	2330      	movle	r3, #48	; 0x30
 800c3d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3d8:	1b52      	subs	r2, r2, r5
 800c3da:	6122      	str	r2, [r4, #16]
 800c3dc:	f8cd a000 	str.w	sl, [sp]
 800c3e0:	464b      	mov	r3, r9
 800c3e2:	aa03      	add	r2, sp, #12
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	f7ff fee2 	bl	800c1b0 <_printf_common>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	d14c      	bne.n	800c48a <_printf_i+0x1fe>
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f4:	b004      	add	sp, #16
 800c3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fa:	4835      	ldr	r0, [pc, #212]	; (800c4d0 <_printf_i+0x244>)
 800c3fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c400:	6829      	ldr	r1, [r5, #0]
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	f851 6b04 	ldr.w	r6, [r1], #4
 800c408:	6029      	str	r1, [r5, #0]
 800c40a:	061d      	lsls	r5, r3, #24
 800c40c:	d514      	bpl.n	800c438 <_printf_i+0x1ac>
 800c40e:	07df      	lsls	r7, r3, #31
 800c410:	bf44      	itt	mi
 800c412:	f043 0320 	orrmi.w	r3, r3, #32
 800c416:	6023      	strmi	r3, [r4, #0]
 800c418:	b91e      	cbnz	r6, 800c422 <_printf_i+0x196>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	f023 0320 	bic.w	r3, r3, #32
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	2310      	movs	r3, #16
 800c424:	e7b0      	b.n	800c388 <_printf_i+0xfc>
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	f043 0320 	orr.w	r3, r3, #32
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	2378      	movs	r3, #120	; 0x78
 800c430:	4828      	ldr	r0, [pc, #160]	; (800c4d4 <_printf_i+0x248>)
 800c432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c436:	e7e3      	b.n	800c400 <_printf_i+0x174>
 800c438:	0659      	lsls	r1, r3, #25
 800c43a:	bf48      	it	mi
 800c43c:	b2b6      	uxthmi	r6, r6
 800c43e:	e7e6      	b.n	800c40e <_printf_i+0x182>
 800c440:	4615      	mov	r5, r2
 800c442:	e7bb      	b.n	800c3bc <_printf_i+0x130>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	6826      	ldr	r6, [r4, #0]
 800c448:	6961      	ldr	r1, [r4, #20]
 800c44a:	1d18      	adds	r0, r3, #4
 800c44c:	6028      	str	r0, [r5, #0]
 800c44e:	0635      	lsls	r5, r6, #24
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	d501      	bpl.n	800c458 <_printf_i+0x1cc>
 800c454:	6019      	str	r1, [r3, #0]
 800c456:	e002      	b.n	800c45e <_printf_i+0x1d2>
 800c458:	0670      	lsls	r0, r6, #25
 800c45a:	d5fb      	bpl.n	800c454 <_printf_i+0x1c8>
 800c45c:	8019      	strh	r1, [r3, #0]
 800c45e:	2300      	movs	r3, #0
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	4615      	mov	r5, r2
 800c464:	e7ba      	b.n	800c3dc <_printf_i+0x150>
 800c466:	682b      	ldr	r3, [r5, #0]
 800c468:	1d1a      	adds	r2, r3, #4
 800c46a:	602a      	str	r2, [r5, #0]
 800c46c:	681d      	ldr	r5, [r3, #0]
 800c46e:	6862      	ldr	r2, [r4, #4]
 800c470:	2100      	movs	r1, #0
 800c472:	4628      	mov	r0, r5
 800c474:	f7f3 feb4 	bl	80001e0 <memchr>
 800c478:	b108      	cbz	r0, 800c47e <_printf_i+0x1f2>
 800c47a:	1b40      	subs	r0, r0, r5
 800c47c:	6060      	str	r0, [r4, #4]
 800c47e:	6863      	ldr	r3, [r4, #4]
 800c480:	6123      	str	r3, [r4, #16]
 800c482:	2300      	movs	r3, #0
 800c484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c488:	e7a8      	b.n	800c3dc <_printf_i+0x150>
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	462a      	mov	r2, r5
 800c48e:	4649      	mov	r1, r9
 800c490:	4640      	mov	r0, r8
 800c492:	47d0      	blx	sl
 800c494:	3001      	adds	r0, #1
 800c496:	d0ab      	beq.n	800c3f0 <_printf_i+0x164>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	079b      	lsls	r3, r3, #30
 800c49c:	d413      	bmi.n	800c4c6 <_printf_i+0x23a>
 800c49e:	68e0      	ldr	r0, [r4, #12]
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	4298      	cmp	r0, r3
 800c4a4:	bfb8      	it	lt
 800c4a6:	4618      	movlt	r0, r3
 800c4a8:	e7a4      	b.n	800c3f4 <_printf_i+0x168>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	4632      	mov	r2, r6
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	47d0      	blx	sl
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	d09b      	beq.n	800c3f0 <_printf_i+0x164>
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	68e3      	ldr	r3, [r4, #12]
 800c4bc:	9903      	ldr	r1, [sp, #12]
 800c4be:	1a5b      	subs	r3, r3, r1
 800c4c0:	42ab      	cmp	r3, r5
 800c4c2:	dcf2      	bgt.n	800c4aa <_printf_i+0x21e>
 800c4c4:	e7eb      	b.n	800c49e <_printf_i+0x212>
 800c4c6:	2500      	movs	r5, #0
 800c4c8:	f104 0619 	add.w	r6, r4, #25
 800c4cc:	e7f5      	b.n	800c4ba <_printf_i+0x22e>
 800c4ce:	bf00      	nop
 800c4d0:	0800f832 	.word	0x0800f832
 800c4d4:	0800f843 	.word	0x0800f843

0800c4d8 <siprintf>:
 800c4d8:	b40e      	push	{r1, r2, r3}
 800c4da:	b500      	push	{lr}
 800c4dc:	b09c      	sub	sp, #112	; 0x70
 800c4de:	ab1d      	add	r3, sp, #116	; 0x74
 800c4e0:	9002      	str	r0, [sp, #8]
 800c4e2:	9006      	str	r0, [sp, #24]
 800c4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4e8:	4809      	ldr	r0, [pc, #36]	; (800c510 <siprintf+0x38>)
 800c4ea:	9107      	str	r1, [sp, #28]
 800c4ec:	9104      	str	r1, [sp, #16]
 800c4ee:	4909      	ldr	r1, [pc, #36]	; (800c514 <siprintf+0x3c>)
 800c4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f4:	9105      	str	r1, [sp, #20]
 800c4f6:	6800      	ldr	r0, [r0, #0]
 800c4f8:	9301      	str	r3, [sp, #4]
 800c4fa:	a902      	add	r1, sp, #8
 800c4fc:	f001 fc8a 	bl	800de14 <_svfiprintf_r>
 800c500:	9b02      	ldr	r3, [sp, #8]
 800c502:	2200      	movs	r2, #0
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	b01c      	add	sp, #112	; 0x70
 800c508:	f85d eb04 	ldr.w	lr, [sp], #4
 800c50c:	b003      	add	sp, #12
 800c50e:	4770      	bx	lr
 800c510:	20000040 	.word	0x20000040
 800c514:	ffff0208 	.word	0xffff0208

0800c518 <strcpy>:
 800c518:	4603      	mov	r3, r0
 800c51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c51e:	f803 2b01 	strb.w	r2, [r3], #1
 800c522:	2a00      	cmp	r2, #0
 800c524:	d1f9      	bne.n	800c51a <strcpy+0x2>
 800c526:	4770      	bx	lr

0800c528 <strtok>:
 800c528:	4b16      	ldr	r3, [pc, #88]	; (800c584 <strtok+0x5c>)
 800c52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c52c:	681e      	ldr	r6, [r3, #0]
 800c52e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c530:	4605      	mov	r5, r0
 800c532:	b9fc      	cbnz	r4, 800c574 <strtok+0x4c>
 800c534:	2050      	movs	r0, #80	; 0x50
 800c536:	9101      	str	r1, [sp, #4]
 800c538:	f000 ff8e 	bl	800d458 <malloc>
 800c53c:	9901      	ldr	r1, [sp, #4]
 800c53e:	65b0      	str	r0, [r6, #88]	; 0x58
 800c540:	4602      	mov	r2, r0
 800c542:	b920      	cbnz	r0, 800c54e <strtok+0x26>
 800c544:	4b10      	ldr	r3, [pc, #64]	; (800c588 <strtok+0x60>)
 800c546:	4811      	ldr	r0, [pc, #68]	; (800c58c <strtok+0x64>)
 800c548:	2157      	movs	r1, #87	; 0x57
 800c54a:	f000 f8d5 	bl	800c6f8 <__assert_func>
 800c54e:	e9c0 4400 	strd	r4, r4, [r0]
 800c552:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c556:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c55a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c55e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c562:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c566:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c56a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c56e:	6184      	str	r4, [r0, #24]
 800c570:	7704      	strb	r4, [r0, #28]
 800c572:	6244      	str	r4, [r0, #36]	; 0x24
 800c574:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c576:	2301      	movs	r3, #1
 800c578:	4628      	mov	r0, r5
 800c57a:	b002      	add	sp, #8
 800c57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c580:	f000 b806 	b.w	800c590 <__strtok_r>
 800c584:	20000040 	.word	0x20000040
 800c588:	0800f854 	.word	0x0800f854
 800c58c:	0800f86b 	.word	0x0800f86b

0800c590 <__strtok_r>:
 800c590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c592:	b908      	cbnz	r0, 800c598 <__strtok_r+0x8>
 800c594:	6810      	ldr	r0, [r2, #0]
 800c596:	b188      	cbz	r0, 800c5bc <__strtok_r+0x2c>
 800c598:	4604      	mov	r4, r0
 800c59a:	4620      	mov	r0, r4
 800c59c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c5a0:	460f      	mov	r7, r1
 800c5a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c5a6:	b91e      	cbnz	r6, 800c5b0 <__strtok_r+0x20>
 800c5a8:	b965      	cbnz	r5, 800c5c4 <__strtok_r+0x34>
 800c5aa:	6015      	str	r5, [r2, #0]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	e005      	b.n	800c5bc <__strtok_r+0x2c>
 800c5b0:	42b5      	cmp	r5, r6
 800c5b2:	d1f6      	bne.n	800c5a2 <__strtok_r+0x12>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1f0      	bne.n	800c59a <__strtok_r+0xa>
 800c5b8:	6014      	str	r4, [r2, #0]
 800c5ba:	7003      	strb	r3, [r0, #0]
 800c5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5be:	461c      	mov	r4, r3
 800c5c0:	e00c      	b.n	800c5dc <__strtok_r+0x4c>
 800c5c2:	b915      	cbnz	r5, 800c5ca <__strtok_r+0x3a>
 800c5c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5c8:	460e      	mov	r6, r1
 800c5ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c5ce:	42ab      	cmp	r3, r5
 800c5d0:	d1f7      	bne.n	800c5c2 <__strtok_r+0x32>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0f3      	beq.n	800c5be <__strtok_r+0x2e>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c5dc:	6014      	str	r4, [r2, #0]
 800c5de:	e7ed      	b.n	800c5bc <__strtok_r+0x2c>

0800c5e0 <_strtol_l.constprop.0>:
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e6:	d001      	beq.n	800c5ec <_strtol_l.constprop.0+0xc>
 800c5e8:	2b24      	cmp	r3, #36	; 0x24
 800c5ea:	d906      	bls.n	800c5fa <_strtol_l.constprop.0+0x1a>
 800c5ec:	f7ff faca 	bl	800bb84 <__errno>
 800c5f0:	2316      	movs	r3, #22
 800c5f2:	6003      	str	r3, [r0, #0]
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c6e0 <_strtol_l.constprop.0+0x100>
 800c5fe:	460d      	mov	r5, r1
 800c600:	462e      	mov	r6, r5
 800c602:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c606:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c60a:	f017 0708 	ands.w	r7, r7, #8
 800c60e:	d1f7      	bne.n	800c600 <_strtol_l.constprop.0+0x20>
 800c610:	2c2d      	cmp	r4, #45	; 0x2d
 800c612:	d132      	bne.n	800c67a <_strtol_l.constprop.0+0x9a>
 800c614:	782c      	ldrb	r4, [r5, #0]
 800c616:	2701      	movs	r7, #1
 800c618:	1cb5      	adds	r5, r6, #2
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d05b      	beq.n	800c6d6 <_strtol_l.constprop.0+0xf6>
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d109      	bne.n	800c636 <_strtol_l.constprop.0+0x56>
 800c622:	2c30      	cmp	r4, #48	; 0x30
 800c624:	d107      	bne.n	800c636 <_strtol_l.constprop.0+0x56>
 800c626:	782c      	ldrb	r4, [r5, #0]
 800c628:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c62c:	2c58      	cmp	r4, #88	; 0x58
 800c62e:	d14d      	bne.n	800c6cc <_strtol_l.constprop.0+0xec>
 800c630:	786c      	ldrb	r4, [r5, #1]
 800c632:	2310      	movs	r3, #16
 800c634:	3502      	adds	r5, #2
 800c636:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c63a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c63e:	f04f 0c00 	mov.w	ip, #0
 800c642:	fbb8 f9f3 	udiv	r9, r8, r3
 800c646:	4666      	mov	r6, ip
 800c648:	fb03 8a19 	mls	sl, r3, r9, r8
 800c64c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c650:	f1be 0f09 	cmp.w	lr, #9
 800c654:	d816      	bhi.n	800c684 <_strtol_l.constprop.0+0xa4>
 800c656:	4674      	mov	r4, lr
 800c658:	42a3      	cmp	r3, r4
 800c65a:	dd24      	ble.n	800c6a6 <_strtol_l.constprop.0+0xc6>
 800c65c:	f1bc 0f00 	cmp.w	ip, #0
 800c660:	db1e      	blt.n	800c6a0 <_strtol_l.constprop.0+0xc0>
 800c662:	45b1      	cmp	r9, r6
 800c664:	d31c      	bcc.n	800c6a0 <_strtol_l.constprop.0+0xc0>
 800c666:	d101      	bne.n	800c66c <_strtol_l.constprop.0+0x8c>
 800c668:	45a2      	cmp	sl, r4
 800c66a:	db19      	blt.n	800c6a0 <_strtol_l.constprop.0+0xc0>
 800c66c:	fb06 4603 	mla	r6, r6, r3, r4
 800c670:	f04f 0c01 	mov.w	ip, #1
 800c674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c678:	e7e8      	b.n	800c64c <_strtol_l.constprop.0+0x6c>
 800c67a:	2c2b      	cmp	r4, #43	; 0x2b
 800c67c:	bf04      	itt	eq
 800c67e:	782c      	ldrbeq	r4, [r5, #0]
 800c680:	1cb5      	addeq	r5, r6, #2
 800c682:	e7ca      	b.n	800c61a <_strtol_l.constprop.0+0x3a>
 800c684:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c688:	f1be 0f19 	cmp.w	lr, #25
 800c68c:	d801      	bhi.n	800c692 <_strtol_l.constprop.0+0xb2>
 800c68e:	3c37      	subs	r4, #55	; 0x37
 800c690:	e7e2      	b.n	800c658 <_strtol_l.constprop.0+0x78>
 800c692:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c696:	f1be 0f19 	cmp.w	lr, #25
 800c69a:	d804      	bhi.n	800c6a6 <_strtol_l.constprop.0+0xc6>
 800c69c:	3c57      	subs	r4, #87	; 0x57
 800c69e:	e7db      	b.n	800c658 <_strtol_l.constprop.0+0x78>
 800c6a0:	f04f 3cff 	mov.w	ip, #4294967295
 800c6a4:	e7e6      	b.n	800c674 <_strtol_l.constprop.0+0x94>
 800c6a6:	f1bc 0f00 	cmp.w	ip, #0
 800c6aa:	da05      	bge.n	800c6b8 <_strtol_l.constprop.0+0xd8>
 800c6ac:	2322      	movs	r3, #34	; 0x22
 800c6ae:	6003      	str	r3, [r0, #0]
 800c6b0:	4646      	mov	r6, r8
 800c6b2:	b942      	cbnz	r2, 800c6c6 <_strtol_l.constprop.0+0xe6>
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	e79e      	b.n	800c5f6 <_strtol_l.constprop.0+0x16>
 800c6b8:	b107      	cbz	r7, 800c6bc <_strtol_l.constprop.0+0xdc>
 800c6ba:	4276      	negs	r6, r6
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	d0f9      	beq.n	800c6b4 <_strtol_l.constprop.0+0xd4>
 800c6c0:	f1bc 0f00 	cmp.w	ip, #0
 800c6c4:	d000      	beq.n	800c6c8 <_strtol_l.constprop.0+0xe8>
 800c6c6:	1e69      	subs	r1, r5, #1
 800c6c8:	6011      	str	r1, [r2, #0]
 800c6ca:	e7f3      	b.n	800c6b4 <_strtol_l.constprop.0+0xd4>
 800c6cc:	2430      	movs	r4, #48	; 0x30
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1b1      	bne.n	800c636 <_strtol_l.constprop.0+0x56>
 800c6d2:	2308      	movs	r3, #8
 800c6d4:	e7af      	b.n	800c636 <_strtol_l.constprop.0+0x56>
 800c6d6:	2c30      	cmp	r4, #48	; 0x30
 800c6d8:	d0a5      	beq.n	800c626 <_strtol_l.constprop.0+0x46>
 800c6da:	230a      	movs	r3, #10
 800c6dc:	e7ab      	b.n	800c636 <_strtol_l.constprop.0+0x56>
 800c6de:	bf00      	nop
 800c6e0:	0800f905 	.word	0x0800f905

0800c6e4 <strtol>:
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	460a      	mov	r2, r1
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	4802      	ldr	r0, [pc, #8]	; (800c6f4 <strtol+0x10>)
 800c6ec:	6800      	ldr	r0, [r0, #0]
 800c6ee:	f7ff bf77 	b.w	800c5e0 <_strtol_l.constprop.0>
 800c6f2:	bf00      	nop
 800c6f4:	20000040 	.word	0x20000040

0800c6f8 <__assert_func>:
 800c6f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6fa:	4614      	mov	r4, r2
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	4b09      	ldr	r3, [pc, #36]	; (800c724 <__assert_func+0x2c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4605      	mov	r5, r0
 800c704:	68d8      	ldr	r0, [r3, #12]
 800c706:	b14c      	cbz	r4, 800c71c <__assert_func+0x24>
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <__assert_func+0x30>)
 800c70a:	9100      	str	r1, [sp, #0]
 800c70c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c710:	4906      	ldr	r1, [pc, #24]	; (800c72c <__assert_func+0x34>)
 800c712:	462b      	mov	r3, r5
 800c714:	f000 fe8a 	bl	800d42c <fiprintf>
 800c718:	f001 fea6 	bl	800e468 <abort>
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <__assert_func+0x38>)
 800c71e:	461c      	mov	r4, r3
 800c720:	e7f3      	b.n	800c70a <__assert_func+0x12>
 800c722:	bf00      	nop
 800c724:	20000040 	.word	0x20000040
 800c728:	0800f8c8 	.word	0x0800f8c8
 800c72c:	0800f8d5 	.word	0x0800f8d5
 800c730:	0800f903 	.word	0x0800f903

0800c734 <quorem>:
 800c734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c738:	6903      	ldr	r3, [r0, #16]
 800c73a:	690c      	ldr	r4, [r1, #16]
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	4607      	mov	r7, r0
 800c740:	f2c0 8081 	blt.w	800c846 <quorem+0x112>
 800c744:	3c01      	subs	r4, #1
 800c746:	f101 0814 	add.w	r8, r1, #20
 800c74a:	f100 0514 	add.w	r5, r0, #20
 800c74e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c75c:	3301      	adds	r3, #1
 800c75e:	429a      	cmp	r2, r3
 800c760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c768:	fbb2 f6f3 	udiv	r6, r2, r3
 800c76c:	d331      	bcc.n	800c7d2 <quorem+0x9e>
 800c76e:	f04f 0e00 	mov.w	lr, #0
 800c772:	4640      	mov	r0, r8
 800c774:	46ac      	mov	ip, r5
 800c776:	46f2      	mov	sl, lr
 800c778:	f850 2b04 	ldr.w	r2, [r0], #4
 800c77c:	b293      	uxth	r3, r2
 800c77e:	fb06 e303 	mla	r3, r6, r3, lr
 800c782:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c786:	b29b      	uxth	r3, r3
 800c788:	ebaa 0303 	sub.w	r3, sl, r3
 800c78c:	f8dc a000 	ldr.w	sl, [ip]
 800c790:	0c12      	lsrs	r2, r2, #16
 800c792:	fa13 f38a 	uxtah	r3, r3, sl
 800c796:	fb06 e202 	mla	r2, r6, r2, lr
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	9b00      	ldr	r3, [sp, #0]
 800c79e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7a2:	b292      	uxth	r2, r2
 800c7a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c7a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800c7b0:	4581      	cmp	r9, r0
 800c7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800c7ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c7be:	d2db      	bcs.n	800c778 <quorem+0x44>
 800c7c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c7c4:	b92b      	cbnz	r3, 800c7d2 <quorem+0x9e>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	429d      	cmp	r5, r3
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	d32e      	bcc.n	800c82e <quorem+0xfa>
 800c7d0:	613c      	str	r4, [r7, #16]
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f001 f8ca 	bl	800d96c <__mcmp>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	db24      	blt.n	800c826 <quorem+0xf2>
 800c7dc:	3601      	adds	r6, #1
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f04f 0c00 	mov.w	ip, #0
 800c7e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c7e8:	f8d0 e000 	ldr.w	lr, [r0]
 800c7ec:	b293      	uxth	r3, r2
 800c7ee:	ebac 0303 	sub.w	r3, ip, r3
 800c7f2:	0c12      	lsrs	r2, r2, #16
 800c7f4:	fa13 f38e 	uxtah	r3, r3, lr
 800c7f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c800:	b29b      	uxth	r3, r3
 800c802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c806:	45c1      	cmp	r9, r8
 800c808:	f840 3b04 	str.w	r3, [r0], #4
 800c80c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c810:	d2e8      	bcs.n	800c7e4 <quorem+0xb0>
 800c812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c81a:	b922      	cbnz	r2, 800c826 <quorem+0xf2>
 800c81c:	3b04      	subs	r3, #4
 800c81e:	429d      	cmp	r5, r3
 800c820:	461a      	mov	r2, r3
 800c822:	d30a      	bcc.n	800c83a <quorem+0x106>
 800c824:	613c      	str	r4, [r7, #16]
 800c826:	4630      	mov	r0, r6
 800c828:	b003      	add	sp, #12
 800c82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	3b04      	subs	r3, #4
 800c832:	2a00      	cmp	r2, #0
 800c834:	d1cc      	bne.n	800c7d0 <quorem+0x9c>
 800c836:	3c01      	subs	r4, #1
 800c838:	e7c7      	b.n	800c7ca <quorem+0x96>
 800c83a:	6812      	ldr	r2, [r2, #0]
 800c83c:	3b04      	subs	r3, #4
 800c83e:	2a00      	cmp	r2, #0
 800c840:	d1f0      	bne.n	800c824 <quorem+0xf0>
 800c842:	3c01      	subs	r4, #1
 800c844:	e7eb      	b.n	800c81e <quorem+0xea>
 800c846:	2000      	movs	r0, #0
 800c848:	e7ee      	b.n	800c828 <quorem+0xf4>
 800c84a:	0000      	movs	r0, r0
 800c84c:	0000      	movs	r0, r0
	...

0800c850 <_dtoa_r>:
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	ed2d 8b04 	vpush	{d8-d9}
 800c858:	ec57 6b10 	vmov	r6, r7, d0
 800c85c:	b093      	sub	sp, #76	; 0x4c
 800c85e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c864:	9106      	str	r1, [sp, #24]
 800c866:	ee10 aa10 	vmov	sl, s0
 800c86a:	4604      	mov	r4, r0
 800c86c:	9209      	str	r2, [sp, #36]	; 0x24
 800c86e:	930c      	str	r3, [sp, #48]	; 0x30
 800c870:	46bb      	mov	fp, r7
 800c872:	b975      	cbnz	r5, 800c892 <_dtoa_r+0x42>
 800c874:	2010      	movs	r0, #16
 800c876:	f000 fdef 	bl	800d458 <malloc>
 800c87a:	4602      	mov	r2, r0
 800c87c:	6260      	str	r0, [r4, #36]	; 0x24
 800c87e:	b920      	cbnz	r0, 800c88a <_dtoa_r+0x3a>
 800c880:	4ba7      	ldr	r3, [pc, #668]	; (800cb20 <_dtoa_r+0x2d0>)
 800c882:	21ea      	movs	r1, #234	; 0xea
 800c884:	48a7      	ldr	r0, [pc, #668]	; (800cb24 <_dtoa_r+0x2d4>)
 800c886:	f7ff ff37 	bl	800c6f8 <__assert_func>
 800c88a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c88e:	6005      	str	r5, [r0, #0]
 800c890:	60c5      	str	r5, [r0, #12]
 800c892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c894:	6819      	ldr	r1, [r3, #0]
 800c896:	b151      	cbz	r1, 800c8ae <_dtoa_r+0x5e>
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	604a      	str	r2, [r1, #4]
 800c89c:	2301      	movs	r3, #1
 800c89e:	4093      	lsls	r3, r2
 800c8a0:	608b      	str	r3, [r1, #8]
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 fe20 	bl	800d4e8 <_Bfree>
 800c8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	1e3b      	subs	r3, r7, #0
 800c8b0:	bfaa      	itet	ge
 800c8b2:	2300      	movge	r3, #0
 800c8b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c8b8:	f8c8 3000 	strge.w	r3, [r8]
 800c8bc:	4b9a      	ldr	r3, [pc, #616]	; (800cb28 <_dtoa_r+0x2d8>)
 800c8be:	bfbc      	itt	lt
 800c8c0:	2201      	movlt	r2, #1
 800c8c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c8c6:	ea33 030b 	bics.w	r3, r3, fp
 800c8ca:	d11b      	bne.n	800c904 <_dtoa_r+0xb4>
 800c8cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c8d2:	6013      	str	r3, [r2, #0]
 800c8d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8d8:	4333      	orrs	r3, r6
 800c8da:	f000 8592 	beq.w	800d402 <_dtoa_r+0xbb2>
 800c8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8e0:	b963      	cbnz	r3, 800c8fc <_dtoa_r+0xac>
 800c8e2:	4b92      	ldr	r3, [pc, #584]	; (800cb2c <_dtoa_r+0x2dc>)
 800c8e4:	e022      	b.n	800c92c <_dtoa_r+0xdc>
 800c8e6:	4b92      	ldr	r3, [pc, #584]	; (800cb30 <_dtoa_r+0x2e0>)
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	9801      	ldr	r0, [sp, #4]
 800c8f2:	b013      	add	sp, #76	; 0x4c
 800c8f4:	ecbd 8b04 	vpop	{d8-d9}
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	4b8b      	ldr	r3, [pc, #556]	; (800cb2c <_dtoa_r+0x2dc>)
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	3303      	adds	r3, #3
 800c902:	e7f3      	b.n	800c8ec <_dtoa_r+0x9c>
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	4650      	mov	r0, sl
 800c90a:	4659      	mov	r1, fp
 800c90c:	f7f4 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c910:	ec4b ab19 	vmov	d9, sl, fp
 800c914:	4680      	mov	r8, r0
 800c916:	b158      	cbz	r0, 800c930 <_dtoa_r+0xe0>
 800c918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c91a:	2301      	movs	r3, #1
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 856b 	beq.w	800d3fc <_dtoa_r+0xbac>
 800c926:	4883      	ldr	r0, [pc, #524]	; (800cb34 <_dtoa_r+0x2e4>)
 800c928:	6018      	str	r0, [r3, #0]
 800c92a:	1e43      	subs	r3, r0, #1
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	e7df      	b.n	800c8f0 <_dtoa_r+0xa0>
 800c930:	ec4b ab10 	vmov	d0, sl, fp
 800c934:	aa10      	add	r2, sp, #64	; 0x40
 800c936:	a911      	add	r1, sp, #68	; 0x44
 800c938:	4620      	mov	r0, r4
 800c93a:	f001 f8bd 	bl	800dab8 <__d2b>
 800c93e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c942:	ee08 0a10 	vmov	s16, r0
 800c946:	2d00      	cmp	r5, #0
 800c948:	f000 8084 	beq.w	800ca54 <_dtoa_r+0x204>
 800c94c:	ee19 3a90 	vmov	r3, s19
 800c950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c954:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c958:	4656      	mov	r6, sl
 800c95a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c962:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c966:	4b74      	ldr	r3, [pc, #464]	; (800cb38 <_dtoa_r+0x2e8>)
 800c968:	2200      	movs	r2, #0
 800c96a:	4630      	mov	r0, r6
 800c96c:	4639      	mov	r1, r7
 800c96e:	f7f3 fc8b 	bl	8000288 <__aeabi_dsub>
 800c972:	a365      	add	r3, pc, #404	; (adr r3, 800cb08 <_dtoa_r+0x2b8>)
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f7f3 fe3e 	bl	80005f8 <__aeabi_dmul>
 800c97c:	a364      	add	r3, pc, #400	; (adr r3, 800cb10 <_dtoa_r+0x2c0>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	f7f3 fc83 	bl	800028c <__adddf3>
 800c986:	4606      	mov	r6, r0
 800c988:	4628      	mov	r0, r5
 800c98a:	460f      	mov	r7, r1
 800c98c:	f7f3 fdca 	bl	8000524 <__aeabi_i2d>
 800c990:	a361      	add	r3, pc, #388	; (adr r3, 800cb18 <_dtoa_r+0x2c8>)
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	f7f3 fe2f 	bl	80005f8 <__aeabi_dmul>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4630      	mov	r0, r6
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	f7f3 fc73 	bl	800028c <__adddf3>
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	f7f4 f8d5 	bl	8000b58 <__aeabi_d2iz>
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	9000      	str	r0, [sp, #0]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	f7f4 f890 	bl	8000adc <__aeabi_dcmplt>
 800c9bc:	b150      	cbz	r0, 800c9d4 <_dtoa_r+0x184>
 800c9be:	9800      	ldr	r0, [sp, #0]
 800c9c0:	f7f3 fdb0 	bl	8000524 <__aeabi_i2d>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	f7f4 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9cc:	b910      	cbnz	r0, 800c9d4 <_dtoa_r+0x184>
 800c9ce:	9b00      	ldr	r3, [sp, #0]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	2b16      	cmp	r3, #22
 800c9d8:	d85a      	bhi.n	800ca90 <_dtoa_r+0x240>
 800c9da:	9a00      	ldr	r2, [sp, #0]
 800c9dc:	4b57      	ldr	r3, [pc, #348]	; (800cb3c <_dtoa_r+0x2ec>)
 800c9de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	ec51 0b19 	vmov	r0, r1, d9
 800c9ea:	f7f4 f877 	bl	8000adc <__aeabi_dcmplt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d050      	beq.n	800ca94 <_dtoa_r+0x244>
 800c9f2:	9b00      	ldr	r3, [sp, #0]
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9fe:	1b5d      	subs	r5, r3, r5
 800ca00:	1e6b      	subs	r3, r5, #1
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	bf45      	ittet	mi
 800ca06:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca0a:	9304      	strmi	r3, [sp, #16]
 800ca0c:	2300      	movpl	r3, #0
 800ca0e:	2300      	movmi	r3, #0
 800ca10:	bf4c      	ite	mi
 800ca12:	9305      	strmi	r3, [sp, #20]
 800ca14:	9304      	strpl	r3, [sp, #16]
 800ca16:	9b00      	ldr	r3, [sp, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	db3d      	blt.n	800ca98 <_dtoa_r+0x248>
 800ca1c:	9b05      	ldr	r3, [sp, #20]
 800ca1e:	9a00      	ldr	r2, [sp, #0]
 800ca20:	920a      	str	r2, [sp, #40]	; 0x28
 800ca22:	4413      	add	r3, r2
 800ca24:	9305      	str	r3, [sp, #20]
 800ca26:	2300      	movs	r3, #0
 800ca28:	9307      	str	r3, [sp, #28]
 800ca2a:	9b06      	ldr	r3, [sp, #24]
 800ca2c:	2b09      	cmp	r3, #9
 800ca2e:	f200 8089 	bhi.w	800cb44 <_dtoa_r+0x2f4>
 800ca32:	2b05      	cmp	r3, #5
 800ca34:	bfc4      	itt	gt
 800ca36:	3b04      	subgt	r3, #4
 800ca38:	9306      	strgt	r3, [sp, #24]
 800ca3a:	9b06      	ldr	r3, [sp, #24]
 800ca3c:	f1a3 0302 	sub.w	r3, r3, #2
 800ca40:	bfcc      	ite	gt
 800ca42:	2500      	movgt	r5, #0
 800ca44:	2501      	movle	r5, #1
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	f200 8087 	bhi.w	800cb5a <_dtoa_r+0x30a>
 800ca4c:	e8df f003 	tbb	[pc, r3]
 800ca50:	59383a2d 	.word	0x59383a2d
 800ca54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ca58:	441d      	add	r5, r3
 800ca5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	bfc1      	itttt	gt
 800ca62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ca6a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ca6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ca72:	bfda      	itte	le
 800ca74:	f1c3 0320 	rsble	r3, r3, #32
 800ca78:	fa06 f003 	lslle.w	r0, r6, r3
 800ca7c:	4318      	orrgt	r0, r3
 800ca7e:	f7f3 fd41 	bl	8000504 <__aeabi_ui2d>
 800ca82:	2301      	movs	r3, #1
 800ca84:	4606      	mov	r6, r0
 800ca86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ca8a:	3d01      	subs	r5, #1
 800ca8c:	930e      	str	r3, [sp, #56]	; 0x38
 800ca8e:	e76a      	b.n	800c966 <_dtoa_r+0x116>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e7b2      	b.n	800c9fa <_dtoa_r+0x1aa>
 800ca94:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca96:	e7b1      	b.n	800c9fc <_dtoa_r+0x1ac>
 800ca98:	9b04      	ldr	r3, [sp, #16]
 800ca9a:	9a00      	ldr	r2, [sp, #0]
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	9304      	str	r3, [sp, #16]
 800caa0:	4253      	negs	r3, r2
 800caa2:	9307      	str	r3, [sp, #28]
 800caa4:	2300      	movs	r3, #0
 800caa6:	930a      	str	r3, [sp, #40]	; 0x28
 800caa8:	e7bf      	b.n	800ca2a <_dtoa_r+0x1da>
 800caaa:	2300      	movs	r3, #0
 800caac:	9308      	str	r3, [sp, #32]
 800caae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dc55      	bgt.n	800cb60 <_dtoa_r+0x310>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800caba:	461a      	mov	r2, r3
 800cabc:	9209      	str	r2, [sp, #36]	; 0x24
 800cabe:	e00c      	b.n	800cada <_dtoa_r+0x28a>
 800cac0:	2301      	movs	r3, #1
 800cac2:	e7f3      	b.n	800caac <_dtoa_r+0x25c>
 800cac4:	2300      	movs	r3, #0
 800cac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac8:	9308      	str	r3, [sp, #32]
 800caca:	9b00      	ldr	r3, [sp, #0]
 800cacc:	4413      	add	r3, r2
 800cace:	9302      	str	r3, [sp, #8]
 800cad0:	3301      	adds	r3, #1
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	bfb8      	it	lt
 800cad8:	2301      	movlt	r3, #1
 800cada:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cadc:	2200      	movs	r2, #0
 800cade:	6042      	str	r2, [r0, #4]
 800cae0:	2204      	movs	r2, #4
 800cae2:	f102 0614 	add.w	r6, r2, #20
 800cae6:	429e      	cmp	r6, r3
 800cae8:	6841      	ldr	r1, [r0, #4]
 800caea:	d93d      	bls.n	800cb68 <_dtoa_r+0x318>
 800caec:	4620      	mov	r0, r4
 800caee:	f000 fcbb 	bl	800d468 <_Balloc>
 800caf2:	9001      	str	r0, [sp, #4]
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d13b      	bne.n	800cb70 <_dtoa_r+0x320>
 800caf8:	4b11      	ldr	r3, [pc, #68]	; (800cb40 <_dtoa_r+0x2f0>)
 800cafa:	4602      	mov	r2, r0
 800cafc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb00:	e6c0      	b.n	800c884 <_dtoa_r+0x34>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e7df      	b.n	800cac6 <_dtoa_r+0x276>
 800cb06:	bf00      	nop
 800cb08:	636f4361 	.word	0x636f4361
 800cb0c:	3fd287a7 	.word	0x3fd287a7
 800cb10:	8b60c8b3 	.word	0x8b60c8b3
 800cb14:	3fc68a28 	.word	0x3fc68a28
 800cb18:	509f79fb 	.word	0x509f79fb
 800cb1c:	3fd34413 	.word	0x3fd34413
 800cb20:	0800f854 	.word	0x0800f854
 800cb24:	0800fa12 	.word	0x0800fa12
 800cb28:	7ff00000 	.word	0x7ff00000
 800cb2c:	0800fa0e 	.word	0x0800fa0e
 800cb30:	0800fa05 	.word	0x0800fa05
 800cb34:	0800f831 	.word	0x0800f831
 800cb38:	3ff80000 	.word	0x3ff80000
 800cb3c:	0800fb08 	.word	0x0800fb08
 800cb40:	0800fa6d 	.word	0x0800fa6d
 800cb44:	2501      	movs	r5, #1
 800cb46:	2300      	movs	r3, #0
 800cb48:	9306      	str	r3, [sp, #24]
 800cb4a:	9508      	str	r5, [sp, #32]
 800cb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	2312      	movs	r3, #18
 800cb58:	e7b0      	b.n	800cabc <_dtoa_r+0x26c>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	9308      	str	r3, [sp, #32]
 800cb5e:	e7f5      	b.n	800cb4c <_dtoa_r+0x2fc>
 800cb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb66:	e7b8      	b.n	800cada <_dtoa_r+0x28a>
 800cb68:	3101      	adds	r1, #1
 800cb6a:	6041      	str	r1, [r0, #4]
 800cb6c:	0052      	lsls	r2, r2, #1
 800cb6e:	e7b8      	b.n	800cae2 <_dtoa_r+0x292>
 800cb70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb72:	9a01      	ldr	r2, [sp, #4]
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	2b0e      	cmp	r3, #14
 800cb7a:	f200 809d 	bhi.w	800ccb8 <_dtoa_r+0x468>
 800cb7e:	2d00      	cmp	r5, #0
 800cb80:	f000 809a 	beq.w	800ccb8 <_dtoa_r+0x468>
 800cb84:	9b00      	ldr	r3, [sp, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	dd32      	ble.n	800cbf0 <_dtoa_r+0x3a0>
 800cb8a:	4ab7      	ldr	r2, [pc, #732]	; (800ce68 <_dtoa_r+0x618>)
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb98:	9b00      	ldr	r3, [sp, #0]
 800cb9a:	05d8      	lsls	r0, r3, #23
 800cb9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cba0:	d516      	bpl.n	800cbd0 <_dtoa_r+0x380>
 800cba2:	4bb2      	ldr	r3, [pc, #712]	; (800ce6c <_dtoa_r+0x61c>)
 800cba4:	ec51 0b19 	vmov	r0, r1, d9
 800cba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbac:	f7f3 fe4e 	bl	800084c <__aeabi_ddiv>
 800cbb0:	f007 070f 	and.w	r7, r7, #15
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	2503      	movs	r5, #3
 800cbba:	4eac      	ldr	r6, [pc, #688]	; (800ce6c <_dtoa_r+0x61c>)
 800cbbc:	b957      	cbnz	r7, 800cbd4 <_dtoa_r+0x384>
 800cbbe:	4642      	mov	r2, r8
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	f7f3 fe41 	bl	800084c <__aeabi_ddiv>
 800cbca:	4682      	mov	sl, r0
 800cbcc:	468b      	mov	fp, r1
 800cbce:	e028      	b.n	800cc22 <_dtoa_r+0x3d2>
 800cbd0:	2502      	movs	r5, #2
 800cbd2:	e7f2      	b.n	800cbba <_dtoa_r+0x36a>
 800cbd4:	07f9      	lsls	r1, r7, #31
 800cbd6:	d508      	bpl.n	800cbea <_dtoa_r+0x39a>
 800cbd8:	4640      	mov	r0, r8
 800cbda:	4649      	mov	r1, r9
 800cbdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbe0:	f7f3 fd0a 	bl	80005f8 <__aeabi_dmul>
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	4680      	mov	r8, r0
 800cbe8:	4689      	mov	r9, r1
 800cbea:	107f      	asrs	r7, r7, #1
 800cbec:	3608      	adds	r6, #8
 800cbee:	e7e5      	b.n	800cbbc <_dtoa_r+0x36c>
 800cbf0:	f000 809b 	beq.w	800cd2a <_dtoa_r+0x4da>
 800cbf4:	9b00      	ldr	r3, [sp, #0]
 800cbf6:	4f9d      	ldr	r7, [pc, #628]	; (800ce6c <_dtoa_r+0x61c>)
 800cbf8:	425e      	negs	r6, r3
 800cbfa:	4b9b      	ldr	r3, [pc, #620]	; (800ce68 <_dtoa_r+0x618>)
 800cbfc:	f006 020f 	and.w	r2, r6, #15
 800cc00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	ec51 0b19 	vmov	r0, r1, d9
 800cc0c:	f7f3 fcf4 	bl	80005f8 <__aeabi_dmul>
 800cc10:	1136      	asrs	r6, r6, #4
 800cc12:	4682      	mov	sl, r0
 800cc14:	468b      	mov	fp, r1
 800cc16:	2300      	movs	r3, #0
 800cc18:	2502      	movs	r5, #2
 800cc1a:	2e00      	cmp	r6, #0
 800cc1c:	d17a      	bne.n	800cd14 <_dtoa_r+0x4c4>
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1d3      	bne.n	800cbca <_dtoa_r+0x37a>
 800cc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 8082 	beq.w	800cd2e <_dtoa_r+0x4de>
 800cc2a:	4b91      	ldr	r3, [pc, #580]	; (800ce70 <_dtoa_r+0x620>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4650      	mov	r0, sl
 800cc30:	4659      	mov	r1, fp
 800cc32:	f7f3 ff53 	bl	8000adc <__aeabi_dcmplt>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d079      	beq.n	800cd2e <_dtoa_r+0x4de>
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d076      	beq.n	800cd2e <_dtoa_r+0x4de>
 800cc40:	9b02      	ldr	r3, [sp, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dd36      	ble.n	800ccb4 <_dtoa_r+0x464>
 800cc46:	9b00      	ldr	r3, [sp, #0]
 800cc48:	4650      	mov	r0, sl
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	1e5f      	subs	r7, r3, #1
 800cc4e:	2200      	movs	r2, #0
 800cc50:	4b88      	ldr	r3, [pc, #544]	; (800ce74 <_dtoa_r+0x624>)
 800cc52:	f7f3 fcd1 	bl	80005f8 <__aeabi_dmul>
 800cc56:	9e02      	ldr	r6, [sp, #8]
 800cc58:	4682      	mov	sl, r0
 800cc5a:	468b      	mov	fp, r1
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f7f3 fc60 	bl	8000524 <__aeabi_i2d>
 800cc64:	4652      	mov	r2, sl
 800cc66:	465b      	mov	r3, fp
 800cc68:	f7f3 fcc6 	bl	80005f8 <__aeabi_dmul>
 800cc6c:	4b82      	ldr	r3, [pc, #520]	; (800ce78 <_dtoa_r+0x628>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f7f3 fb0c 	bl	800028c <__adddf3>
 800cc74:	46d0      	mov	r8, sl
 800cc76:	46d9      	mov	r9, fp
 800cc78:	4682      	mov	sl, r0
 800cc7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	d158      	bne.n	800cd34 <_dtoa_r+0x4e4>
 800cc82:	4b7e      	ldr	r3, [pc, #504]	; (800ce7c <_dtoa_r+0x62c>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	4640      	mov	r0, r8
 800cc88:	4649      	mov	r1, r9
 800cc8a:	f7f3 fafd 	bl	8000288 <__aeabi_dsub>
 800cc8e:	4652      	mov	r2, sl
 800cc90:	465b      	mov	r3, fp
 800cc92:	4680      	mov	r8, r0
 800cc94:	4689      	mov	r9, r1
 800cc96:	f7f3 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f040 8295 	bne.w	800d1ca <_dtoa_r+0x97a>
 800cca0:	4652      	mov	r2, sl
 800cca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cca6:	4640      	mov	r0, r8
 800cca8:	4649      	mov	r1, r9
 800ccaa:	f7f3 ff17 	bl	8000adc <__aeabi_dcmplt>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f040 8289 	bne.w	800d1c6 <_dtoa_r+0x976>
 800ccb4:	ec5b ab19 	vmov	sl, fp, d9
 800ccb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f2c0 8148 	blt.w	800cf50 <_dtoa_r+0x700>
 800ccc0:	9a00      	ldr	r2, [sp, #0]
 800ccc2:	2a0e      	cmp	r2, #14
 800ccc4:	f300 8144 	bgt.w	800cf50 <_dtoa_r+0x700>
 800ccc8:	4b67      	ldr	r3, [pc, #412]	; (800ce68 <_dtoa_r+0x618>)
 800ccca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f280 80d5 	bge.w	800ce84 <_dtoa_r+0x634>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f300 80d1 	bgt.w	800ce84 <_dtoa_r+0x634>
 800cce2:	f040 826f 	bne.w	800d1c4 <_dtoa_r+0x974>
 800cce6:	4b65      	ldr	r3, [pc, #404]	; (800ce7c <_dtoa_r+0x62c>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	4640      	mov	r0, r8
 800ccec:	4649      	mov	r1, r9
 800ccee:	f7f3 fc83 	bl	80005f8 <__aeabi_dmul>
 800ccf2:	4652      	mov	r2, sl
 800ccf4:	465b      	mov	r3, fp
 800ccf6:	f7f3 ff05 	bl	8000b04 <__aeabi_dcmpge>
 800ccfa:	9e03      	ldr	r6, [sp, #12]
 800ccfc:	4637      	mov	r7, r6
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f040 8245 	bne.w	800d18e <_dtoa_r+0x93e>
 800cd04:	9d01      	ldr	r5, [sp, #4]
 800cd06:	2331      	movs	r3, #49	; 0x31
 800cd08:	f805 3b01 	strb.w	r3, [r5], #1
 800cd0c:	9b00      	ldr	r3, [sp, #0]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	e240      	b.n	800d196 <_dtoa_r+0x946>
 800cd14:	07f2      	lsls	r2, r6, #31
 800cd16:	d505      	bpl.n	800cd24 <_dtoa_r+0x4d4>
 800cd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd1c:	f7f3 fc6c 	bl	80005f8 <__aeabi_dmul>
 800cd20:	3501      	adds	r5, #1
 800cd22:	2301      	movs	r3, #1
 800cd24:	1076      	asrs	r6, r6, #1
 800cd26:	3708      	adds	r7, #8
 800cd28:	e777      	b.n	800cc1a <_dtoa_r+0x3ca>
 800cd2a:	2502      	movs	r5, #2
 800cd2c:	e779      	b.n	800cc22 <_dtoa_r+0x3d2>
 800cd2e:	9f00      	ldr	r7, [sp, #0]
 800cd30:	9e03      	ldr	r6, [sp, #12]
 800cd32:	e794      	b.n	800cc5e <_dtoa_r+0x40e>
 800cd34:	9901      	ldr	r1, [sp, #4]
 800cd36:	4b4c      	ldr	r3, [pc, #304]	; (800ce68 <_dtoa_r+0x618>)
 800cd38:	4431      	add	r1, r6
 800cd3a:	910d      	str	r1, [sp, #52]	; 0x34
 800cd3c:	9908      	ldr	r1, [sp, #32]
 800cd3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd46:	2900      	cmp	r1, #0
 800cd48:	d043      	beq.n	800cdd2 <_dtoa_r+0x582>
 800cd4a:	494d      	ldr	r1, [pc, #308]	; (800ce80 <_dtoa_r+0x630>)
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	f7f3 fd7d 	bl	800084c <__aeabi_ddiv>
 800cd52:	4652      	mov	r2, sl
 800cd54:	465b      	mov	r3, fp
 800cd56:	f7f3 fa97 	bl	8000288 <__aeabi_dsub>
 800cd5a:	9d01      	ldr	r5, [sp, #4]
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	468b      	mov	fp, r1
 800cd60:	4649      	mov	r1, r9
 800cd62:	4640      	mov	r0, r8
 800cd64:	f7f3 fef8 	bl	8000b58 <__aeabi_d2iz>
 800cd68:	4606      	mov	r6, r0
 800cd6a:	f7f3 fbdb 	bl	8000524 <__aeabi_i2d>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	4640      	mov	r0, r8
 800cd74:	4649      	mov	r1, r9
 800cd76:	f7f3 fa87 	bl	8000288 <__aeabi_dsub>
 800cd7a:	3630      	adds	r6, #48	; 0x30
 800cd7c:	f805 6b01 	strb.w	r6, [r5], #1
 800cd80:	4652      	mov	r2, sl
 800cd82:	465b      	mov	r3, fp
 800cd84:	4680      	mov	r8, r0
 800cd86:	4689      	mov	r9, r1
 800cd88:	f7f3 fea8 	bl	8000adc <__aeabi_dcmplt>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d163      	bne.n	800ce58 <_dtoa_r+0x608>
 800cd90:	4642      	mov	r2, r8
 800cd92:	464b      	mov	r3, r9
 800cd94:	4936      	ldr	r1, [pc, #216]	; (800ce70 <_dtoa_r+0x620>)
 800cd96:	2000      	movs	r0, #0
 800cd98:	f7f3 fa76 	bl	8000288 <__aeabi_dsub>
 800cd9c:	4652      	mov	r2, sl
 800cd9e:	465b      	mov	r3, fp
 800cda0:	f7f3 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f040 80b5 	bne.w	800cf14 <_dtoa_r+0x6c4>
 800cdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdac:	429d      	cmp	r5, r3
 800cdae:	d081      	beq.n	800ccb4 <_dtoa_r+0x464>
 800cdb0:	4b30      	ldr	r3, [pc, #192]	; (800ce74 <_dtoa_r+0x624>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4650      	mov	r0, sl
 800cdb6:	4659      	mov	r1, fp
 800cdb8:	f7f3 fc1e 	bl	80005f8 <__aeabi_dmul>
 800cdbc:	4b2d      	ldr	r3, [pc, #180]	; (800ce74 <_dtoa_r+0x624>)
 800cdbe:	4682      	mov	sl, r0
 800cdc0:	468b      	mov	fp, r1
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f7f3 fc16 	bl	80005f8 <__aeabi_dmul>
 800cdcc:	4680      	mov	r8, r0
 800cdce:	4689      	mov	r9, r1
 800cdd0:	e7c6      	b.n	800cd60 <_dtoa_r+0x510>
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	4659      	mov	r1, fp
 800cdd6:	f7f3 fc0f 	bl	80005f8 <__aeabi_dmul>
 800cdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cddc:	9d01      	ldr	r5, [sp, #4]
 800cdde:	930f      	str	r3, [sp, #60]	; 0x3c
 800cde0:	4682      	mov	sl, r0
 800cde2:	468b      	mov	fp, r1
 800cde4:	4649      	mov	r1, r9
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7f3 feb6 	bl	8000b58 <__aeabi_d2iz>
 800cdec:	4606      	mov	r6, r0
 800cdee:	f7f3 fb99 	bl	8000524 <__aeabi_i2d>
 800cdf2:	3630      	adds	r6, #48	; 0x30
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	f805 6b01 	strb.w	r6, [r5], #1
 800ce04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce06:	429d      	cmp	r5, r3
 800ce08:	4680      	mov	r8, r0
 800ce0a:	4689      	mov	r9, r1
 800ce0c:	f04f 0200 	mov.w	r2, #0
 800ce10:	d124      	bne.n	800ce5c <_dtoa_r+0x60c>
 800ce12:	4b1b      	ldr	r3, [pc, #108]	; (800ce80 <_dtoa_r+0x630>)
 800ce14:	4650      	mov	r0, sl
 800ce16:	4659      	mov	r1, fp
 800ce18:	f7f3 fa38 	bl	800028c <__adddf3>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4640      	mov	r0, r8
 800ce22:	4649      	mov	r1, r9
 800ce24:	f7f3 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d173      	bne.n	800cf14 <_dtoa_r+0x6c4>
 800ce2c:	4652      	mov	r2, sl
 800ce2e:	465b      	mov	r3, fp
 800ce30:	4913      	ldr	r1, [pc, #76]	; (800ce80 <_dtoa_r+0x630>)
 800ce32:	2000      	movs	r0, #0
 800ce34:	f7f3 fa28 	bl	8000288 <__aeabi_dsub>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f43f af35 	beq.w	800ccb4 <_dtoa_r+0x464>
 800ce4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce4c:	1e6b      	subs	r3, r5, #1
 800ce4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce54:	2b30      	cmp	r3, #48	; 0x30
 800ce56:	d0f8      	beq.n	800ce4a <_dtoa_r+0x5fa>
 800ce58:	9700      	str	r7, [sp, #0]
 800ce5a:	e049      	b.n	800cef0 <_dtoa_r+0x6a0>
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <_dtoa_r+0x624>)
 800ce5e:	f7f3 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ce62:	4680      	mov	r8, r0
 800ce64:	4689      	mov	r9, r1
 800ce66:	e7bd      	b.n	800cde4 <_dtoa_r+0x594>
 800ce68:	0800fb08 	.word	0x0800fb08
 800ce6c:	0800fae0 	.word	0x0800fae0
 800ce70:	3ff00000 	.word	0x3ff00000
 800ce74:	40240000 	.word	0x40240000
 800ce78:	401c0000 	.word	0x401c0000
 800ce7c:	40140000 	.word	0x40140000
 800ce80:	3fe00000 	.word	0x3fe00000
 800ce84:	9d01      	ldr	r5, [sp, #4]
 800ce86:	4656      	mov	r6, sl
 800ce88:	465f      	mov	r7, fp
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	464b      	mov	r3, r9
 800ce8e:	4630      	mov	r0, r6
 800ce90:	4639      	mov	r1, r7
 800ce92:	f7f3 fcdb 	bl	800084c <__aeabi_ddiv>
 800ce96:	f7f3 fe5f 	bl	8000b58 <__aeabi_d2iz>
 800ce9a:	4682      	mov	sl, r0
 800ce9c:	f7f3 fb42 	bl	8000524 <__aeabi_i2d>
 800cea0:	4642      	mov	r2, r8
 800cea2:	464b      	mov	r3, r9
 800cea4:	f7f3 fba8 	bl	80005f8 <__aeabi_dmul>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4630      	mov	r0, r6
 800ceae:	4639      	mov	r1, r7
 800ceb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ceb4:	f7f3 f9e8 	bl	8000288 <__aeabi_dsub>
 800ceb8:	f805 6b01 	strb.w	r6, [r5], #1
 800cebc:	9e01      	ldr	r6, [sp, #4]
 800cebe:	9f03      	ldr	r7, [sp, #12]
 800cec0:	1bae      	subs	r6, r5, r6
 800cec2:	42b7      	cmp	r7, r6
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	d135      	bne.n	800cf36 <_dtoa_r+0x6e6>
 800ceca:	f7f3 f9df 	bl	800028c <__adddf3>
 800cece:	4642      	mov	r2, r8
 800ced0:	464b      	mov	r3, r9
 800ced2:	4606      	mov	r6, r0
 800ced4:	460f      	mov	r7, r1
 800ced6:	f7f3 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 800ceda:	b9d0      	cbnz	r0, 800cf12 <_dtoa_r+0x6c2>
 800cedc:	4642      	mov	r2, r8
 800cede:	464b      	mov	r3, r9
 800cee0:	4630      	mov	r0, r6
 800cee2:	4639      	mov	r1, r7
 800cee4:	f7f3 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cee8:	b110      	cbz	r0, 800cef0 <_dtoa_r+0x6a0>
 800ceea:	f01a 0f01 	tst.w	sl, #1
 800ceee:	d110      	bne.n	800cf12 <_dtoa_r+0x6c2>
 800cef0:	4620      	mov	r0, r4
 800cef2:	ee18 1a10 	vmov	r1, s16
 800cef6:	f000 faf7 	bl	800d4e8 <_Bfree>
 800cefa:	2300      	movs	r3, #0
 800cefc:	9800      	ldr	r0, [sp, #0]
 800cefe:	702b      	strb	r3, [r5, #0]
 800cf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf02:	3001      	adds	r0, #1
 800cf04:	6018      	str	r0, [r3, #0]
 800cf06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f43f acf1 	beq.w	800c8f0 <_dtoa_r+0xa0>
 800cf0e:	601d      	str	r5, [r3, #0]
 800cf10:	e4ee      	b.n	800c8f0 <_dtoa_r+0xa0>
 800cf12:	9f00      	ldr	r7, [sp, #0]
 800cf14:	462b      	mov	r3, r5
 800cf16:	461d      	mov	r5, r3
 800cf18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf1c:	2a39      	cmp	r2, #57	; 0x39
 800cf1e:	d106      	bne.n	800cf2e <_dtoa_r+0x6de>
 800cf20:	9a01      	ldr	r2, [sp, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d1f7      	bne.n	800cf16 <_dtoa_r+0x6c6>
 800cf26:	9901      	ldr	r1, [sp, #4]
 800cf28:	2230      	movs	r2, #48	; 0x30
 800cf2a:	3701      	adds	r7, #1
 800cf2c:	700a      	strb	r2, [r1, #0]
 800cf2e:	781a      	ldrb	r2, [r3, #0]
 800cf30:	3201      	adds	r2, #1
 800cf32:	701a      	strb	r2, [r3, #0]
 800cf34:	e790      	b.n	800ce58 <_dtoa_r+0x608>
 800cf36:	4ba6      	ldr	r3, [pc, #664]	; (800d1d0 <_dtoa_r+0x980>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f7f3 fb5d 	bl	80005f8 <__aeabi_dmul>
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2300      	movs	r3, #0
 800cf42:	4606      	mov	r6, r0
 800cf44:	460f      	mov	r7, r1
 800cf46:	f7f3 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d09d      	beq.n	800ce8a <_dtoa_r+0x63a>
 800cf4e:	e7cf      	b.n	800cef0 <_dtoa_r+0x6a0>
 800cf50:	9a08      	ldr	r2, [sp, #32]
 800cf52:	2a00      	cmp	r2, #0
 800cf54:	f000 80d7 	beq.w	800d106 <_dtoa_r+0x8b6>
 800cf58:	9a06      	ldr	r2, [sp, #24]
 800cf5a:	2a01      	cmp	r2, #1
 800cf5c:	f300 80ba 	bgt.w	800d0d4 <_dtoa_r+0x884>
 800cf60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	f000 80b2 	beq.w	800d0cc <_dtoa_r+0x87c>
 800cf68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf6c:	9e07      	ldr	r6, [sp, #28]
 800cf6e:	9d04      	ldr	r5, [sp, #16]
 800cf70:	9a04      	ldr	r2, [sp, #16]
 800cf72:	441a      	add	r2, r3
 800cf74:	9204      	str	r2, [sp, #16]
 800cf76:	9a05      	ldr	r2, [sp, #20]
 800cf78:	2101      	movs	r1, #1
 800cf7a:	441a      	add	r2, r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	9205      	str	r2, [sp, #20]
 800cf80:	f000 fb6a 	bl	800d658 <__i2b>
 800cf84:	4607      	mov	r7, r0
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	dd0c      	ble.n	800cfa4 <_dtoa_r+0x754>
 800cf8a:	9b05      	ldr	r3, [sp, #20]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd09      	ble.n	800cfa4 <_dtoa_r+0x754>
 800cf90:	42ab      	cmp	r3, r5
 800cf92:	9a04      	ldr	r2, [sp, #16]
 800cf94:	bfa8      	it	ge
 800cf96:	462b      	movge	r3, r5
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	9204      	str	r2, [sp, #16]
 800cf9c:	9a05      	ldr	r2, [sp, #20]
 800cf9e:	1aed      	subs	r5, r5, r3
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	9305      	str	r3, [sp, #20]
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	b31b      	cbz	r3, 800cff0 <_dtoa_r+0x7a0>
 800cfa8:	9b08      	ldr	r3, [sp, #32]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 80af 	beq.w	800d10e <_dtoa_r+0x8be>
 800cfb0:	2e00      	cmp	r6, #0
 800cfb2:	dd13      	ble.n	800cfdc <_dtoa_r+0x78c>
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	4632      	mov	r2, r6
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fc0d 	bl	800d7d8 <__pow5mult>
 800cfbe:	ee18 2a10 	vmov	r2, s16
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fb5c 	bl	800d684 <__multiply>
 800cfcc:	ee18 1a10 	vmov	r1, s16
 800cfd0:	4680      	mov	r8, r0
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 fa88 	bl	800d4e8 <_Bfree>
 800cfd8:	ee08 8a10 	vmov	s16, r8
 800cfdc:	9b07      	ldr	r3, [sp, #28]
 800cfde:	1b9a      	subs	r2, r3, r6
 800cfe0:	d006      	beq.n	800cff0 <_dtoa_r+0x7a0>
 800cfe2:	ee18 1a10 	vmov	r1, s16
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 fbf6 	bl	800d7d8 <__pow5mult>
 800cfec:	ee08 0a10 	vmov	s16, r0
 800cff0:	2101      	movs	r1, #1
 800cff2:	4620      	mov	r0, r4
 800cff4:	f000 fb30 	bl	800d658 <__i2b>
 800cff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	4606      	mov	r6, r0
 800cffe:	f340 8088 	ble.w	800d112 <_dtoa_r+0x8c2>
 800d002:	461a      	mov	r2, r3
 800d004:	4601      	mov	r1, r0
 800d006:	4620      	mov	r0, r4
 800d008:	f000 fbe6 	bl	800d7d8 <__pow5mult>
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	4606      	mov	r6, r0
 800d012:	f340 8081 	ble.w	800d118 <_dtoa_r+0x8c8>
 800d016:	f04f 0800 	mov.w	r8, #0
 800d01a:	6933      	ldr	r3, [r6, #16]
 800d01c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d020:	6918      	ldr	r0, [r3, #16]
 800d022:	f000 fac9 	bl	800d5b8 <__hi0bits>
 800d026:	f1c0 0020 	rsb	r0, r0, #32
 800d02a:	9b05      	ldr	r3, [sp, #20]
 800d02c:	4418      	add	r0, r3
 800d02e:	f010 001f 	ands.w	r0, r0, #31
 800d032:	f000 8092 	beq.w	800d15a <_dtoa_r+0x90a>
 800d036:	f1c0 0320 	rsb	r3, r0, #32
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	f340 808a 	ble.w	800d154 <_dtoa_r+0x904>
 800d040:	f1c0 001c 	rsb	r0, r0, #28
 800d044:	9b04      	ldr	r3, [sp, #16]
 800d046:	4403      	add	r3, r0
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	4403      	add	r3, r0
 800d04e:	4405      	add	r5, r0
 800d050:	9305      	str	r3, [sp, #20]
 800d052:	9b04      	ldr	r3, [sp, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	dd07      	ble.n	800d068 <_dtoa_r+0x818>
 800d058:	ee18 1a10 	vmov	r1, s16
 800d05c:	461a      	mov	r2, r3
 800d05e:	4620      	mov	r0, r4
 800d060:	f000 fc14 	bl	800d88c <__lshift>
 800d064:	ee08 0a10 	vmov	s16, r0
 800d068:	9b05      	ldr	r3, [sp, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	dd05      	ble.n	800d07a <_dtoa_r+0x82a>
 800d06e:	4631      	mov	r1, r6
 800d070:	461a      	mov	r2, r3
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fc0a 	bl	800d88c <__lshift>
 800d078:	4606      	mov	r6, r0
 800d07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d06e      	beq.n	800d15e <_dtoa_r+0x90e>
 800d080:	ee18 0a10 	vmov	r0, s16
 800d084:	4631      	mov	r1, r6
 800d086:	f000 fc71 	bl	800d96c <__mcmp>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	da67      	bge.n	800d15e <_dtoa_r+0x90e>
 800d08e:	9b00      	ldr	r3, [sp, #0]
 800d090:	3b01      	subs	r3, #1
 800d092:	ee18 1a10 	vmov	r1, s16
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	220a      	movs	r2, #10
 800d09a:	2300      	movs	r3, #0
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 fa45 	bl	800d52c <__multadd>
 800d0a2:	9b08      	ldr	r3, [sp, #32]
 800d0a4:	ee08 0a10 	vmov	s16, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 81b1 	beq.w	800d410 <_dtoa_r+0xbc0>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	220a      	movs	r2, #10
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 fa39 	bl	800d52c <__multadd>
 800d0ba:	9b02      	ldr	r3, [sp, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	4607      	mov	r7, r0
 800d0c0:	f300 808e 	bgt.w	800d1e0 <_dtoa_r+0x990>
 800d0c4:	9b06      	ldr	r3, [sp, #24]
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	dc51      	bgt.n	800d16e <_dtoa_r+0x91e>
 800d0ca:	e089      	b.n	800d1e0 <_dtoa_r+0x990>
 800d0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0d2:	e74b      	b.n	800cf6c <_dtoa_r+0x71c>
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	1e5e      	subs	r6, r3, #1
 800d0d8:	9b07      	ldr	r3, [sp, #28]
 800d0da:	42b3      	cmp	r3, r6
 800d0dc:	bfbf      	itttt	lt
 800d0de:	9b07      	ldrlt	r3, [sp, #28]
 800d0e0:	9607      	strlt	r6, [sp, #28]
 800d0e2:	1af2      	sublt	r2, r6, r3
 800d0e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d0e6:	bfb6      	itet	lt
 800d0e8:	189b      	addlt	r3, r3, r2
 800d0ea:	1b9e      	subge	r6, r3, r6
 800d0ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d0ee:	9b03      	ldr	r3, [sp, #12]
 800d0f0:	bfb8      	it	lt
 800d0f2:	2600      	movlt	r6, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfb7      	itett	lt
 800d0f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d0fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d100:	1a9d      	sublt	r5, r3, r2
 800d102:	2300      	movlt	r3, #0
 800d104:	e734      	b.n	800cf70 <_dtoa_r+0x720>
 800d106:	9e07      	ldr	r6, [sp, #28]
 800d108:	9d04      	ldr	r5, [sp, #16]
 800d10a:	9f08      	ldr	r7, [sp, #32]
 800d10c:	e73b      	b.n	800cf86 <_dtoa_r+0x736>
 800d10e:	9a07      	ldr	r2, [sp, #28]
 800d110:	e767      	b.n	800cfe2 <_dtoa_r+0x792>
 800d112:	9b06      	ldr	r3, [sp, #24]
 800d114:	2b01      	cmp	r3, #1
 800d116:	dc18      	bgt.n	800d14a <_dtoa_r+0x8fa>
 800d118:	f1ba 0f00 	cmp.w	sl, #0
 800d11c:	d115      	bne.n	800d14a <_dtoa_r+0x8fa>
 800d11e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d122:	b993      	cbnz	r3, 800d14a <_dtoa_r+0x8fa>
 800d124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d128:	0d1b      	lsrs	r3, r3, #20
 800d12a:	051b      	lsls	r3, r3, #20
 800d12c:	b183      	cbz	r3, 800d150 <_dtoa_r+0x900>
 800d12e:	9b04      	ldr	r3, [sp, #16]
 800d130:	3301      	adds	r3, #1
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	9b05      	ldr	r3, [sp, #20]
 800d136:	3301      	adds	r3, #1
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	f04f 0801 	mov.w	r8, #1
 800d13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d140:	2b00      	cmp	r3, #0
 800d142:	f47f af6a 	bne.w	800d01a <_dtoa_r+0x7ca>
 800d146:	2001      	movs	r0, #1
 800d148:	e76f      	b.n	800d02a <_dtoa_r+0x7da>
 800d14a:	f04f 0800 	mov.w	r8, #0
 800d14e:	e7f6      	b.n	800d13e <_dtoa_r+0x8ee>
 800d150:	4698      	mov	r8, r3
 800d152:	e7f4      	b.n	800d13e <_dtoa_r+0x8ee>
 800d154:	f43f af7d 	beq.w	800d052 <_dtoa_r+0x802>
 800d158:	4618      	mov	r0, r3
 800d15a:	301c      	adds	r0, #28
 800d15c:	e772      	b.n	800d044 <_dtoa_r+0x7f4>
 800d15e:	9b03      	ldr	r3, [sp, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	dc37      	bgt.n	800d1d4 <_dtoa_r+0x984>
 800d164:	9b06      	ldr	r3, [sp, #24]
 800d166:	2b02      	cmp	r3, #2
 800d168:	dd34      	ble.n	800d1d4 <_dtoa_r+0x984>
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	9302      	str	r3, [sp, #8]
 800d16e:	9b02      	ldr	r3, [sp, #8]
 800d170:	b96b      	cbnz	r3, 800d18e <_dtoa_r+0x93e>
 800d172:	4631      	mov	r1, r6
 800d174:	2205      	movs	r2, #5
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f9d8 	bl	800d52c <__multadd>
 800d17c:	4601      	mov	r1, r0
 800d17e:	4606      	mov	r6, r0
 800d180:	ee18 0a10 	vmov	r0, s16
 800d184:	f000 fbf2 	bl	800d96c <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	f73f adbb 	bgt.w	800cd04 <_dtoa_r+0x4b4>
 800d18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d190:	9d01      	ldr	r5, [sp, #4]
 800d192:	43db      	mvns	r3, r3
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	f04f 0800 	mov.w	r8, #0
 800d19a:	4631      	mov	r1, r6
 800d19c:	4620      	mov	r0, r4
 800d19e:	f000 f9a3 	bl	800d4e8 <_Bfree>
 800d1a2:	2f00      	cmp	r7, #0
 800d1a4:	f43f aea4 	beq.w	800cef0 <_dtoa_r+0x6a0>
 800d1a8:	f1b8 0f00 	cmp.w	r8, #0
 800d1ac:	d005      	beq.n	800d1ba <_dtoa_r+0x96a>
 800d1ae:	45b8      	cmp	r8, r7
 800d1b0:	d003      	beq.n	800d1ba <_dtoa_r+0x96a>
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 f997 	bl	800d4e8 <_Bfree>
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f000 f993 	bl	800d4e8 <_Bfree>
 800d1c2:	e695      	b.n	800cef0 <_dtoa_r+0x6a0>
 800d1c4:	2600      	movs	r6, #0
 800d1c6:	4637      	mov	r7, r6
 800d1c8:	e7e1      	b.n	800d18e <_dtoa_r+0x93e>
 800d1ca:	9700      	str	r7, [sp, #0]
 800d1cc:	4637      	mov	r7, r6
 800d1ce:	e599      	b.n	800cd04 <_dtoa_r+0x4b4>
 800d1d0:	40240000 	.word	0x40240000
 800d1d4:	9b08      	ldr	r3, [sp, #32]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 80ca 	beq.w	800d370 <_dtoa_r+0xb20>
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	9302      	str	r3, [sp, #8]
 800d1e0:	2d00      	cmp	r5, #0
 800d1e2:	dd05      	ble.n	800d1f0 <_dtoa_r+0x9a0>
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	462a      	mov	r2, r5
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fb4f 	bl	800d88c <__lshift>
 800d1ee:	4607      	mov	r7, r0
 800d1f0:	f1b8 0f00 	cmp.w	r8, #0
 800d1f4:	d05b      	beq.n	800d2ae <_dtoa_r+0xa5e>
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f000 f935 	bl	800d468 <_Balloc>
 800d1fe:	4605      	mov	r5, r0
 800d200:	b928      	cbnz	r0, 800d20e <_dtoa_r+0x9be>
 800d202:	4b87      	ldr	r3, [pc, #540]	; (800d420 <_dtoa_r+0xbd0>)
 800d204:	4602      	mov	r2, r0
 800d206:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d20a:	f7ff bb3b 	b.w	800c884 <_dtoa_r+0x34>
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	3202      	adds	r2, #2
 800d212:	0092      	lsls	r2, r2, #2
 800d214:	f107 010c 	add.w	r1, r7, #12
 800d218:	300c      	adds	r0, #12
 800d21a:	f7fe fcdd 	bl	800bbd8 <memcpy>
 800d21e:	2201      	movs	r2, #1
 800d220:	4629      	mov	r1, r5
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fb32 	bl	800d88c <__lshift>
 800d228:	9b01      	ldr	r3, [sp, #4]
 800d22a:	f103 0901 	add.w	r9, r3, #1
 800d22e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d232:	4413      	add	r3, r2
 800d234:	9305      	str	r3, [sp, #20]
 800d236:	f00a 0301 	and.w	r3, sl, #1
 800d23a:	46b8      	mov	r8, r7
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	4607      	mov	r7, r0
 800d240:	4631      	mov	r1, r6
 800d242:	ee18 0a10 	vmov	r0, s16
 800d246:	f7ff fa75 	bl	800c734 <quorem>
 800d24a:	4641      	mov	r1, r8
 800d24c:	9002      	str	r0, [sp, #8]
 800d24e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d252:	ee18 0a10 	vmov	r0, s16
 800d256:	f000 fb89 	bl	800d96c <__mcmp>
 800d25a:	463a      	mov	r2, r7
 800d25c:	9003      	str	r0, [sp, #12]
 800d25e:	4631      	mov	r1, r6
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fb9f 	bl	800d9a4 <__mdiff>
 800d266:	68c2      	ldr	r2, [r0, #12]
 800d268:	f109 3bff 	add.w	fp, r9, #4294967295
 800d26c:	4605      	mov	r5, r0
 800d26e:	bb02      	cbnz	r2, 800d2b2 <_dtoa_r+0xa62>
 800d270:	4601      	mov	r1, r0
 800d272:	ee18 0a10 	vmov	r0, s16
 800d276:	f000 fb79 	bl	800d96c <__mcmp>
 800d27a:	4602      	mov	r2, r0
 800d27c:	4629      	mov	r1, r5
 800d27e:	4620      	mov	r0, r4
 800d280:	9207      	str	r2, [sp, #28]
 800d282:	f000 f931 	bl	800d4e8 <_Bfree>
 800d286:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d28a:	ea43 0102 	orr.w	r1, r3, r2
 800d28e:	9b04      	ldr	r3, [sp, #16]
 800d290:	430b      	orrs	r3, r1
 800d292:	464d      	mov	r5, r9
 800d294:	d10f      	bne.n	800d2b6 <_dtoa_r+0xa66>
 800d296:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d29a:	d02a      	beq.n	800d2f2 <_dtoa_r+0xaa2>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	dd02      	ble.n	800d2a8 <_dtoa_r+0xa58>
 800d2a2:	9b02      	ldr	r3, [sp, #8]
 800d2a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d2a8:	f88b a000 	strb.w	sl, [fp]
 800d2ac:	e775      	b.n	800d19a <_dtoa_r+0x94a>
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	e7ba      	b.n	800d228 <_dtoa_r+0x9d8>
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	e7e2      	b.n	800d27c <_dtoa_r+0xa2c>
 800d2b6:	9b03      	ldr	r3, [sp, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	db04      	blt.n	800d2c6 <_dtoa_r+0xa76>
 800d2bc:	9906      	ldr	r1, [sp, #24]
 800d2be:	430b      	orrs	r3, r1
 800d2c0:	9904      	ldr	r1, [sp, #16]
 800d2c2:	430b      	orrs	r3, r1
 800d2c4:	d122      	bne.n	800d30c <_dtoa_r+0xabc>
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	ddee      	ble.n	800d2a8 <_dtoa_r+0xa58>
 800d2ca:	ee18 1a10 	vmov	r1, s16
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fadb 	bl	800d88c <__lshift>
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	ee08 0a10 	vmov	s16, r0
 800d2dc:	f000 fb46 	bl	800d96c <__mcmp>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	dc03      	bgt.n	800d2ec <_dtoa_r+0xa9c>
 800d2e4:	d1e0      	bne.n	800d2a8 <_dtoa_r+0xa58>
 800d2e6:	f01a 0f01 	tst.w	sl, #1
 800d2ea:	d0dd      	beq.n	800d2a8 <_dtoa_r+0xa58>
 800d2ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d2f0:	d1d7      	bne.n	800d2a2 <_dtoa_r+0xa52>
 800d2f2:	2339      	movs	r3, #57	; 0x39
 800d2f4:	f88b 3000 	strb.w	r3, [fp]
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	461d      	mov	r5, r3
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d302:	2a39      	cmp	r2, #57	; 0x39
 800d304:	d071      	beq.n	800d3ea <_dtoa_r+0xb9a>
 800d306:	3201      	adds	r2, #1
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	e746      	b.n	800d19a <_dtoa_r+0x94a>
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	dd07      	ble.n	800d320 <_dtoa_r+0xad0>
 800d310:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d314:	d0ed      	beq.n	800d2f2 <_dtoa_r+0xaa2>
 800d316:	f10a 0301 	add.w	r3, sl, #1
 800d31a:	f88b 3000 	strb.w	r3, [fp]
 800d31e:	e73c      	b.n	800d19a <_dtoa_r+0x94a>
 800d320:	9b05      	ldr	r3, [sp, #20]
 800d322:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d326:	4599      	cmp	r9, r3
 800d328:	d047      	beq.n	800d3ba <_dtoa_r+0xb6a>
 800d32a:	ee18 1a10 	vmov	r1, s16
 800d32e:	2300      	movs	r3, #0
 800d330:	220a      	movs	r2, #10
 800d332:	4620      	mov	r0, r4
 800d334:	f000 f8fa 	bl	800d52c <__multadd>
 800d338:	45b8      	cmp	r8, r7
 800d33a:	ee08 0a10 	vmov	s16, r0
 800d33e:	f04f 0300 	mov.w	r3, #0
 800d342:	f04f 020a 	mov.w	r2, #10
 800d346:	4641      	mov	r1, r8
 800d348:	4620      	mov	r0, r4
 800d34a:	d106      	bne.n	800d35a <_dtoa_r+0xb0a>
 800d34c:	f000 f8ee 	bl	800d52c <__multadd>
 800d350:	4680      	mov	r8, r0
 800d352:	4607      	mov	r7, r0
 800d354:	f109 0901 	add.w	r9, r9, #1
 800d358:	e772      	b.n	800d240 <_dtoa_r+0x9f0>
 800d35a:	f000 f8e7 	bl	800d52c <__multadd>
 800d35e:	4639      	mov	r1, r7
 800d360:	4680      	mov	r8, r0
 800d362:	2300      	movs	r3, #0
 800d364:	220a      	movs	r2, #10
 800d366:	4620      	mov	r0, r4
 800d368:	f000 f8e0 	bl	800d52c <__multadd>
 800d36c:	4607      	mov	r7, r0
 800d36e:	e7f1      	b.n	800d354 <_dtoa_r+0xb04>
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	9302      	str	r3, [sp, #8]
 800d374:	9d01      	ldr	r5, [sp, #4]
 800d376:	ee18 0a10 	vmov	r0, s16
 800d37a:	4631      	mov	r1, r6
 800d37c:	f7ff f9da 	bl	800c734 <quorem>
 800d380:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	f805 ab01 	strb.w	sl, [r5], #1
 800d38a:	1aea      	subs	r2, r5, r3
 800d38c:	9b02      	ldr	r3, [sp, #8]
 800d38e:	4293      	cmp	r3, r2
 800d390:	dd09      	ble.n	800d3a6 <_dtoa_r+0xb56>
 800d392:	ee18 1a10 	vmov	r1, s16
 800d396:	2300      	movs	r3, #0
 800d398:	220a      	movs	r2, #10
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f8c6 	bl	800d52c <__multadd>
 800d3a0:	ee08 0a10 	vmov	s16, r0
 800d3a4:	e7e7      	b.n	800d376 <_dtoa_r+0xb26>
 800d3a6:	9b02      	ldr	r3, [sp, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	bfc8      	it	gt
 800d3ac:	461d      	movgt	r5, r3
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	bfd8      	it	le
 800d3b2:	2501      	movle	r5, #1
 800d3b4:	441d      	add	r5, r3
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	ee18 1a10 	vmov	r1, s16
 800d3be:	2201      	movs	r2, #1
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 fa63 	bl	800d88c <__lshift>
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	ee08 0a10 	vmov	s16, r0
 800d3cc:	f000 face 	bl	800d96c <__mcmp>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	dc91      	bgt.n	800d2f8 <_dtoa_r+0xaa8>
 800d3d4:	d102      	bne.n	800d3dc <_dtoa_r+0xb8c>
 800d3d6:	f01a 0f01 	tst.w	sl, #1
 800d3da:	d18d      	bne.n	800d2f8 <_dtoa_r+0xaa8>
 800d3dc:	462b      	mov	r3, r5
 800d3de:	461d      	mov	r5, r3
 800d3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3e4:	2a30      	cmp	r2, #48	; 0x30
 800d3e6:	d0fa      	beq.n	800d3de <_dtoa_r+0xb8e>
 800d3e8:	e6d7      	b.n	800d19a <_dtoa_r+0x94a>
 800d3ea:	9a01      	ldr	r2, [sp, #4]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d184      	bne.n	800d2fa <_dtoa_r+0xaaa>
 800d3f0:	9b00      	ldr	r3, [sp, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	2331      	movs	r3, #49	; 0x31
 800d3f8:	7013      	strb	r3, [r2, #0]
 800d3fa:	e6ce      	b.n	800d19a <_dtoa_r+0x94a>
 800d3fc:	4b09      	ldr	r3, [pc, #36]	; (800d424 <_dtoa_r+0xbd4>)
 800d3fe:	f7ff ba95 	b.w	800c92c <_dtoa_r+0xdc>
 800d402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d404:	2b00      	cmp	r3, #0
 800d406:	f47f aa6e 	bne.w	800c8e6 <_dtoa_r+0x96>
 800d40a:	4b07      	ldr	r3, [pc, #28]	; (800d428 <_dtoa_r+0xbd8>)
 800d40c:	f7ff ba8e 	b.w	800c92c <_dtoa_r+0xdc>
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	dcae      	bgt.n	800d374 <_dtoa_r+0xb24>
 800d416:	9b06      	ldr	r3, [sp, #24]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	f73f aea8 	bgt.w	800d16e <_dtoa_r+0x91e>
 800d41e:	e7a9      	b.n	800d374 <_dtoa_r+0xb24>
 800d420:	0800fa6d 	.word	0x0800fa6d
 800d424:	0800f830 	.word	0x0800f830
 800d428:	0800fa05 	.word	0x0800fa05

0800d42c <fiprintf>:
 800d42c:	b40e      	push	{r1, r2, r3}
 800d42e:	b503      	push	{r0, r1, lr}
 800d430:	4601      	mov	r1, r0
 800d432:	ab03      	add	r3, sp, #12
 800d434:	4805      	ldr	r0, [pc, #20]	; (800d44c <fiprintf+0x20>)
 800d436:	f853 2b04 	ldr.w	r2, [r3], #4
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	f000 fe13 	bl	800e068 <_vfiprintf_r>
 800d442:	b002      	add	sp, #8
 800d444:	f85d eb04 	ldr.w	lr, [sp], #4
 800d448:	b003      	add	sp, #12
 800d44a:	4770      	bx	lr
 800d44c:	20000040 	.word	0x20000040

0800d450 <_localeconv_r>:
 800d450:	4800      	ldr	r0, [pc, #0]	; (800d454 <_localeconv_r+0x4>)
 800d452:	4770      	bx	lr
 800d454:	20000194 	.word	0x20000194

0800d458 <malloc>:
 800d458:	4b02      	ldr	r3, [pc, #8]	; (800d464 <malloc+0xc>)
 800d45a:	4601      	mov	r1, r0
 800d45c:	6818      	ldr	r0, [r3, #0]
 800d45e:	f000 bc09 	b.w	800dc74 <_malloc_r>
 800d462:	bf00      	nop
 800d464:	20000040 	.word	0x20000040

0800d468 <_Balloc>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d46c:	4604      	mov	r4, r0
 800d46e:	460d      	mov	r5, r1
 800d470:	b976      	cbnz	r6, 800d490 <_Balloc+0x28>
 800d472:	2010      	movs	r0, #16
 800d474:	f7ff fff0 	bl	800d458 <malloc>
 800d478:	4602      	mov	r2, r0
 800d47a:	6260      	str	r0, [r4, #36]	; 0x24
 800d47c:	b920      	cbnz	r0, 800d488 <_Balloc+0x20>
 800d47e:	4b18      	ldr	r3, [pc, #96]	; (800d4e0 <_Balloc+0x78>)
 800d480:	4818      	ldr	r0, [pc, #96]	; (800d4e4 <_Balloc+0x7c>)
 800d482:	2166      	movs	r1, #102	; 0x66
 800d484:	f7ff f938 	bl	800c6f8 <__assert_func>
 800d488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d48c:	6006      	str	r6, [r0, #0]
 800d48e:	60c6      	str	r6, [r0, #12]
 800d490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d492:	68f3      	ldr	r3, [r6, #12]
 800d494:	b183      	cbz	r3, 800d4b8 <_Balloc+0x50>
 800d496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d49e:	b9b8      	cbnz	r0, 800d4d0 <_Balloc+0x68>
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4a6:	1d72      	adds	r2, r6, #5
 800d4a8:	0092      	lsls	r2, r2, #2
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 fb60 	bl	800db70 <_calloc_r>
 800d4b0:	b160      	cbz	r0, 800d4cc <_Balloc+0x64>
 800d4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4b6:	e00e      	b.n	800d4d6 <_Balloc+0x6e>
 800d4b8:	2221      	movs	r2, #33	; 0x21
 800d4ba:	2104      	movs	r1, #4
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fb57 	bl	800db70 <_calloc_r>
 800d4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4c4:	60f0      	str	r0, [r6, #12]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e4      	bne.n	800d496 <_Balloc+0x2e>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}
 800d4d0:	6802      	ldr	r2, [r0, #0]
 800d4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4dc:	e7f7      	b.n	800d4ce <_Balloc+0x66>
 800d4de:	bf00      	nop
 800d4e0:	0800f854 	.word	0x0800f854
 800d4e4:	0800fa7e 	.word	0x0800fa7e

0800d4e8 <_Bfree>:
 800d4e8:	b570      	push	{r4, r5, r6, lr}
 800d4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	b976      	cbnz	r6, 800d510 <_Bfree+0x28>
 800d4f2:	2010      	movs	r0, #16
 800d4f4:	f7ff ffb0 	bl	800d458 <malloc>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800d4fc:	b920      	cbnz	r0, 800d508 <_Bfree+0x20>
 800d4fe:	4b09      	ldr	r3, [pc, #36]	; (800d524 <_Bfree+0x3c>)
 800d500:	4809      	ldr	r0, [pc, #36]	; (800d528 <_Bfree+0x40>)
 800d502:	218a      	movs	r1, #138	; 0x8a
 800d504:	f7ff f8f8 	bl	800c6f8 <__assert_func>
 800d508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d50c:	6006      	str	r6, [r0, #0]
 800d50e:	60c6      	str	r6, [r0, #12]
 800d510:	b13c      	cbz	r4, 800d522 <_Bfree+0x3a>
 800d512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d514:	6862      	ldr	r2, [r4, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d51c:	6021      	str	r1, [r4, #0]
 800d51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	0800f854 	.word	0x0800f854
 800d528:	0800fa7e 	.word	0x0800fa7e

0800d52c <__multadd>:
 800d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d530:	690d      	ldr	r5, [r1, #16]
 800d532:	4607      	mov	r7, r0
 800d534:	460c      	mov	r4, r1
 800d536:	461e      	mov	r6, r3
 800d538:	f101 0c14 	add.w	ip, r1, #20
 800d53c:	2000      	movs	r0, #0
 800d53e:	f8dc 3000 	ldr.w	r3, [ip]
 800d542:	b299      	uxth	r1, r3
 800d544:	fb02 6101 	mla	r1, r2, r1, r6
 800d548:	0c1e      	lsrs	r6, r3, #16
 800d54a:	0c0b      	lsrs	r3, r1, #16
 800d54c:	fb02 3306 	mla	r3, r2, r6, r3
 800d550:	b289      	uxth	r1, r1
 800d552:	3001      	adds	r0, #1
 800d554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d558:	4285      	cmp	r5, r0
 800d55a:	f84c 1b04 	str.w	r1, [ip], #4
 800d55e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d562:	dcec      	bgt.n	800d53e <__multadd+0x12>
 800d564:	b30e      	cbz	r6, 800d5aa <__multadd+0x7e>
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	42ab      	cmp	r3, r5
 800d56a:	dc19      	bgt.n	800d5a0 <__multadd+0x74>
 800d56c:	6861      	ldr	r1, [r4, #4]
 800d56e:	4638      	mov	r0, r7
 800d570:	3101      	adds	r1, #1
 800d572:	f7ff ff79 	bl	800d468 <_Balloc>
 800d576:	4680      	mov	r8, r0
 800d578:	b928      	cbnz	r0, 800d586 <__multadd+0x5a>
 800d57a:	4602      	mov	r2, r0
 800d57c:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <__multadd+0x84>)
 800d57e:	480d      	ldr	r0, [pc, #52]	; (800d5b4 <__multadd+0x88>)
 800d580:	21b5      	movs	r1, #181	; 0xb5
 800d582:	f7ff f8b9 	bl	800c6f8 <__assert_func>
 800d586:	6922      	ldr	r2, [r4, #16]
 800d588:	3202      	adds	r2, #2
 800d58a:	f104 010c 	add.w	r1, r4, #12
 800d58e:	0092      	lsls	r2, r2, #2
 800d590:	300c      	adds	r0, #12
 800d592:	f7fe fb21 	bl	800bbd8 <memcpy>
 800d596:	4621      	mov	r1, r4
 800d598:	4638      	mov	r0, r7
 800d59a:	f7ff ffa5 	bl	800d4e8 <_Bfree>
 800d59e:	4644      	mov	r4, r8
 800d5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	615e      	str	r6, [r3, #20]
 800d5a8:	6125      	str	r5, [r4, #16]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b0:	0800fa6d 	.word	0x0800fa6d
 800d5b4:	0800fa7e 	.word	0x0800fa7e

0800d5b8 <__hi0bits>:
 800d5b8:	0c03      	lsrs	r3, r0, #16
 800d5ba:	041b      	lsls	r3, r3, #16
 800d5bc:	b9d3      	cbnz	r3, 800d5f4 <__hi0bits+0x3c>
 800d5be:	0400      	lsls	r0, r0, #16
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5c6:	bf04      	itt	eq
 800d5c8:	0200      	lsleq	r0, r0, #8
 800d5ca:	3308      	addeq	r3, #8
 800d5cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5d0:	bf04      	itt	eq
 800d5d2:	0100      	lsleq	r0, r0, #4
 800d5d4:	3304      	addeq	r3, #4
 800d5d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5da:	bf04      	itt	eq
 800d5dc:	0080      	lsleq	r0, r0, #2
 800d5de:	3302      	addeq	r3, #2
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	db05      	blt.n	800d5f0 <__hi0bits+0x38>
 800d5e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5e8:	f103 0301 	add.w	r3, r3, #1
 800d5ec:	bf08      	it	eq
 800d5ee:	2320      	moveq	r3, #32
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	4770      	bx	lr
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e7e4      	b.n	800d5c2 <__hi0bits+0xa>

0800d5f8 <__lo0bits>:
 800d5f8:	6803      	ldr	r3, [r0, #0]
 800d5fa:	f013 0207 	ands.w	r2, r3, #7
 800d5fe:	4601      	mov	r1, r0
 800d600:	d00b      	beq.n	800d61a <__lo0bits+0x22>
 800d602:	07da      	lsls	r2, r3, #31
 800d604:	d423      	bmi.n	800d64e <__lo0bits+0x56>
 800d606:	0798      	lsls	r0, r3, #30
 800d608:	bf49      	itett	mi
 800d60a:	085b      	lsrmi	r3, r3, #1
 800d60c:	089b      	lsrpl	r3, r3, #2
 800d60e:	2001      	movmi	r0, #1
 800d610:	600b      	strmi	r3, [r1, #0]
 800d612:	bf5c      	itt	pl
 800d614:	600b      	strpl	r3, [r1, #0]
 800d616:	2002      	movpl	r0, #2
 800d618:	4770      	bx	lr
 800d61a:	b298      	uxth	r0, r3
 800d61c:	b9a8      	cbnz	r0, 800d64a <__lo0bits+0x52>
 800d61e:	0c1b      	lsrs	r3, r3, #16
 800d620:	2010      	movs	r0, #16
 800d622:	b2da      	uxtb	r2, r3
 800d624:	b90a      	cbnz	r2, 800d62a <__lo0bits+0x32>
 800d626:	3008      	adds	r0, #8
 800d628:	0a1b      	lsrs	r3, r3, #8
 800d62a:	071a      	lsls	r2, r3, #28
 800d62c:	bf04      	itt	eq
 800d62e:	091b      	lsreq	r3, r3, #4
 800d630:	3004      	addeq	r0, #4
 800d632:	079a      	lsls	r2, r3, #30
 800d634:	bf04      	itt	eq
 800d636:	089b      	lsreq	r3, r3, #2
 800d638:	3002      	addeq	r0, #2
 800d63a:	07da      	lsls	r2, r3, #31
 800d63c:	d403      	bmi.n	800d646 <__lo0bits+0x4e>
 800d63e:	085b      	lsrs	r3, r3, #1
 800d640:	f100 0001 	add.w	r0, r0, #1
 800d644:	d005      	beq.n	800d652 <__lo0bits+0x5a>
 800d646:	600b      	str	r3, [r1, #0]
 800d648:	4770      	bx	lr
 800d64a:	4610      	mov	r0, r2
 800d64c:	e7e9      	b.n	800d622 <__lo0bits+0x2a>
 800d64e:	2000      	movs	r0, #0
 800d650:	4770      	bx	lr
 800d652:	2020      	movs	r0, #32
 800d654:	4770      	bx	lr
	...

0800d658 <__i2b>:
 800d658:	b510      	push	{r4, lr}
 800d65a:	460c      	mov	r4, r1
 800d65c:	2101      	movs	r1, #1
 800d65e:	f7ff ff03 	bl	800d468 <_Balloc>
 800d662:	4602      	mov	r2, r0
 800d664:	b928      	cbnz	r0, 800d672 <__i2b+0x1a>
 800d666:	4b05      	ldr	r3, [pc, #20]	; (800d67c <__i2b+0x24>)
 800d668:	4805      	ldr	r0, [pc, #20]	; (800d680 <__i2b+0x28>)
 800d66a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d66e:	f7ff f843 	bl	800c6f8 <__assert_func>
 800d672:	2301      	movs	r3, #1
 800d674:	6144      	str	r4, [r0, #20]
 800d676:	6103      	str	r3, [r0, #16]
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	bf00      	nop
 800d67c:	0800fa6d 	.word	0x0800fa6d
 800d680:	0800fa7e 	.word	0x0800fa7e

0800d684 <__multiply>:
 800d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d688:	4691      	mov	r9, r2
 800d68a:	690a      	ldr	r2, [r1, #16]
 800d68c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d690:	429a      	cmp	r2, r3
 800d692:	bfb8      	it	lt
 800d694:	460b      	movlt	r3, r1
 800d696:	460c      	mov	r4, r1
 800d698:	bfbc      	itt	lt
 800d69a:	464c      	movlt	r4, r9
 800d69c:	4699      	movlt	r9, r3
 800d69e:	6927      	ldr	r7, [r4, #16]
 800d6a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	6861      	ldr	r1, [r4, #4]
 800d6a8:	eb07 060a 	add.w	r6, r7, sl
 800d6ac:	42b3      	cmp	r3, r6
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	bfb8      	it	lt
 800d6b2:	3101      	addlt	r1, #1
 800d6b4:	f7ff fed8 	bl	800d468 <_Balloc>
 800d6b8:	b930      	cbnz	r0, 800d6c8 <__multiply+0x44>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	4b44      	ldr	r3, [pc, #272]	; (800d7d0 <__multiply+0x14c>)
 800d6be:	4845      	ldr	r0, [pc, #276]	; (800d7d4 <__multiply+0x150>)
 800d6c0:	f240 115d 	movw	r1, #349	; 0x15d
 800d6c4:	f7ff f818 	bl	800c6f8 <__assert_func>
 800d6c8:	f100 0514 	add.w	r5, r0, #20
 800d6cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6d0:	462b      	mov	r3, r5
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	4543      	cmp	r3, r8
 800d6d6:	d321      	bcc.n	800d71c <__multiply+0x98>
 800d6d8:	f104 0314 	add.w	r3, r4, #20
 800d6dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6e0:	f109 0314 	add.w	r3, r9, #20
 800d6e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6e8:	9202      	str	r2, [sp, #8]
 800d6ea:	1b3a      	subs	r2, r7, r4
 800d6ec:	3a15      	subs	r2, #21
 800d6ee:	f022 0203 	bic.w	r2, r2, #3
 800d6f2:	3204      	adds	r2, #4
 800d6f4:	f104 0115 	add.w	r1, r4, #21
 800d6f8:	428f      	cmp	r7, r1
 800d6fa:	bf38      	it	cc
 800d6fc:	2204      	movcc	r2, #4
 800d6fe:	9201      	str	r2, [sp, #4]
 800d700:	9a02      	ldr	r2, [sp, #8]
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	429a      	cmp	r2, r3
 800d706:	d80c      	bhi.n	800d722 <__multiply+0x9e>
 800d708:	2e00      	cmp	r6, #0
 800d70a:	dd03      	ble.n	800d714 <__multiply+0x90>
 800d70c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d710:	2b00      	cmp	r3, #0
 800d712:	d05a      	beq.n	800d7ca <__multiply+0x146>
 800d714:	6106      	str	r6, [r0, #16]
 800d716:	b005      	add	sp, #20
 800d718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71c:	f843 2b04 	str.w	r2, [r3], #4
 800d720:	e7d8      	b.n	800d6d4 <__multiply+0x50>
 800d722:	f8b3 a000 	ldrh.w	sl, [r3]
 800d726:	f1ba 0f00 	cmp.w	sl, #0
 800d72a:	d024      	beq.n	800d776 <__multiply+0xf2>
 800d72c:	f104 0e14 	add.w	lr, r4, #20
 800d730:	46a9      	mov	r9, r5
 800d732:	f04f 0c00 	mov.w	ip, #0
 800d736:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d73a:	f8d9 1000 	ldr.w	r1, [r9]
 800d73e:	fa1f fb82 	uxth.w	fp, r2
 800d742:	b289      	uxth	r1, r1
 800d744:	fb0a 110b 	mla	r1, sl, fp, r1
 800d748:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d74c:	f8d9 2000 	ldr.w	r2, [r9]
 800d750:	4461      	add	r1, ip
 800d752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d756:	fb0a c20b 	mla	r2, sl, fp, ip
 800d75a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d75e:	b289      	uxth	r1, r1
 800d760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d764:	4577      	cmp	r7, lr
 800d766:	f849 1b04 	str.w	r1, [r9], #4
 800d76a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d76e:	d8e2      	bhi.n	800d736 <__multiply+0xb2>
 800d770:	9a01      	ldr	r2, [sp, #4]
 800d772:	f845 c002 	str.w	ip, [r5, r2]
 800d776:	9a03      	ldr	r2, [sp, #12]
 800d778:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d77c:	3304      	adds	r3, #4
 800d77e:	f1b9 0f00 	cmp.w	r9, #0
 800d782:	d020      	beq.n	800d7c6 <__multiply+0x142>
 800d784:	6829      	ldr	r1, [r5, #0]
 800d786:	f104 0c14 	add.w	ip, r4, #20
 800d78a:	46ae      	mov	lr, r5
 800d78c:	f04f 0a00 	mov.w	sl, #0
 800d790:	f8bc b000 	ldrh.w	fp, [ip]
 800d794:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d798:	fb09 220b 	mla	r2, r9, fp, r2
 800d79c:	4492      	add	sl, r2
 800d79e:	b289      	uxth	r1, r1
 800d7a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7a4:	f84e 1b04 	str.w	r1, [lr], #4
 800d7a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7ac:	f8be 1000 	ldrh.w	r1, [lr]
 800d7b0:	0c12      	lsrs	r2, r2, #16
 800d7b2:	fb09 1102 	mla	r1, r9, r2, r1
 800d7b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d7ba:	4567      	cmp	r7, ip
 800d7bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7c0:	d8e6      	bhi.n	800d790 <__multiply+0x10c>
 800d7c2:	9a01      	ldr	r2, [sp, #4]
 800d7c4:	50a9      	str	r1, [r5, r2]
 800d7c6:	3504      	adds	r5, #4
 800d7c8:	e79a      	b.n	800d700 <__multiply+0x7c>
 800d7ca:	3e01      	subs	r6, #1
 800d7cc:	e79c      	b.n	800d708 <__multiply+0x84>
 800d7ce:	bf00      	nop
 800d7d0:	0800fa6d 	.word	0x0800fa6d
 800d7d4:	0800fa7e 	.word	0x0800fa7e

0800d7d8 <__pow5mult>:
 800d7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7dc:	4615      	mov	r5, r2
 800d7de:	f012 0203 	ands.w	r2, r2, #3
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	d007      	beq.n	800d7f8 <__pow5mult+0x20>
 800d7e8:	4c25      	ldr	r4, [pc, #148]	; (800d880 <__pow5mult+0xa8>)
 800d7ea:	3a01      	subs	r2, #1
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7f2:	f7ff fe9b 	bl	800d52c <__multadd>
 800d7f6:	4607      	mov	r7, r0
 800d7f8:	10ad      	asrs	r5, r5, #2
 800d7fa:	d03d      	beq.n	800d878 <__pow5mult+0xa0>
 800d7fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7fe:	b97c      	cbnz	r4, 800d820 <__pow5mult+0x48>
 800d800:	2010      	movs	r0, #16
 800d802:	f7ff fe29 	bl	800d458 <malloc>
 800d806:	4602      	mov	r2, r0
 800d808:	6270      	str	r0, [r6, #36]	; 0x24
 800d80a:	b928      	cbnz	r0, 800d818 <__pow5mult+0x40>
 800d80c:	4b1d      	ldr	r3, [pc, #116]	; (800d884 <__pow5mult+0xac>)
 800d80e:	481e      	ldr	r0, [pc, #120]	; (800d888 <__pow5mult+0xb0>)
 800d810:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d814:	f7fe ff70 	bl	800c6f8 <__assert_func>
 800d818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d81c:	6004      	str	r4, [r0, #0]
 800d81e:	60c4      	str	r4, [r0, #12]
 800d820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d828:	b94c      	cbnz	r4, 800d83e <__pow5mult+0x66>
 800d82a:	f240 2171 	movw	r1, #625	; 0x271
 800d82e:	4630      	mov	r0, r6
 800d830:	f7ff ff12 	bl	800d658 <__i2b>
 800d834:	2300      	movs	r3, #0
 800d836:	f8c8 0008 	str.w	r0, [r8, #8]
 800d83a:	4604      	mov	r4, r0
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	f04f 0900 	mov.w	r9, #0
 800d842:	07eb      	lsls	r3, r5, #31
 800d844:	d50a      	bpl.n	800d85c <__pow5mult+0x84>
 800d846:	4639      	mov	r1, r7
 800d848:	4622      	mov	r2, r4
 800d84a:	4630      	mov	r0, r6
 800d84c:	f7ff ff1a 	bl	800d684 <__multiply>
 800d850:	4639      	mov	r1, r7
 800d852:	4680      	mov	r8, r0
 800d854:	4630      	mov	r0, r6
 800d856:	f7ff fe47 	bl	800d4e8 <_Bfree>
 800d85a:	4647      	mov	r7, r8
 800d85c:	106d      	asrs	r5, r5, #1
 800d85e:	d00b      	beq.n	800d878 <__pow5mult+0xa0>
 800d860:	6820      	ldr	r0, [r4, #0]
 800d862:	b938      	cbnz	r0, 800d874 <__pow5mult+0x9c>
 800d864:	4622      	mov	r2, r4
 800d866:	4621      	mov	r1, r4
 800d868:	4630      	mov	r0, r6
 800d86a:	f7ff ff0b 	bl	800d684 <__multiply>
 800d86e:	6020      	str	r0, [r4, #0]
 800d870:	f8c0 9000 	str.w	r9, [r0]
 800d874:	4604      	mov	r4, r0
 800d876:	e7e4      	b.n	800d842 <__pow5mult+0x6a>
 800d878:	4638      	mov	r0, r7
 800d87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d87e:	bf00      	nop
 800d880:	0800fbd0 	.word	0x0800fbd0
 800d884:	0800f854 	.word	0x0800f854
 800d888:	0800fa7e 	.word	0x0800fa7e

0800d88c <__lshift>:
 800d88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	460c      	mov	r4, r1
 800d892:	6849      	ldr	r1, [r1, #4]
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d89a:	68a3      	ldr	r3, [r4, #8]
 800d89c:	4607      	mov	r7, r0
 800d89e:	4691      	mov	r9, r2
 800d8a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8a4:	f108 0601 	add.w	r6, r8, #1
 800d8a8:	42b3      	cmp	r3, r6
 800d8aa:	db0b      	blt.n	800d8c4 <__lshift+0x38>
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	f7ff fddb 	bl	800d468 <_Balloc>
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	b948      	cbnz	r0, 800d8ca <__lshift+0x3e>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	4b2a      	ldr	r3, [pc, #168]	; (800d964 <__lshift+0xd8>)
 800d8ba:	482b      	ldr	r0, [pc, #172]	; (800d968 <__lshift+0xdc>)
 800d8bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8c0:	f7fe ff1a 	bl	800c6f8 <__assert_func>
 800d8c4:	3101      	adds	r1, #1
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	e7ee      	b.n	800d8a8 <__lshift+0x1c>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f100 0114 	add.w	r1, r0, #20
 800d8d0:	f100 0210 	add.w	r2, r0, #16
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	4553      	cmp	r3, sl
 800d8d8:	db37      	blt.n	800d94a <__lshift+0xbe>
 800d8da:	6920      	ldr	r0, [r4, #16]
 800d8dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8e0:	f104 0314 	add.w	r3, r4, #20
 800d8e4:	f019 091f 	ands.w	r9, r9, #31
 800d8e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8f0:	d02f      	beq.n	800d952 <__lshift+0xc6>
 800d8f2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8f6:	468a      	mov	sl, r1
 800d8f8:	f04f 0c00 	mov.w	ip, #0
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	fa02 f209 	lsl.w	r2, r2, r9
 800d902:	ea42 020c 	orr.w	r2, r2, ip
 800d906:	f84a 2b04 	str.w	r2, [sl], #4
 800d90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d90e:	4298      	cmp	r0, r3
 800d910:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d914:	d8f2      	bhi.n	800d8fc <__lshift+0x70>
 800d916:	1b03      	subs	r3, r0, r4
 800d918:	3b15      	subs	r3, #21
 800d91a:	f023 0303 	bic.w	r3, r3, #3
 800d91e:	3304      	adds	r3, #4
 800d920:	f104 0215 	add.w	r2, r4, #21
 800d924:	4290      	cmp	r0, r2
 800d926:	bf38      	it	cc
 800d928:	2304      	movcc	r3, #4
 800d92a:	f841 c003 	str.w	ip, [r1, r3]
 800d92e:	f1bc 0f00 	cmp.w	ip, #0
 800d932:	d001      	beq.n	800d938 <__lshift+0xac>
 800d934:	f108 0602 	add.w	r6, r8, #2
 800d938:	3e01      	subs	r6, #1
 800d93a:	4638      	mov	r0, r7
 800d93c:	612e      	str	r6, [r5, #16]
 800d93e:	4621      	mov	r1, r4
 800d940:	f7ff fdd2 	bl	800d4e8 <_Bfree>
 800d944:	4628      	mov	r0, r5
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d94e:	3301      	adds	r3, #1
 800d950:	e7c1      	b.n	800d8d6 <__lshift+0x4a>
 800d952:	3904      	subs	r1, #4
 800d954:	f853 2b04 	ldr.w	r2, [r3], #4
 800d958:	f841 2f04 	str.w	r2, [r1, #4]!
 800d95c:	4298      	cmp	r0, r3
 800d95e:	d8f9      	bhi.n	800d954 <__lshift+0xc8>
 800d960:	e7ea      	b.n	800d938 <__lshift+0xac>
 800d962:	bf00      	nop
 800d964:	0800fa6d 	.word	0x0800fa6d
 800d968:	0800fa7e 	.word	0x0800fa7e

0800d96c <__mcmp>:
 800d96c:	b530      	push	{r4, r5, lr}
 800d96e:	6902      	ldr	r2, [r0, #16]
 800d970:	690c      	ldr	r4, [r1, #16]
 800d972:	1b12      	subs	r2, r2, r4
 800d974:	d10e      	bne.n	800d994 <__mcmp+0x28>
 800d976:	f100 0314 	add.w	r3, r0, #20
 800d97a:	3114      	adds	r1, #20
 800d97c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d980:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d984:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d988:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d98c:	42a5      	cmp	r5, r4
 800d98e:	d003      	beq.n	800d998 <__mcmp+0x2c>
 800d990:	d305      	bcc.n	800d99e <__mcmp+0x32>
 800d992:	2201      	movs	r2, #1
 800d994:	4610      	mov	r0, r2
 800d996:	bd30      	pop	{r4, r5, pc}
 800d998:	4283      	cmp	r3, r0
 800d99a:	d3f3      	bcc.n	800d984 <__mcmp+0x18>
 800d99c:	e7fa      	b.n	800d994 <__mcmp+0x28>
 800d99e:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a2:	e7f7      	b.n	800d994 <__mcmp+0x28>

0800d9a4 <__mdiff>:
 800d9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4690      	mov	r8, r2
 800d9b2:	f7ff ffdb 	bl	800d96c <__mcmp>
 800d9b6:	1e05      	subs	r5, r0, #0
 800d9b8:	d110      	bne.n	800d9dc <__mdiff+0x38>
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7ff fd53 	bl	800d468 <_Balloc>
 800d9c2:	b930      	cbnz	r0, 800d9d2 <__mdiff+0x2e>
 800d9c4:	4b3a      	ldr	r3, [pc, #232]	; (800dab0 <__mdiff+0x10c>)
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	f240 2132 	movw	r1, #562	; 0x232
 800d9cc:	4839      	ldr	r0, [pc, #228]	; (800dab4 <__mdiff+0x110>)
 800d9ce:	f7fe fe93 	bl	800c6f8 <__assert_func>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9dc:	bfa4      	itt	ge
 800d9de:	4643      	movge	r3, r8
 800d9e0:	46a0      	movge	r8, r4
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d9e8:	bfa6      	itte	ge
 800d9ea:	461c      	movge	r4, r3
 800d9ec:	2500      	movge	r5, #0
 800d9ee:	2501      	movlt	r5, #1
 800d9f0:	f7ff fd3a 	bl	800d468 <_Balloc>
 800d9f4:	b920      	cbnz	r0, 800da00 <__mdiff+0x5c>
 800d9f6:	4b2e      	ldr	r3, [pc, #184]	; (800dab0 <__mdiff+0x10c>)
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9fe:	e7e5      	b.n	800d9cc <__mdiff+0x28>
 800da00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da04:	6926      	ldr	r6, [r4, #16]
 800da06:	60c5      	str	r5, [r0, #12]
 800da08:	f104 0914 	add.w	r9, r4, #20
 800da0c:	f108 0514 	add.w	r5, r8, #20
 800da10:	f100 0e14 	add.w	lr, r0, #20
 800da14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da1c:	f108 0210 	add.w	r2, r8, #16
 800da20:	46f2      	mov	sl, lr
 800da22:	2100      	movs	r1, #0
 800da24:	f859 3b04 	ldr.w	r3, [r9], #4
 800da28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da2c:	fa1f f883 	uxth.w	r8, r3
 800da30:	fa11 f18b 	uxtah	r1, r1, fp
 800da34:	0c1b      	lsrs	r3, r3, #16
 800da36:	eba1 0808 	sub.w	r8, r1, r8
 800da3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da42:	fa1f f888 	uxth.w	r8, r8
 800da46:	1419      	asrs	r1, r3, #16
 800da48:	454e      	cmp	r6, r9
 800da4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da4e:	f84a 3b04 	str.w	r3, [sl], #4
 800da52:	d8e7      	bhi.n	800da24 <__mdiff+0x80>
 800da54:	1b33      	subs	r3, r6, r4
 800da56:	3b15      	subs	r3, #21
 800da58:	f023 0303 	bic.w	r3, r3, #3
 800da5c:	3304      	adds	r3, #4
 800da5e:	3415      	adds	r4, #21
 800da60:	42a6      	cmp	r6, r4
 800da62:	bf38      	it	cc
 800da64:	2304      	movcc	r3, #4
 800da66:	441d      	add	r5, r3
 800da68:	4473      	add	r3, lr
 800da6a:	469e      	mov	lr, r3
 800da6c:	462e      	mov	r6, r5
 800da6e:	4566      	cmp	r6, ip
 800da70:	d30e      	bcc.n	800da90 <__mdiff+0xec>
 800da72:	f10c 0203 	add.w	r2, ip, #3
 800da76:	1b52      	subs	r2, r2, r5
 800da78:	f022 0203 	bic.w	r2, r2, #3
 800da7c:	3d03      	subs	r5, #3
 800da7e:	45ac      	cmp	ip, r5
 800da80:	bf38      	it	cc
 800da82:	2200      	movcc	r2, #0
 800da84:	441a      	add	r2, r3
 800da86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da8a:	b17b      	cbz	r3, 800daac <__mdiff+0x108>
 800da8c:	6107      	str	r7, [r0, #16]
 800da8e:	e7a3      	b.n	800d9d8 <__mdiff+0x34>
 800da90:	f856 8b04 	ldr.w	r8, [r6], #4
 800da94:	fa11 f288 	uxtah	r2, r1, r8
 800da98:	1414      	asrs	r4, r2, #16
 800da9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da9e:	b292      	uxth	r2, r2
 800daa0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800daa4:	f84e 2b04 	str.w	r2, [lr], #4
 800daa8:	1421      	asrs	r1, r4, #16
 800daaa:	e7e0      	b.n	800da6e <__mdiff+0xca>
 800daac:	3f01      	subs	r7, #1
 800daae:	e7ea      	b.n	800da86 <__mdiff+0xe2>
 800dab0:	0800fa6d 	.word	0x0800fa6d
 800dab4:	0800fa7e 	.word	0x0800fa7e

0800dab8 <__d2b>:
 800dab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4689      	mov	r9, r1
 800dabe:	2101      	movs	r1, #1
 800dac0:	ec57 6b10 	vmov	r6, r7, d0
 800dac4:	4690      	mov	r8, r2
 800dac6:	f7ff fccf 	bl	800d468 <_Balloc>
 800daca:	4604      	mov	r4, r0
 800dacc:	b930      	cbnz	r0, 800dadc <__d2b+0x24>
 800dace:	4602      	mov	r2, r0
 800dad0:	4b25      	ldr	r3, [pc, #148]	; (800db68 <__d2b+0xb0>)
 800dad2:	4826      	ldr	r0, [pc, #152]	; (800db6c <__d2b+0xb4>)
 800dad4:	f240 310a 	movw	r1, #778	; 0x30a
 800dad8:	f7fe fe0e 	bl	800c6f8 <__assert_func>
 800dadc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dae4:	bb35      	cbnz	r5, 800db34 <__d2b+0x7c>
 800dae6:	2e00      	cmp	r6, #0
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	d028      	beq.n	800db3e <__d2b+0x86>
 800daec:	4668      	mov	r0, sp
 800daee:	9600      	str	r6, [sp, #0]
 800daf0:	f7ff fd82 	bl	800d5f8 <__lo0bits>
 800daf4:	9900      	ldr	r1, [sp, #0]
 800daf6:	b300      	cbz	r0, 800db3a <__d2b+0x82>
 800daf8:	9a01      	ldr	r2, [sp, #4]
 800dafa:	f1c0 0320 	rsb	r3, r0, #32
 800dafe:	fa02 f303 	lsl.w	r3, r2, r3
 800db02:	430b      	orrs	r3, r1
 800db04:	40c2      	lsrs	r2, r0
 800db06:	6163      	str	r3, [r4, #20]
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9b01      	ldr	r3, [sp, #4]
 800db0c:	61a3      	str	r3, [r4, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bf14      	ite	ne
 800db12:	2202      	movne	r2, #2
 800db14:	2201      	moveq	r2, #1
 800db16:	6122      	str	r2, [r4, #16]
 800db18:	b1d5      	cbz	r5, 800db50 <__d2b+0x98>
 800db1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db1e:	4405      	add	r5, r0
 800db20:	f8c9 5000 	str.w	r5, [r9]
 800db24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db28:	f8c8 0000 	str.w	r0, [r8]
 800db2c:	4620      	mov	r0, r4
 800db2e:	b003      	add	sp, #12
 800db30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db38:	e7d5      	b.n	800dae6 <__d2b+0x2e>
 800db3a:	6161      	str	r1, [r4, #20]
 800db3c:	e7e5      	b.n	800db0a <__d2b+0x52>
 800db3e:	a801      	add	r0, sp, #4
 800db40:	f7ff fd5a 	bl	800d5f8 <__lo0bits>
 800db44:	9b01      	ldr	r3, [sp, #4]
 800db46:	6163      	str	r3, [r4, #20]
 800db48:	2201      	movs	r2, #1
 800db4a:	6122      	str	r2, [r4, #16]
 800db4c:	3020      	adds	r0, #32
 800db4e:	e7e3      	b.n	800db18 <__d2b+0x60>
 800db50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db58:	f8c9 0000 	str.w	r0, [r9]
 800db5c:	6918      	ldr	r0, [r3, #16]
 800db5e:	f7ff fd2b 	bl	800d5b8 <__hi0bits>
 800db62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db66:	e7df      	b.n	800db28 <__d2b+0x70>
 800db68:	0800fa6d 	.word	0x0800fa6d
 800db6c:	0800fa7e 	.word	0x0800fa7e

0800db70 <_calloc_r>:
 800db70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db72:	fba1 2402 	umull	r2, r4, r1, r2
 800db76:	b94c      	cbnz	r4, 800db8c <_calloc_r+0x1c>
 800db78:	4611      	mov	r1, r2
 800db7a:	9201      	str	r2, [sp, #4]
 800db7c:	f000 f87a 	bl	800dc74 <_malloc_r>
 800db80:	9a01      	ldr	r2, [sp, #4]
 800db82:	4605      	mov	r5, r0
 800db84:	b930      	cbnz	r0, 800db94 <_calloc_r+0x24>
 800db86:	4628      	mov	r0, r5
 800db88:	b003      	add	sp, #12
 800db8a:	bd30      	pop	{r4, r5, pc}
 800db8c:	220c      	movs	r2, #12
 800db8e:	6002      	str	r2, [r0, #0]
 800db90:	2500      	movs	r5, #0
 800db92:	e7f8      	b.n	800db86 <_calloc_r+0x16>
 800db94:	4621      	mov	r1, r4
 800db96:	f7fe f82d 	bl	800bbf4 <memset>
 800db9a:	e7f4      	b.n	800db86 <_calloc_r+0x16>

0800db9c <_free_r>:
 800db9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d044      	beq.n	800dc2c <_free_r+0x90>
 800dba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba6:	9001      	str	r0, [sp, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f1a1 0404 	sub.w	r4, r1, #4
 800dbae:	bfb8      	it	lt
 800dbb0:	18e4      	addlt	r4, r4, r3
 800dbb2:	f000 fead 	bl	800e910 <__malloc_lock>
 800dbb6:	4a1e      	ldr	r2, [pc, #120]	; (800dc30 <_free_r+0x94>)
 800dbb8:	9801      	ldr	r0, [sp, #4]
 800dbba:	6813      	ldr	r3, [r2, #0]
 800dbbc:	b933      	cbnz	r3, 800dbcc <_free_r+0x30>
 800dbbe:	6063      	str	r3, [r4, #4]
 800dbc0:	6014      	str	r4, [r2, #0]
 800dbc2:	b003      	add	sp, #12
 800dbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbc8:	f000 bea8 	b.w	800e91c <__malloc_unlock>
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d908      	bls.n	800dbe2 <_free_r+0x46>
 800dbd0:	6825      	ldr	r5, [r4, #0]
 800dbd2:	1961      	adds	r1, r4, r5
 800dbd4:	428b      	cmp	r3, r1
 800dbd6:	bf01      	itttt	eq
 800dbd8:	6819      	ldreq	r1, [r3, #0]
 800dbda:	685b      	ldreq	r3, [r3, #4]
 800dbdc:	1949      	addeq	r1, r1, r5
 800dbde:	6021      	streq	r1, [r4, #0]
 800dbe0:	e7ed      	b.n	800dbbe <_free_r+0x22>
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	b10b      	cbz	r3, 800dbec <_free_r+0x50>
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d9fa      	bls.n	800dbe2 <_free_r+0x46>
 800dbec:	6811      	ldr	r1, [r2, #0]
 800dbee:	1855      	adds	r5, r2, r1
 800dbf0:	42a5      	cmp	r5, r4
 800dbf2:	d10b      	bne.n	800dc0c <_free_r+0x70>
 800dbf4:	6824      	ldr	r4, [r4, #0]
 800dbf6:	4421      	add	r1, r4
 800dbf8:	1854      	adds	r4, r2, r1
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	6011      	str	r1, [r2, #0]
 800dbfe:	d1e0      	bne.n	800dbc2 <_free_r+0x26>
 800dc00:	681c      	ldr	r4, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	6053      	str	r3, [r2, #4]
 800dc06:	4421      	add	r1, r4
 800dc08:	6011      	str	r1, [r2, #0]
 800dc0a:	e7da      	b.n	800dbc2 <_free_r+0x26>
 800dc0c:	d902      	bls.n	800dc14 <_free_r+0x78>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	e7d6      	b.n	800dbc2 <_free_r+0x26>
 800dc14:	6825      	ldr	r5, [r4, #0]
 800dc16:	1961      	adds	r1, r4, r5
 800dc18:	428b      	cmp	r3, r1
 800dc1a:	bf04      	itt	eq
 800dc1c:	6819      	ldreq	r1, [r3, #0]
 800dc1e:	685b      	ldreq	r3, [r3, #4]
 800dc20:	6063      	str	r3, [r4, #4]
 800dc22:	bf04      	itt	eq
 800dc24:	1949      	addeq	r1, r1, r5
 800dc26:	6021      	streq	r1, [r4, #0]
 800dc28:	6054      	str	r4, [r2, #4]
 800dc2a:	e7ca      	b.n	800dbc2 <_free_r+0x26>
 800dc2c:	b003      	add	sp, #12
 800dc2e:	bd30      	pop	{r4, r5, pc}
 800dc30:	20005378 	.word	0x20005378

0800dc34 <sbrk_aligned>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	4e0e      	ldr	r6, [pc, #56]	; (800dc70 <sbrk_aligned+0x3c>)
 800dc38:	460c      	mov	r4, r1
 800dc3a:	6831      	ldr	r1, [r6, #0]
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	b911      	cbnz	r1, 800dc46 <sbrk_aligned+0x12>
 800dc40:	f000 fb42 	bl	800e2c8 <_sbrk_r>
 800dc44:	6030      	str	r0, [r6, #0]
 800dc46:	4621      	mov	r1, r4
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f000 fb3d 	bl	800e2c8 <_sbrk_r>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	d00a      	beq.n	800dc68 <sbrk_aligned+0x34>
 800dc52:	1cc4      	adds	r4, r0, #3
 800dc54:	f024 0403 	bic.w	r4, r4, #3
 800dc58:	42a0      	cmp	r0, r4
 800dc5a:	d007      	beq.n	800dc6c <sbrk_aligned+0x38>
 800dc5c:	1a21      	subs	r1, r4, r0
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f000 fb32 	bl	800e2c8 <_sbrk_r>
 800dc64:	3001      	adds	r0, #1
 800dc66:	d101      	bne.n	800dc6c <sbrk_aligned+0x38>
 800dc68:	f04f 34ff 	mov.w	r4, #4294967295
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
 800dc70:	2000537c 	.word	0x2000537c

0800dc74 <_malloc_r>:
 800dc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc78:	1ccd      	adds	r5, r1, #3
 800dc7a:	f025 0503 	bic.w	r5, r5, #3
 800dc7e:	3508      	adds	r5, #8
 800dc80:	2d0c      	cmp	r5, #12
 800dc82:	bf38      	it	cc
 800dc84:	250c      	movcc	r5, #12
 800dc86:	2d00      	cmp	r5, #0
 800dc88:	4607      	mov	r7, r0
 800dc8a:	db01      	blt.n	800dc90 <_malloc_r+0x1c>
 800dc8c:	42a9      	cmp	r1, r5
 800dc8e:	d905      	bls.n	800dc9c <_malloc_r+0x28>
 800dc90:	230c      	movs	r3, #12
 800dc92:	603b      	str	r3, [r7, #0]
 800dc94:	2600      	movs	r6, #0
 800dc96:	4630      	mov	r0, r6
 800dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc9c:	4e2e      	ldr	r6, [pc, #184]	; (800dd58 <_malloc_r+0xe4>)
 800dc9e:	f000 fe37 	bl	800e910 <__malloc_lock>
 800dca2:	6833      	ldr	r3, [r6, #0]
 800dca4:	461c      	mov	r4, r3
 800dca6:	bb34      	cbnz	r4, 800dcf6 <_malloc_r+0x82>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f7ff ffc2 	bl	800dc34 <sbrk_aligned>
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	d14d      	bne.n	800dd52 <_malloc_r+0xde>
 800dcb6:	6834      	ldr	r4, [r6, #0]
 800dcb8:	4626      	mov	r6, r4
 800dcba:	2e00      	cmp	r6, #0
 800dcbc:	d140      	bne.n	800dd40 <_malloc_r+0xcc>
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	eb04 0803 	add.w	r8, r4, r3
 800dcc8:	f000 fafe 	bl	800e2c8 <_sbrk_r>
 800dccc:	4580      	cmp	r8, r0
 800dcce:	d13a      	bne.n	800dd46 <_malloc_r+0xd2>
 800dcd0:	6821      	ldr	r1, [r4, #0]
 800dcd2:	3503      	adds	r5, #3
 800dcd4:	1a6d      	subs	r5, r5, r1
 800dcd6:	f025 0503 	bic.w	r5, r5, #3
 800dcda:	3508      	adds	r5, #8
 800dcdc:	2d0c      	cmp	r5, #12
 800dcde:	bf38      	it	cc
 800dce0:	250c      	movcc	r5, #12
 800dce2:	4629      	mov	r1, r5
 800dce4:	4638      	mov	r0, r7
 800dce6:	f7ff ffa5 	bl	800dc34 <sbrk_aligned>
 800dcea:	3001      	adds	r0, #1
 800dcec:	d02b      	beq.n	800dd46 <_malloc_r+0xd2>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	442b      	add	r3, r5
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	e00e      	b.n	800dd14 <_malloc_r+0xa0>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	1b52      	subs	r2, r2, r5
 800dcfa:	d41e      	bmi.n	800dd3a <_malloc_r+0xc6>
 800dcfc:	2a0b      	cmp	r2, #11
 800dcfe:	d916      	bls.n	800dd2e <_malloc_r+0xba>
 800dd00:	1961      	adds	r1, r4, r5
 800dd02:	42a3      	cmp	r3, r4
 800dd04:	6025      	str	r5, [r4, #0]
 800dd06:	bf18      	it	ne
 800dd08:	6059      	strne	r1, [r3, #4]
 800dd0a:	6863      	ldr	r3, [r4, #4]
 800dd0c:	bf08      	it	eq
 800dd0e:	6031      	streq	r1, [r6, #0]
 800dd10:	5162      	str	r2, [r4, r5]
 800dd12:	604b      	str	r3, [r1, #4]
 800dd14:	4638      	mov	r0, r7
 800dd16:	f104 060b 	add.w	r6, r4, #11
 800dd1a:	f000 fdff 	bl	800e91c <__malloc_unlock>
 800dd1e:	f026 0607 	bic.w	r6, r6, #7
 800dd22:	1d23      	adds	r3, r4, #4
 800dd24:	1af2      	subs	r2, r6, r3
 800dd26:	d0b6      	beq.n	800dc96 <_malloc_r+0x22>
 800dd28:	1b9b      	subs	r3, r3, r6
 800dd2a:	50a3      	str	r3, [r4, r2]
 800dd2c:	e7b3      	b.n	800dc96 <_malloc_r+0x22>
 800dd2e:	6862      	ldr	r2, [r4, #4]
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	bf0c      	ite	eq
 800dd34:	6032      	streq	r2, [r6, #0]
 800dd36:	605a      	strne	r2, [r3, #4]
 800dd38:	e7ec      	b.n	800dd14 <_malloc_r+0xa0>
 800dd3a:	4623      	mov	r3, r4
 800dd3c:	6864      	ldr	r4, [r4, #4]
 800dd3e:	e7b2      	b.n	800dca6 <_malloc_r+0x32>
 800dd40:	4634      	mov	r4, r6
 800dd42:	6876      	ldr	r6, [r6, #4]
 800dd44:	e7b9      	b.n	800dcba <_malloc_r+0x46>
 800dd46:	230c      	movs	r3, #12
 800dd48:	603b      	str	r3, [r7, #0]
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	f000 fde6 	bl	800e91c <__malloc_unlock>
 800dd50:	e7a1      	b.n	800dc96 <_malloc_r+0x22>
 800dd52:	6025      	str	r5, [r4, #0]
 800dd54:	e7de      	b.n	800dd14 <_malloc_r+0xa0>
 800dd56:	bf00      	nop
 800dd58:	20005378 	.word	0x20005378

0800dd5c <__ssputs_r>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	688e      	ldr	r6, [r1, #8]
 800dd62:	429e      	cmp	r6, r3
 800dd64:	4682      	mov	sl, r0
 800dd66:	460c      	mov	r4, r1
 800dd68:	4690      	mov	r8, r2
 800dd6a:	461f      	mov	r7, r3
 800dd6c:	d838      	bhi.n	800dde0 <__ssputs_r+0x84>
 800dd6e:	898a      	ldrh	r2, [r1, #12]
 800dd70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd74:	d032      	beq.n	800dddc <__ssputs_r+0x80>
 800dd76:	6825      	ldr	r5, [r4, #0]
 800dd78:	6909      	ldr	r1, [r1, #16]
 800dd7a:	eba5 0901 	sub.w	r9, r5, r1
 800dd7e:	6965      	ldr	r5, [r4, #20]
 800dd80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd88:	3301      	adds	r3, #1
 800dd8a:	444b      	add	r3, r9
 800dd8c:	106d      	asrs	r5, r5, #1
 800dd8e:	429d      	cmp	r5, r3
 800dd90:	bf38      	it	cc
 800dd92:	461d      	movcc	r5, r3
 800dd94:	0553      	lsls	r3, r2, #21
 800dd96:	d531      	bpl.n	800ddfc <__ssputs_r+0xa0>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7ff ff6b 	bl	800dc74 <_malloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	b950      	cbnz	r0, 800ddb8 <__ssputs_r+0x5c>
 800dda2:	230c      	movs	r3, #12
 800dda4:	f8ca 3000 	str.w	r3, [sl]
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb8:	6921      	ldr	r1, [r4, #16]
 800ddba:	464a      	mov	r2, r9
 800ddbc:	f7fd ff0c 	bl	800bbd8 <memcpy>
 800ddc0:	89a3      	ldrh	r3, [r4, #12]
 800ddc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddca:	81a3      	strh	r3, [r4, #12]
 800ddcc:	6126      	str	r6, [r4, #16]
 800ddce:	6165      	str	r5, [r4, #20]
 800ddd0:	444e      	add	r6, r9
 800ddd2:	eba5 0509 	sub.w	r5, r5, r9
 800ddd6:	6026      	str	r6, [r4, #0]
 800ddd8:	60a5      	str	r5, [r4, #8]
 800ddda:	463e      	mov	r6, r7
 800dddc:	42be      	cmp	r6, r7
 800ddde:	d900      	bls.n	800dde2 <__ssputs_r+0x86>
 800dde0:	463e      	mov	r6, r7
 800dde2:	6820      	ldr	r0, [r4, #0]
 800dde4:	4632      	mov	r2, r6
 800dde6:	4641      	mov	r1, r8
 800dde8:	f000 fd78 	bl	800e8dc <memmove>
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	1b9b      	subs	r3, r3, r6
 800ddf0:	60a3      	str	r3, [r4, #8]
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	4433      	add	r3, r6
 800ddf6:	6023      	str	r3, [r4, #0]
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	e7db      	b.n	800ddb4 <__ssputs_r+0x58>
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	f000 fd93 	bl	800e928 <_realloc_r>
 800de02:	4606      	mov	r6, r0
 800de04:	2800      	cmp	r0, #0
 800de06:	d1e1      	bne.n	800ddcc <__ssputs_r+0x70>
 800de08:	6921      	ldr	r1, [r4, #16]
 800de0a:	4650      	mov	r0, sl
 800de0c:	f7ff fec6 	bl	800db9c <_free_r>
 800de10:	e7c7      	b.n	800dda2 <__ssputs_r+0x46>
	...

0800de14 <_svfiprintf_r>:
 800de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	4698      	mov	r8, r3
 800de1a:	898b      	ldrh	r3, [r1, #12]
 800de1c:	061b      	lsls	r3, r3, #24
 800de1e:	b09d      	sub	sp, #116	; 0x74
 800de20:	4607      	mov	r7, r0
 800de22:	460d      	mov	r5, r1
 800de24:	4614      	mov	r4, r2
 800de26:	d50e      	bpl.n	800de46 <_svfiprintf_r+0x32>
 800de28:	690b      	ldr	r3, [r1, #16]
 800de2a:	b963      	cbnz	r3, 800de46 <_svfiprintf_r+0x32>
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	f7ff ff21 	bl	800dc74 <_malloc_r>
 800de32:	6028      	str	r0, [r5, #0]
 800de34:	6128      	str	r0, [r5, #16]
 800de36:	b920      	cbnz	r0, 800de42 <_svfiprintf_r+0x2e>
 800de38:	230c      	movs	r3, #12
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	e0d1      	b.n	800dfe6 <_svfiprintf_r+0x1d2>
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	616b      	str	r3, [r5, #20]
 800de46:	2300      	movs	r3, #0
 800de48:	9309      	str	r3, [sp, #36]	; 0x24
 800de4a:	2320      	movs	r3, #32
 800de4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de50:	f8cd 800c 	str.w	r8, [sp, #12]
 800de54:	2330      	movs	r3, #48	; 0x30
 800de56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e000 <_svfiprintf_r+0x1ec>
 800de5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5e:	f04f 0901 	mov.w	r9, #1
 800de62:	4623      	mov	r3, r4
 800de64:	469a      	mov	sl, r3
 800de66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6a:	b10a      	cbz	r2, 800de70 <_svfiprintf_r+0x5c>
 800de6c:	2a25      	cmp	r2, #37	; 0x25
 800de6e:	d1f9      	bne.n	800de64 <_svfiprintf_r+0x50>
 800de70:	ebba 0b04 	subs.w	fp, sl, r4
 800de74:	d00b      	beq.n	800de8e <_svfiprintf_r+0x7a>
 800de76:	465b      	mov	r3, fp
 800de78:	4622      	mov	r2, r4
 800de7a:	4629      	mov	r1, r5
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff ff6d 	bl	800dd5c <__ssputs_r>
 800de82:	3001      	adds	r0, #1
 800de84:	f000 80aa 	beq.w	800dfdc <_svfiprintf_r+0x1c8>
 800de88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8a:	445a      	add	r2, fp
 800de8c:	9209      	str	r2, [sp, #36]	; 0x24
 800de8e:	f89a 3000 	ldrb.w	r3, [sl]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 80a2 	beq.w	800dfdc <_svfiprintf_r+0x1c8>
 800de98:	2300      	movs	r3, #0
 800de9a:	f04f 32ff 	mov.w	r2, #4294967295
 800de9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea2:	f10a 0a01 	add.w	sl, sl, #1
 800dea6:	9304      	str	r3, [sp, #16]
 800dea8:	9307      	str	r3, [sp, #28]
 800deaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deae:	931a      	str	r3, [sp, #104]	; 0x68
 800deb0:	4654      	mov	r4, sl
 800deb2:	2205      	movs	r2, #5
 800deb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb8:	4851      	ldr	r0, [pc, #324]	; (800e000 <_svfiprintf_r+0x1ec>)
 800deba:	f7f2 f991 	bl	80001e0 <memchr>
 800debe:	9a04      	ldr	r2, [sp, #16]
 800dec0:	b9d8      	cbnz	r0, 800defa <_svfiprintf_r+0xe6>
 800dec2:	06d0      	lsls	r0, r2, #27
 800dec4:	bf44      	itt	mi
 800dec6:	2320      	movmi	r3, #32
 800dec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800decc:	0711      	lsls	r1, r2, #28
 800dece:	bf44      	itt	mi
 800ded0:	232b      	movmi	r3, #43	; 0x2b
 800ded2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded6:	f89a 3000 	ldrb.w	r3, [sl]
 800deda:	2b2a      	cmp	r3, #42	; 0x2a
 800dedc:	d015      	beq.n	800df0a <_svfiprintf_r+0xf6>
 800dede:	9a07      	ldr	r2, [sp, #28]
 800dee0:	4654      	mov	r4, sl
 800dee2:	2000      	movs	r0, #0
 800dee4:	f04f 0c0a 	mov.w	ip, #10
 800dee8:	4621      	mov	r1, r4
 800deea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deee:	3b30      	subs	r3, #48	; 0x30
 800def0:	2b09      	cmp	r3, #9
 800def2:	d94e      	bls.n	800df92 <_svfiprintf_r+0x17e>
 800def4:	b1b0      	cbz	r0, 800df24 <_svfiprintf_r+0x110>
 800def6:	9207      	str	r2, [sp, #28]
 800def8:	e014      	b.n	800df24 <_svfiprintf_r+0x110>
 800defa:	eba0 0308 	sub.w	r3, r0, r8
 800defe:	fa09 f303 	lsl.w	r3, r9, r3
 800df02:	4313      	orrs	r3, r2
 800df04:	9304      	str	r3, [sp, #16]
 800df06:	46a2      	mov	sl, r4
 800df08:	e7d2      	b.n	800deb0 <_svfiprintf_r+0x9c>
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	1d19      	adds	r1, r3, #4
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	9103      	str	r1, [sp, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	bfbb      	ittet	lt
 800df16:	425b      	neglt	r3, r3
 800df18:	f042 0202 	orrlt.w	r2, r2, #2
 800df1c:	9307      	strge	r3, [sp, #28]
 800df1e:	9307      	strlt	r3, [sp, #28]
 800df20:	bfb8      	it	lt
 800df22:	9204      	strlt	r2, [sp, #16]
 800df24:	7823      	ldrb	r3, [r4, #0]
 800df26:	2b2e      	cmp	r3, #46	; 0x2e
 800df28:	d10c      	bne.n	800df44 <_svfiprintf_r+0x130>
 800df2a:	7863      	ldrb	r3, [r4, #1]
 800df2c:	2b2a      	cmp	r3, #42	; 0x2a
 800df2e:	d135      	bne.n	800df9c <_svfiprintf_r+0x188>
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	1d1a      	adds	r2, r3, #4
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	9203      	str	r2, [sp, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	bfb8      	it	lt
 800df3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800df40:	3402      	adds	r4, #2
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e010 <_svfiprintf_r+0x1fc>
 800df48:	7821      	ldrb	r1, [r4, #0]
 800df4a:	2203      	movs	r2, #3
 800df4c:	4650      	mov	r0, sl
 800df4e:	f7f2 f947 	bl	80001e0 <memchr>
 800df52:	b140      	cbz	r0, 800df66 <_svfiprintf_r+0x152>
 800df54:	2340      	movs	r3, #64	; 0x40
 800df56:	eba0 000a 	sub.w	r0, r0, sl
 800df5a:	fa03 f000 	lsl.w	r0, r3, r0
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	4303      	orrs	r3, r0
 800df62:	3401      	adds	r4, #1
 800df64:	9304      	str	r3, [sp, #16]
 800df66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6a:	4826      	ldr	r0, [pc, #152]	; (800e004 <_svfiprintf_r+0x1f0>)
 800df6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df70:	2206      	movs	r2, #6
 800df72:	f7f2 f935 	bl	80001e0 <memchr>
 800df76:	2800      	cmp	r0, #0
 800df78:	d038      	beq.n	800dfec <_svfiprintf_r+0x1d8>
 800df7a:	4b23      	ldr	r3, [pc, #140]	; (800e008 <_svfiprintf_r+0x1f4>)
 800df7c:	bb1b      	cbnz	r3, 800dfc6 <_svfiprintf_r+0x1b2>
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	3307      	adds	r3, #7
 800df82:	f023 0307 	bic.w	r3, r3, #7
 800df86:	3308      	adds	r3, #8
 800df88:	9303      	str	r3, [sp, #12]
 800df8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8c:	4433      	add	r3, r6
 800df8e:	9309      	str	r3, [sp, #36]	; 0x24
 800df90:	e767      	b.n	800de62 <_svfiprintf_r+0x4e>
 800df92:	fb0c 3202 	mla	r2, ip, r2, r3
 800df96:	460c      	mov	r4, r1
 800df98:	2001      	movs	r0, #1
 800df9a:	e7a5      	b.n	800dee8 <_svfiprintf_r+0xd4>
 800df9c:	2300      	movs	r3, #0
 800df9e:	3401      	adds	r4, #1
 800dfa0:	9305      	str	r3, [sp, #20]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	f04f 0c0a 	mov.w	ip, #10
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfae:	3a30      	subs	r2, #48	; 0x30
 800dfb0:	2a09      	cmp	r2, #9
 800dfb2:	d903      	bls.n	800dfbc <_svfiprintf_r+0x1a8>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0c5      	beq.n	800df44 <_svfiprintf_r+0x130>
 800dfb8:	9105      	str	r1, [sp, #20]
 800dfba:	e7c3      	b.n	800df44 <_svfiprintf_r+0x130>
 800dfbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e7f0      	b.n	800dfa8 <_svfiprintf_r+0x194>
 800dfc6:	ab03      	add	r3, sp, #12
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	462a      	mov	r2, r5
 800dfcc:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <_svfiprintf_r+0x1f8>)
 800dfce:	a904      	add	r1, sp, #16
 800dfd0:	4638      	mov	r0, r7
 800dfd2:	f7fd feb7 	bl	800bd44 <_printf_float>
 800dfd6:	1c42      	adds	r2, r0, #1
 800dfd8:	4606      	mov	r6, r0
 800dfda:	d1d6      	bne.n	800df8a <_svfiprintf_r+0x176>
 800dfdc:	89ab      	ldrh	r3, [r5, #12]
 800dfde:	065b      	lsls	r3, r3, #25
 800dfe0:	f53f af2c 	bmi.w	800de3c <_svfiprintf_r+0x28>
 800dfe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfe6:	b01d      	add	sp, #116	; 0x74
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfec:	ab03      	add	r3, sp, #12
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	462a      	mov	r2, r5
 800dff2:	4b06      	ldr	r3, [pc, #24]	; (800e00c <_svfiprintf_r+0x1f8>)
 800dff4:	a904      	add	r1, sp, #16
 800dff6:	4638      	mov	r0, r7
 800dff8:	f7fe f948 	bl	800c28c <_printf_i>
 800dffc:	e7eb      	b.n	800dfd6 <_svfiprintf_r+0x1c2>
 800dffe:	bf00      	nop
 800e000:	0800fbdc 	.word	0x0800fbdc
 800e004:	0800fbe6 	.word	0x0800fbe6
 800e008:	0800bd45 	.word	0x0800bd45
 800e00c:	0800dd5d 	.word	0x0800dd5d
 800e010:	0800fbe2 	.word	0x0800fbe2

0800e014 <__sfputc_r>:
 800e014:	6893      	ldr	r3, [r2, #8]
 800e016:	3b01      	subs	r3, #1
 800e018:	2b00      	cmp	r3, #0
 800e01a:	b410      	push	{r4}
 800e01c:	6093      	str	r3, [r2, #8]
 800e01e:	da08      	bge.n	800e032 <__sfputc_r+0x1e>
 800e020:	6994      	ldr	r4, [r2, #24]
 800e022:	42a3      	cmp	r3, r4
 800e024:	db01      	blt.n	800e02a <__sfputc_r+0x16>
 800e026:	290a      	cmp	r1, #10
 800e028:	d103      	bne.n	800e032 <__sfputc_r+0x1e>
 800e02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e02e:	f000 b95b 	b.w	800e2e8 <__swbuf_r>
 800e032:	6813      	ldr	r3, [r2, #0]
 800e034:	1c58      	adds	r0, r3, #1
 800e036:	6010      	str	r0, [r2, #0]
 800e038:	7019      	strb	r1, [r3, #0]
 800e03a:	4608      	mov	r0, r1
 800e03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <__sfputs_r>:
 800e042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e044:	4606      	mov	r6, r0
 800e046:	460f      	mov	r7, r1
 800e048:	4614      	mov	r4, r2
 800e04a:	18d5      	adds	r5, r2, r3
 800e04c:	42ac      	cmp	r4, r5
 800e04e:	d101      	bne.n	800e054 <__sfputs_r+0x12>
 800e050:	2000      	movs	r0, #0
 800e052:	e007      	b.n	800e064 <__sfputs_r+0x22>
 800e054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e058:	463a      	mov	r2, r7
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7ff ffda 	bl	800e014 <__sfputc_r>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d1f3      	bne.n	800e04c <__sfputs_r+0xa>
 800e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e068 <_vfiprintf_r>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	460d      	mov	r5, r1
 800e06e:	b09d      	sub	sp, #116	; 0x74
 800e070:	4614      	mov	r4, r2
 800e072:	4698      	mov	r8, r3
 800e074:	4606      	mov	r6, r0
 800e076:	b118      	cbz	r0, 800e080 <_vfiprintf_r+0x18>
 800e078:	6983      	ldr	r3, [r0, #24]
 800e07a:	b90b      	cbnz	r3, 800e080 <_vfiprintf_r+0x18>
 800e07c:	f000 fb16 	bl	800e6ac <__sinit>
 800e080:	4b89      	ldr	r3, [pc, #548]	; (800e2a8 <_vfiprintf_r+0x240>)
 800e082:	429d      	cmp	r5, r3
 800e084:	d11b      	bne.n	800e0be <_vfiprintf_r+0x56>
 800e086:	6875      	ldr	r5, [r6, #4]
 800e088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e08a:	07d9      	lsls	r1, r3, #31
 800e08c:	d405      	bmi.n	800e09a <_vfiprintf_r+0x32>
 800e08e:	89ab      	ldrh	r3, [r5, #12]
 800e090:	059a      	lsls	r2, r3, #22
 800e092:	d402      	bmi.n	800e09a <_vfiprintf_r+0x32>
 800e094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e096:	f000 fba7 	bl	800e7e8 <__retarget_lock_acquire_recursive>
 800e09a:	89ab      	ldrh	r3, [r5, #12]
 800e09c:	071b      	lsls	r3, r3, #28
 800e09e:	d501      	bpl.n	800e0a4 <_vfiprintf_r+0x3c>
 800e0a0:	692b      	ldr	r3, [r5, #16]
 800e0a2:	b9eb      	cbnz	r3, 800e0e0 <_vfiprintf_r+0x78>
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f000 f970 	bl	800e38c <__swsetup_r>
 800e0ac:	b1c0      	cbz	r0, 800e0e0 <_vfiprintf_r+0x78>
 800e0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0b0:	07dc      	lsls	r4, r3, #31
 800e0b2:	d50e      	bpl.n	800e0d2 <_vfiprintf_r+0x6a>
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b8:	b01d      	add	sp, #116	; 0x74
 800e0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0be:	4b7b      	ldr	r3, [pc, #492]	; (800e2ac <_vfiprintf_r+0x244>)
 800e0c0:	429d      	cmp	r5, r3
 800e0c2:	d101      	bne.n	800e0c8 <_vfiprintf_r+0x60>
 800e0c4:	68b5      	ldr	r5, [r6, #8]
 800e0c6:	e7df      	b.n	800e088 <_vfiprintf_r+0x20>
 800e0c8:	4b79      	ldr	r3, [pc, #484]	; (800e2b0 <_vfiprintf_r+0x248>)
 800e0ca:	429d      	cmp	r5, r3
 800e0cc:	bf08      	it	eq
 800e0ce:	68f5      	ldreq	r5, [r6, #12]
 800e0d0:	e7da      	b.n	800e088 <_vfiprintf_r+0x20>
 800e0d2:	89ab      	ldrh	r3, [r5, #12]
 800e0d4:	0598      	lsls	r0, r3, #22
 800e0d6:	d4ed      	bmi.n	800e0b4 <_vfiprintf_r+0x4c>
 800e0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0da:	f000 fb86 	bl	800e7ea <__retarget_lock_release_recursive>
 800e0de:	e7e9      	b.n	800e0b4 <_vfiprintf_r+0x4c>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0e4:	2320      	movs	r3, #32
 800e0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ee:	2330      	movs	r3, #48	; 0x30
 800e0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e2b4 <_vfiprintf_r+0x24c>
 800e0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0f8:	f04f 0901 	mov.w	r9, #1
 800e0fc:	4623      	mov	r3, r4
 800e0fe:	469a      	mov	sl, r3
 800e100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e104:	b10a      	cbz	r2, 800e10a <_vfiprintf_r+0xa2>
 800e106:	2a25      	cmp	r2, #37	; 0x25
 800e108:	d1f9      	bne.n	800e0fe <_vfiprintf_r+0x96>
 800e10a:	ebba 0b04 	subs.w	fp, sl, r4
 800e10e:	d00b      	beq.n	800e128 <_vfiprintf_r+0xc0>
 800e110:	465b      	mov	r3, fp
 800e112:	4622      	mov	r2, r4
 800e114:	4629      	mov	r1, r5
 800e116:	4630      	mov	r0, r6
 800e118:	f7ff ff93 	bl	800e042 <__sfputs_r>
 800e11c:	3001      	adds	r0, #1
 800e11e:	f000 80aa 	beq.w	800e276 <_vfiprintf_r+0x20e>
 800e122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e124:	445a      	add	r2, fp
 800e126:	9209      	str	r2, [sp, #36]	; 0x24
 800e128:	f89a 3000 	ldrb.w	r3, [sl]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 80a2 	beq.w	800e276 <_vfiprintf_r+0x20e>
 800e132:	2300      	movs	r3, #0
 800e134:	f04f 32ff 	mov.w	r2, #4294967295
 800e138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e13c:	f10a 0a01 	add.w	sl, sl, #1
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	9307      	str	r3, [sp, #28]
 800e144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e148:	931a      	str	r3, [sp, #104]	; 0x68
 800e14a:	4654      	mov	r4, sl
 800e14c:	2205      	movs	r2, #5
 800e14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e152:	4858      	ldr	r0, [pc, #352]	; (800e2b4 <_vfiprintf_r+0x24c>)
 800e154:	f7f2 f844 	bl	80001e0 <memchr>
 800e158:	9a04      	ldr	r2, [sp, #16]
 800e15a:	b9d8      	cbnz	r0, 800e194 <_vfiprintf_r+0x12c>
 800e15c:	06d1      	lsls	r1, r2, #27
 800e15e:	bf44      	itt	mi
 800e160:	2320      	movmi	r3, #32
 800e162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e166:	0713      	lsls	r3, r2, #28
 800e168:	bf44      	itt	mi
 800e16a:	232b      	movmi	r3, #43	; 0x2b
 800e16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e170:	f89a 3000 	ldrb.w	r3, [sl]
 800e174:	2b2a      	cmp	r3, #42	; 0x2a
 800e176:	d015      	beq.n	800e1a4 <_vfiprintf_r+0x13c>
 800e178:	9a07      	ldr	r2, [sp, #28]
 800e17a:	4654      	mov	r4, sl
 800e17c:	2000      	movs	r0, #0
 800e17e:	f04f 0c0a 	mov.w	ip, #10
 800e182:	4621      	mov	r1, r4
 800e184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e188:	3b30      	subs	r3, #48	; 0x30
 800e18a:	2b09      	cmp	r3, #9
 800e18c:	d94e      	bls.n	800e22c <_vfiprintf_r+0x1c4>
 800e18e:	b1b0      	cbz	r0, 800e1be <_vfiprintf_r+0x156>
 800e190:	9207      	str	r2, [sp, #28]
 800e192:	e014      	b.n	800e1be <_vfiprintf_r+0x156>
 800e194:	eba0 0308 	sub.w	r3, r0, r8
 800e198:	fa09 f303 	lsl.w	r3, r9, r3
 800e19c:	4313      	orrs	r3, r2
 800e19e:	9304      	str	r3, [sp, #16]
 800e1a0:	46a2      	mov	sl, r4
 800e1a2:	e7d2      	b.n	800e14a <_vfiprintf_r+0xe2>
 800e1a4:	9b03      	ldr	r3, [sp, #12]
 800e1a6:	1d19      	adds	r1, r3, #4
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	9103      	str	r1, [sp, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	bfbb      	ittet	lt
 800e1b0:	425b      	neglt	r3, r3
 800e1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1b6:	9307      	strge	r3, [sp, #28]
 800e1b8:	9307      	strlt	r3, [sp, #28]
 800e1ba:	bfb8      	it	lt
 800e1bc:	9204      	strlt	r2, [sp, #16]
 800e1be:	7823      	ldrb	r3, [r4, #0]
 800e1c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1c2:	d10c      	bne.n	800e1de <_vfiprintf_r+0x176>
 800e1c4:	7863      	ldrb	r3, [r4, #1]
 800e1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1c8:	d135      	bne.n	800e236 <_vfiprintf_r+0x1ce>
 800e1ca:	9b03      	ldr	r3, [sp, #12]
 800e1cc:	1d1a      	adds	r2, r3, #4
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	9203      	str	r2, [sp, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	bfb8      	it	lt
 800e1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1da:	3402      	adds	r4, #2
 800e1dc:	9305      	str	r3, [sp, #20]
 800e1de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2c4 <_vfiprintf_r+0x25c>
 800e1e2:	7821      	ldrb	r1, [r4, #0]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	f7f1 fffa 	bl	80001e0 <memchr>
 800e1ec:	b140      	cbz	r0, 800e200 <_vfiprintf_r+0x198>
 800e1ee:	2340      	movs	r3, #64	; 0x40
 800e1f0:	eba0 000a 	sub.w	r0, r0, sl
 800e1f4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1f8:	9b04      	ldr	r3, [sp, #16]
 800e1fa:	4303      	orrs	r3, r0
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e204:	482c      	ldr	r0, [pc, #176]	; (800e2b8 <_vfiprintf_r+0x250>)
 800e206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e20a:	2206      	movs	r2, #6
 800e20c:	f7f1 ffe8 	bl	80001e0 <memchr>
 800e210:	2800      	cmp	r0, #0
 800e212:	d03f      	beq.n	800e294 <_vfiprintf_r+0x22c>
 800e214:	4b29      	ldr	r3, [pc, #164]	; (800e2bc <_vfiprintf_r+0x254>)
 800e216:	bb1b      	cbnz	r3, 800e260 <_vfiprintf_r+0x1f8>
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	3307      	adds	r3, #7
 800e21c:	f023 0307 	bic.w	r3, r3, #7
 800e220:	3308      	adds	r3, #8
 800e222:	9303      	str	r3, [sp, #12]
 800e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e226:	443b      	add	r3, r7
 800e228:	9309      	str	r3, [sp, #36]	; 0x24
 800e22a:	e767      	b.n	800e0fc <_vfiprintf_r+0x94>
 800e22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e230:	460c      	mov	r4, r1
 800e232:	2001      	movs	r0, #1
 800e234:	e7a5      	b.n	800e182 <_vfiprintf_r+0x11a>
 800e236:	2300      	movs	r3, #0
 800e238:	3401      	adds	r4, #1
 800e23a:	9305      	str	r3, [sp, #20]
 800e23c:	4619      	mov	r1, r3
 800e23e:	f04f 0c0a 	mov.w	ip, #10
 800e242:	4620      	mov	r0, r4
 800e244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e248:	3a30      	subs	r2, #48	; 0x30
 800e24a:	2a09      	cmp	r2, #9
 800e24c:	d903      	bls.n	800e256 <_vfiprintf_r+0x1ee>
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d0c5      	beq.n	800e1de <_vfiprintf_r+0x176>
 800e252:	9105      	str	r1, [sp, #20]
 800e254:	e7c3      	b.n	800e1de <_vfiprintf_r+0x176>
 800e256:	fb0c 2101 	mla	r1, ip, r1, r2
 800e25a:	4604      	mov	r4, r0
 800e25c:	2301      	movs	r3, #1
 800e25e:	e7f0      	b.n	800e242 <_vfiprintf_r+0x1da>
 800e260:	ab03      	add	r3, sp, #12
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	462a      	mov	r2, r5
 800e266:	4b16      	ldr	r3, [pc, #88]	; (800e2c0 <_vfiprintf_r+0x258>)
 800e268:	a904      	add	r1, sp, #16
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7fd fd6a 	bl	800bd44 <_printf_float>
 800e270:	4607      	mov	r7, r0
 800e272:	1c78      	adds	r0, r7, #1
 800e274:	d1d6      	bne.n	800e224 <_vfiprintf_r+0x1bc>
 800e276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e278:	07d9      	lsls	r1, r3, #31
 800e27a:	d405      	bmi.n	800e288 <_vfiprintf_r+0x220>
 800e27c:	89ab      	ldrh	r3, [r5, #12]
 800e27e:	059a      	lsls	r2, r3, #22
 800e280:	d402      	bmi.n	800e288 <_vfiprintf_r+0x220>
 800e282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e284:	f000 fab1 	bl	800e7ea <__retarget_lock_release_recursive>
 800e288:	89ab      	ldrh	r3, [r5, #12]
 800e28a:	065b      	lsls	r3, r3, #25
 800e28c:	f53f af12 	bmi.w	800e0b4 <_vfiprintf_r+0x4c>
 800e290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e292:	e711      	b.n	800e0b8 <_vfiprintf_r+0x50>
 800e294:	ab03      	add	r3, sp, #12
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	462a      	mov	r2, r5
 800e29a:	4b09      	ldr	r3, [pc, #36]	; (800e2c0 <_vfiprintf_r+0x258>)
 800e29c:	a904      	add	r1, sp, #16
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f7fd fff4 	bl	800c28c <_printf_i>
 800e2a4:	e7e4      	b.n	800e270 <_vfiprintf_r+0x208>
 800e2a6:	bf00      	nop
 800e2a8:	0800fc10 	.word	0x0800fc10
 800e2ac:	0800fc30 	.word	0x0800fc30
 800e2b0:	0800fbf0 	.word	0x0800fbf0
 800e2b4:	0800fbdc 	.word	0x0800fbdc
 800e2b8:	0800fbe6 	.word	0x0800fbe6
 800e2bc:	0800bd45 	.word	0x0800bd45
 800e2c0:	0800e043 	.word	0x0800e043
 800e2c4:	0800fbe2 	.word	0x0800fbe2

0800e2c8 <_sbrk_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4d06      	ldr	r5, [pc, #24]	; (800e2e4 <_sbrk_r+0x1c>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	f7f5 ffea 	bl	80042ac <_sbrk>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_sbrk_r+0x1a>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_sbrk_r+0x1a>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20005384 	.word	0x20005384

0800e2e8 <__swbuf_r>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	b118      	cbz	r0, 800e2fa <__swbuf_r+0x12>
 800e2f2:	6983      	ldr	r3, [r0, #24]
 800e2f4:	b90b      	cbnz	r3, 800e2fa <__swbuf_r+0x12>
 800e2f6:	f000 f9d9 	bl	800e6ac <__sinit>
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <__swbuf_r+0x98>)
 800e2fc:	429c      	cmp	r4, r3
 800e2fe:	d12b      	bne.n	800e358 <__swbuf_r+0x70>
 800e300:	686c      	ldr	r4, [r5, #4]
 800e302:	69a3      	ldr	r3, [r4, #24]
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	071a      	lsls	r2, r3, #28
 800e30a:	d52f      	bpl.n	800e36c <__swbuf_r+0x84>
 800e30c:	6923      	ldr	r3, [r4, #16]
 800e30e:	b36b      	cbz	r3, 800e36c <__swbuf_r+0x84>
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	6820      	ldr	r0, [r4, #0]
 800e314:	1ac0      	subs	r0, r0, r3
 800e316:	6963      	ldr	r3, [r4, #20]
 800e318:	b2f6      	uxtb	r6, r6
 800e31a:	4283      	cmp	r3, r0
 800e31c:	4637      	mov	r7, r6
 800e31e:	dc04      	bgt.n	800e32a <__swbuf_r+0x42>
 800e320:	4621      	mov	r1, r4
 800e322:	4628      	mov	r0, r5
 800e324:	f000 f92e 	bl	800e584 <_fflush_r>
 800e328:	bb30      	cbnz	r0, 800e378 <__swbuf_r+0x90>
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	60a3      	str	r3, [r4, #8]
 800e330:	6823      	ldr	r3, [r4, #0]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	6022      	str	r2, [r4, #0]
 800e336:	701e      	strb	r6, [r3, #0]
 800e338:	6963      	ldr	r3, [r4, #20]
 800e33a:	3001      	adds	r0, #1
 800e33c:	4283      	cmp	r3, r0
 800e33e:	d004      	beq.n	800e34a <__swbuf_r+0x62>
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	07db      	lsls	r3, r3, #31
 800e344:	d506      	bpl.n	800e354 <__swbuf_r+0x6c>
 800e346:	2e0a      	cmp	r6, #10
 800e348:	d104      	bne.n	800e354 <__swbuf_r+0x6c>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4628      	mov	r0, r5
 800e34e:	f000 f919 	bl	800e584 <_fflush_r>
 800e352:	b988      	cbnz	r0, 800e378 <__swbuf_r+0x90>
 800e354:	4638      	mov	r0, r7
 800e356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e358:	4b0a      	ldr	r3, [pc, #40]	; (800e384 <__swbuf_r+0x9c>)
 800e35a:	429c      	cmp	r4, r3
 800e35c:	d101      	bne.n	800e362 <__swbuf_r+0x7a>
 800e35e:	68ac      	ldr	r4, [r5, #8]
 800e360:	e7cf      	b.n	800e302 <__swbuf_r+0x1a>
 800e362:	4b09      	ldr	r3, [pc, #36]	; (800e388 <__swbuf_r+0xa0>)
 800e364:	429c      	cmp	r4, r3
 800e366:	bf08      	it	eq
 800e368:	68ec      	ldreq	r4, [r5, #12]
 800e36a:	e7ca      	b.n	800e302 <__swbuf_r+0x1a>
 800e36c:	4621      	mov	r1, r4
 800e36e:	4628      	mov	r0, r5
 800e370:	f000 f80c 	bl	800e38c <__swsetup_r>
 800e374:	2800      	cmp	r0, #0
 800e376:	d0cb      	beq.n	800e310 <__swbuf_r+0x28>
 800e378:	f04f 37ff 	mov.w	r7, #4294967295
 800e37c:	e7ea      	b.n	800e354 <__swbuf_r+0x6c>
 800e37e:	bf00      	nop
 800e380:	0800fc10 	.word	0x0800fc10
 800e384:	0800fc30 	.word	0x0800fc30
 800e388:	0800fbf0 	.word	0x0800fbf0

0800e38c <__swsetup_r>:
 800e38c:	4b32      	ldr	r3, [pc, #200]	; (800e458 <__swsetup_r+0xcc>)
 800e38e:	b570      	push	{r4, r5, r6, lr}
 800e390:	681d      	ldr	r5, [r3, #0]
 800e392:	4606      	mov	r6, r0
 800e394:	460c      	mov	r4, r1
 800e396:	b125      	cbz	r5, 800e3a2 <__swsetup_r+0x16>
 800e398:	69ab      	ldr	r3, [r5, #24]
 800e39a:	b913      	cbnz	r3, 800e3a2 <__swsetup_r+0x16>
 800e39c:	4628      	mov	r0, r5
 800e39e:	f000 f985 	bl	800e6ac <__sinit>
 800e3a2:	4b2e      	ldr	r3, [pc, #184]	; (800e45c <__swsetup_r+0xd0>)
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	d10f      	bne.n	800e3c8 <__swsetup_r+0x3c>
 800e3a8:	686c      	ldr	r4, [r5, #4]
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3b0:	0719      	lsls	r1, r3, #28
 800e3b2:	d42c      	bmi.n	800e40e <__swsetup_r+0x82>
 800e3b4:	06dd      	lsls	r5, r3, #27
 800e3b6:	d411      	bmi.n	800e3dc <__swsetup_r+0x50>
 800e3b8:	2309      	movs	r3, #9
 800e3ba:	6033      	str	r3, [r6, #0]
 800e3bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3c0:	81a3      	strh	r3, [r4, #12]
 800e3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c6:	e03e      	b.n	800e446 <__swsetup_r+0xba>
 800e3c8:	4b25      	ldr	r3, [pc, #148]	; (800e460 <__swsetup_r+0xd4>)
 800e3ca:	429c      	cmp	r4, r3
 800e3cc:	d101      	bne.n	800e3d2 <__swsetup_r+0x46>
 800e3ce:	68ac      	ldr	r4, [r5, #8]
 800e3d0:	e7eb      	b.n	800e3aa <__swsetup_r+0x1e>
 800e3d2:	4b24      	ldr	r3, [pc, #144]	; (800e464 <__swsetup_r+0xd8>)
 800e3d4:	429c      	cmp	r4, r3
 800e3d6:	bf08      	it	eq
 800e3d8:	68ec      	ldreq	r4, [r5, #12]
 800e3da:	e7e6      	b.n	800e3aa <__swsetup_r+0x1e>
 800e3dc:	0758      	lsls	r0, r3, #29
 800e3de:	d512      	bpl.n	800e406 <__swsetup_r+0x7a>
 800e3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3e2:	b141      	cbz	r1, 800e3f6 <__swsetup_r+0x6a>
 800e3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3e8:	4299      	cmp	r1, r3
 800e3ea:	d002      	beq.n	800e3f2 <__swsetup_r+0x66>
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff fbd5 	bl	800db9c <_free_r>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3fc:	81a3      	strh	r3, [r4, #12]
 800e3fe:	2300      	movs	r3, #0
 800e400:	6063      	str	r3, [r4, #4]
 800e402:	6923      	ldr	r3, [r4, #16]
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	f043 0308 	orr.w	r3, r3, #8
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	6923      	ldr	r3, [r4, #16]
 800e410:	b94b      	cbnz	r3, 800e426 <__swsetup_r+0x9a>
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e41c:	d003      	beq.n	800e426 <__swsetup_r+0x9a>
 800e41e:	4621      	mov	r1, r4
 800e420:	4630      	mov	r0, r6
 800e422:	f000 fa09 	bl	800e838 <__smakebuf_r>
 800e426:	89a0      	ldrh	r0, [r4, #12]
 800e428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e42c:	f010 0301 	ands.w	r3, r0, #1
 800e430:	d00a      	beq.n	800e448 <__swsetup_r+0xbc>
 800e432:	2300      	movs	r3, #0
 800e434:	60a3      	str	r3, [r4, #8]
 800e436:	6963      	ldr	r3, [r4, #20]
 800e438:	425b      	negs	r3, r3
 800e43a:	61a3      	str	r3, [r4, #24]
 800e43c:	6923      	ldr	r3, [r4, #16]
 800e43e:	b943      	cbnz	r3, 800e452 <__swsetup_r+0xc6>
 800e440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e444:	d1ba      	bne.n	800e3bc <__swsetup_r+0x30>
 800e446:	bd70      	pop	{r4, r5, r6, pc}
 800e448:	0781      	lsls	r1, r0, #30
 800e44a:	bf58      	it	pl
 800e44c:	6963      	ldrpl	r3, [r4, #20]
 800e44e:	60a3      	str	r3, [r4, #8]
 800e450:	e7f4      	b.n	800e43c <__swsetup_r+0xb0>
 800e452:	2000      	movs	r0, #0
 800e454:	e7f7      	b.n	800e446 <__swsetup_r+0xba>
 800e456:	bf00      	nop
 800e458:	20000040 	.word	0x20000040
 800e45c:	0800fc10 	.word	0x0800fc10
 800e460:	0800fc30 	.word	0x0800fc30
 800e464:	0800fbf0 	.word	0x0800fbf0

0800e468 <abort>:
 800e468:	b508      	push	{r3, lr}
 800e46a:	2006      	movs	r0, #6
 800e46c:	f000 fab4 	bl	800e9d8 <raise>
 800e470:	2001      	movs	r0, #1
 800e472:	f7f5 fea3 	bl	80041bc <_exit>
	...

0800e478 <__sflush_r>:
 800e478:	898a      	ldrh	r2, [r1, #12]
 800e47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47e:	4605      	mov	r5, r0
 800e480:	0710      	lsls	r0, r2, #28
 800e482:	460c      	mov	r4, r1
 800e484:	d458      	bmi.n	800e538 <__sflush_r+0xc0>
 800e486:	684b      	ldr	r3, [r1, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	dc05      	bgt.n	800e498 <__sflush_r+0x20>
 800e48c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	dc02      	bgt.n	800e498 <__sflush_r+0x20>
 800e492:	2000      	movs	r0, #0
 800e494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d0f9      	beq.n	800e492 <__sflush_r+0x1a>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4a4:	682f      	ldr	r7, [r5, #0]
 800e4a6:	602b      	str	r3, [r5, #0]
 800e4a8:	d032      	beq.n	800e510 <__sflush_r+0x98>
 800e4aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	075a      	lsls	r2, r3, #29
 800e4b0:	d505      	bpl.n	800e4be <__sflush_r+0x46>
 800e4b2:	6863      	ldr	r3, [r4, #4]
 800e4b4:	1ac0      	subs	r0, r0, r3
 800e4b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4b8:	b10b      	cbz	r3, 800e4be <__sflush_r+0x46>
 800e4ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4bc:	1ac0      	subs	r0, r0, r3
 800e4be:	2300      	movs	r3, #0
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4c4:	6a21      	ldr	r1, [r4, #32]
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	47b0      	blx	r6
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	89a3      	ldrh	r3, [r4, #12]
 800e4ce:	d106      	bne.n	800e4de <__sflush_r+0x66>
 800e4d0:	6829      	ldr	r1, [r5, #0]
 800e4d2:	291d      	cmp	r1, #29
 800e4d4:	d82c      	bhi.n	800e530 <__sflush_r+0xb8>
 800e4d6:	4a2a      	ldr	r2, [pc, #168]	; (800e580 <__sflush_r+0x108>)
 800e4d8:	40ca      	lsrs	r2, r1
 800e4da:	07d6      	lsls	r6, r2, #31
 800e4dc:	d528      	bpl.n	800e530 <__sflush_r+0xb8>
 800e4de:	2200      	movs	r2, #0
 800e4e0:	6062      	str	r2, [r4, #4]
 800e4e2:	04d9      	lsls	r1, r3, #19
 800e4e4:	6922      	ldr	r2, [r4, #16]
 800e4e6:	6022      	str	r2, [r4, #0]
 800e4e8:	d504      	bpl.n	800e4f4 <__sflush_r+0x7c>
 800e4ea:	1c42      	adds	r2, r0, #1
 800e4ec:	d101      	bne.n	800e4f2 <__sflush_r+0x7a>
 800e4ee:	682b      	ldr	r3, [r5, #0]
 800e4f0:	b903      	cbnz	r3, 800e4f4 <__sflush_r+0x7c>
 800e4f2:	6560      	str	r0, [r4, #84]	; 0x54
 800e4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4f6:	602f      	str	r7, [r5, #0]
 800e4f8:	2900      	cmp	r1, #0
 800e4fa:	d0ca      	beq.n	800e492 <__sflush_r+0x1a>
 800e4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e500:	4299      	cmp	r1, r3
 800e502:	d002      	beq.n	800e50a <__sflush_r+0x92>
 800e504:	4628      	mov	r0, r5
 800e506:	f7ff fb49 	bl	800db9c <_free_r>
 800e50a:	2000      	movs	r0, #0
 800e50c:	6360      	str	r0, [r4, #52]	; 0x34
 800e50e:	e7c1      	b.n	800e494 <__sflush_r+0x1c>
 800e510:	6a21      	ldr	r1, [r4, #32]
 800e512:	2301      	movs	r3, #1
 800e514:	4628      	mov	r0, r5
 800e516:	47b0      	blx	r6
 800e518:	1c41      	adds	r1, r0, #1
 800e51a:	d1c7      	bne.n	800e4ac <__sflush_r+0x34>
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0c4      	beq.n	800e4ac <__sflush_r+0x34>
 800e522:	2b1d      	cmp	r3, #29
 800e524:	d001      	beq.n	800e52a <__sflush_r+0xb2>
 800e526:	2b16      	cmp	r3, #22
 800e528:	d101      	bne.n	800e52e <__sflush_r+0xb6>
 800e52a:	602f      	str	r7, [r5, #0]
 800e52c:	e7b1      	b.n	800e492 <__sflush_r+0x1a>
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e534:	81a3      	strh	r3, [r4, #12]
 800e536:	e7ad      	b.n	800e494 <__sflush_r+0x1c>
 800e538:	690f      	ldr	r7, [r1, #16]
 800e53a:	2f00      	cmp	r7, #0
 800e53c:	d0a9      	beq.n	800e492 <__sflush_r+0x1a>
 800e53e:	0793      	lsls	r3, r2, #30
 800e540:	680e      	ldr	r6, [r1, #0]
 800e542:	bf08      	it	eq
 800e544:	694b      	ldreq	r3, [r1, #20]
 800e546:	600f      	str	r7, [r1, #0]
 800e548:	bf18      	it	ne
 800e54a:	2300      	movne	r3, #0
 800e54c:	eba6 0807 	sub.w	r8, r6, r7
 800e550:	608b      	str	r3, [r1, #8]
 800e552:	f1b8 0f00 	cmp.w	r8, #0
 800e556:	dd9c      	ble.n	800e492 <__sflush_r+0x1a>
 800e558:	6a21      	ldr	r1, [r4, #32]
 800e55a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e55c:	4643      	mov	r3, r8
 800e55e:	463a      	mov	r2, r7
 800e560:	4628      	mov	r0, r5
 800e562:	47b0      	blx	r6
 800e564:	2800      	cmp	r0, #0
 800e566:	dc06      	bgt.n	800e576 <__sflush_r+0xfe>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e56e:	81a3      	strh	r3, [r4, #12]
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	e78e      	b.n	800e494 <__sflush_r+0x1c>
 800e576:	4407      	add	r7, r0
 800e578:	eba8 0800 	sub.w	r8, r8, r0
 800e57c:	e7e9      	b.n	800e552 <__sflush_r+0xda>
 800e57e:	bf00      	nop
 800e580:	20400001 	.word	0x20400001

0800e584 <_fflush_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	690b      	ldr	r3, [r1, #16]
 800e588:	4605      	mov	r5, r0
 800e58a:	460c      	mov	r4, r1
 800e58c:	b913      	cbnz	r3, 800e594 <_fflush_r+0x10>
 800e58e:	2500      	movs	r5, #0
 800e590:	4628      	mov	r0, r5
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	b118      	cbz	r0, 800e59e <_fflush_r+0x1a>
 800e596:	6983      	ldr	r3, [r0, #24]
 800e598:	b90b      	cbnz	r3, 800e59e <_fflush_r+0x1a>
 800e59a:	f000 f887 	bl	800e6ac <__sinit>
 800e59e:	4b14      	ldr	r3, [pc, #80]	; (800e5f0 <_fflush_r+0x6c>)
 800e5a0:	429c      	cmp	r4, r3
 800e5a2:	d11b      	bne.n	800e5dc <_fflush_r+0x58>
 800e5a4:	686c      	ldr	r4, [r5, #4]
 800e5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0ef      	beq.n	800e58e <_fflush_r+0xa>
 800e5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5b0:	07d0      	lsls	r0, r2, #31
 800e5b2:	d404      	bmi.n	800e5be <_fflush_r+0x3a>
 800e5b4:	0599      	lsls	r1, r3, #22
 800e5b6:	d402      	bmi.n	800e5be <_fflush_r+0x3a>
 800e5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ba:	f000 f915 	bl	800e7e8 <__retarget_lock_acquire_recursive>
 800e5be:	4628      	mov	r0, r5
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	f7ff ff59 	bl	800e478 <__sflush_r>
 800e5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5c8:	07da      	lsls	r2, r3, #31
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	d4e0      	bmi.n	800e590 <_fflush_r+0xc>
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	059b      	lsls	r3, r3, #22
 800e5d2:	d4dd      	bmi.n	800e590 <_fflush_r+0xc>
 800e5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5d6:	f000 f908 	bl	800e7ea <__retarget_lock_release_recursive>
 800e5da:	e7d9      	b.n	800e590 <_fflush_r+0xc>
 800e5dc:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <_fflush_r+0x70>)
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d101      	bne.n	800e5e6 <_fflush_r+0x62>
 800e5e2:	68ac      	ldr	r4, [r5, #8]
 800e5e4:	e7df      	b.n	800e5a6 <_fflush_r+0x22>
 800e5e6:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <_fflush_r+0x74>)
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	bf08      	it	eq
 800e5ec:	68ec      	ldreq	r4, [r5, #12]
 800e5ee:	e7da      	b.n	800e5a6 <_fflush_r+0x22>
 800e5f0:	0800fc10 	.word	0x0800fc10
 800e5f4:	0800fc30 	.word	0x0800fc30
 800e5f8:	0800fbf0 	.word	0x0800fbf0

0800e5fc <std>:
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	b510      	push	{r4, lr}
 800e600:	4604      	mov	r4, r0
 800e602:	e9c0 3300 	strd	r3, r3, [r0]
 800e606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e60a:	6083      	str	r3, [r0, #8]
 800e60c:	8181      	strh	r1, [r0, #12]
 800e60e:	6643      	str	r3, [r0, #100]	; 0x64
 800e610:	81c2      	strh	r2, [r0, #14]
 800e612:	6183      	str	r3, [r0, #24]
 800e614:	4619      	mov	r1, r3
 800e616:	2208      	movs	r2, #8
 800e618:	305c      	adds	r0, #92	; 0x5c
 800e61a:	f7fd faeb 	bl	800bbf4 <memset>
 800e61e:	4b05      	ldr	r3, [pc, #20]	; (800e634 <std+0x38>)
 800e620:	6263      	str	r3, [r4, #36]	; 0x24
 800e622:	4b05      	ldr	r3, [pc, #20]	; (800e638 <std+0x3c>)
 800e624:	62a3      	str	r3, [r4, #40]	; 0x28
 800e626:	4b05      	ldr	r3, [pc, #20]	; (800e63c <std+0x40>)
 800e628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e62a:	4b05      	ldr	r3, [pc, #20]	; (800e640 <std+0x44>)
 800e62c:	6224      	str	r4, [r4, #32]
 800e62e:	6323      	str	r3, [r4, #48]	; 0x30
 800e630:	bd10      	pop	{r4, pc}
 800e632:	bf00      	nop
 800e634:	0800ea11 	.word	0x0800ea11
 800e638:	0800ea33 	.word	0x0800ea33
 800e63c:	0800ea6b 	.word	0x0800ea6b
 800e640:	0800ea8f 	.word	0x0800ea8f

0800e644 <_cleanup_r>:
 800e644:	4901      	ldr	r1, [pc, #4]	; (800e64c <_cleanup_r+0x8>)
 800e646:	f000 b8af 	b.w	800e7a8 <_fwalk_reent>
 800e64a:	bf00      	nop
 800e64c:	0800e585 	.word	0x0800e585

0800e650 <__sfmoreglue>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	2268      	movs	r2, #104	; 0x68
 800e654:	1e4d      	subs	r5, r1, #1
 800e656:	4355      	muls	r5, r2
 800e658:	460e      	mov	r6, r1
 800e65a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e65e:	f7ff fb09 	bl	800dc74 <_malloc_r>
 800e662:	4604      	mov	r4, r0
 800e664:	b140      	cbz	r0, 800e678 <__sfmoreglue+0x28>
 800e666:	2100      	movs	r1, #0
 800e668:	e9c0 1600 	strd	r1, r6, [r0]
 800e66c:	300c      	adds	r0, #12
 800e66e:	60a0      	str	r0, [r4, #8]
 800e670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e674:	f7fd fabe 	bl	800bbf4 <memset>
 800e678:	4620      	mov	r0, r4
 800e67a:	bd70      	pop	{r4, r5, r6, pc}

0800e67c <__sfp_lock_acquire>:
 800e67c:	4801      	ldr	r0, [pc, #4]	; (800e684 <__sfp_lock_acquire+0x8>)
 800e67e:	f000 b8b3 	b.w	800e7e8 <__retarget_lock_acquire_recursive>
 800e682:	bf00      	nop
 800e684:	20005381 	.word	0x20005381

0800e688 <__sfp_lock_release>:
 800e688:	4801      	ldr	r0, [pc, #4]	; (800e690 <__sfp_lock_release+0x8>)
 800e68a:	f000 b8ae 	b.w	800e7ea <__retarget_lock_release_recursive>
 800e68e:	bf00      	nop
 800e690:	20005381 	.word	0x20005381

0800e694 <__sinit_lock_acquire>:
 800e694:	4801      	ldr	r0, [pc, #4]	; (800e69c <__sinit_lock_acquire+0x8>)
 800e696:	f000 b8a7 	b.w	800e7e8 <__retarget_lock_acquire_recursive>
 800e69a:	bf00      	nop
 800e69c:	20005382 	.word	0x20005382

0800e6a0 <__sinit_lock_release>:
 800e6a0:	4801      	ldr	r0, [pc, #4]	; (800e6a8 <__sinit_lock_release+0x8>)
 800e6a2:	f000 b8a2 	b.w	800e7ea <__retarget_lock_release_recursive>
 800e6a6:	bf00      	nop
 800e6a8:	20005382 	.word	0x20005382

0800e6ac <__sinit>:
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	f7ff fff0 	bl	800e694 <__sinit_lock_acquire>
 800e6b4:	69a3      	ldr	r3, [r4, #24]
 800e6b6:	b11b      	cbz	r3, 800e6c0 <__sinit+0x14>
 800e6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6bc:	f7ff bff0 	b.w	800e6a0 <__sinit_lock_release>
 800e6c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6c4:	6523      	str	r3, [r4, #80]	; 0x50
 800e6c6:	4b13      	ldr	r3, [pc, #76]	; (800e714 <__sinit+0x68>)
 800e6c8:	4a13      	ldr	r2, [pc, #76]	; (800e718 <__sinit+0x6c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6ce:	42a3      	cmp	r3, r4
 800e6d0:	bf04      	itt	eq
 800e6d2:	2301      	moveq	r3, #1
 800e6d4:	61a3      	streq	r3, [r4, #24]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 f820 	bl	800e71c <__sfp>
 800e6dc:	6060      	str	r0, [r4, #4]
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 f81c 	bl	800e71c <__sfp>
 800e6e4:	60a0      	str	r0, [r4, #8]
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f000 f818 	bl	800e71c <__sfp>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	60e0      	str	r0, [r4, #12]
 800e6f0:	2104      	movs	r1, #4
 800e6f2:	6860      	ldr	r0, [r4, #4]
 800e6f4:	f7ff ff82 	bl	800e5fc <std>
 800e6f8:	68a0      	ldr	r0, [r4, #8]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	2109      	movs	r1, #9
 800e6fe:	f7ff ff7d 	bl	800e5fc <std>
 800e702:	68e0      	ldr	r0, [r4, #12]
 800e704:	2202      	movs	r2, #2
 800e706:	2112      	movs	r1, #18
 800e708:	f7ff ff78 	bl	800e5fc <std>
 800e70c:	2301      	movs	r3, #1
 800e70e:	61a3      	str	r3, [r4, #24]
 800e710:	e7d2      	b.n	800e6b8 <__sinit+0xc>
 800e712:	bf00      	nop
 800e714:	0800f81c 	.word	0x0800f81c
 800e718:	0800e645 	.word	0x0800e645

0800e71c <__sfp>:
 800e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71e:	4607      	mov	r7, r0
 800e720:	f7ff ffac 	bl	800e67c <__sfp_lock_acquire>
 800e724:	4b1e      	ldr	r3, [pc, #120]	; (800e7a0 <__sfp+0x84>)
 800e726:	681e      	ldr	r6, [r3, #0]
 800e728:	69b3      	ldr	r3, [r6, #24]
 800e72a:	b913      	cbnz	r3, 800e732 <__sfp+0x16>
 800e72c:	4630      	mov	r0, r6
 800e72e:	f7ff ffbd 	bl	800e6ac <__sinit>
 800e732:	3648      	adds	r6, #72	; 0x48
 800e734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e738:	3b01      	subs	r3, #1
 800e73a:	d503      	bpl.n	800e744 <__sfp+0x28>
 800e73c:	6833      	ldr	r3, [r6, #0]
 800e73e:	b30b      	cbz	r3, 800e784 <__sfp+0x68>
 800e740:	6836      	ldr	r6, [r6, #0]
 800e742:	e7f7      	b.n	800e734 <__sfp+0x18>
 800e744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e748:	b9d5      	cbnz	r5, 800e780 <__sfp+0x64>
 800e74a:	4b16      	ldr	r3, [pc, #88]	; (800e7a4 <__sfp+0x88>)
 800e74c:	60e3      	str	r3, [r4, #12]
 800e74e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e752:	6665      	str	r5, [r4, #100]	; 0x64
 800e754:	f000 f847 	bl	800e7e6 <__retarget_lock_init_recursive>
 800e758:	f7ff ff96 	bl	800e688 <__sfp_lock_release>
 800e75c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e764:	6025      	str	r5, [r4, #0]
 800e766:	61a5      	str	r5, [r4, #24]
 800e768:	2208      	movs	r2, #8
 800e76a:	4629      	mov	r1, r5
 800e76c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e770:	f7fd fa40 	bl	800bbf4 <memset>
 800e774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e77c:	4620      	mov	r0, r4
 800e77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e780:	3468      	adds	r4, #104	; 0x68
 800e782:	e7d9      	b.n	800e738 <__sfp+0x1c>
 800e784:	2104      	movs	r1, #4
 800e786:	4638      	mov	r0, r7
 800e788:	f7ff ff62 	bl	800e650 <__sfmoreglue>
 800e78c:	4604      	mov	r4, r0
 800e78e:	6030      	str	r0, [r6, #0]
 800e790:	2800      	cmp	r0, #0
 800e792:	d1d5      	bne.n	800e740 <__sfp+0x24>
 800e794:	f7ff ff78 	bl	800e688 <__sfp_lock_release>
 800e798:	230c      	movs	r3, #12
 800e79a:	603b      	str	r3, [r7, #0]
 800e79c:	e7ee      	b.n	800e77c <__sfp+0x60>
 800e79e:	bf00      	nop
 800e7a0:	0800f81c 	.word	0x0800f81c
 800e7a4:	ffff0001 	.word	0xffff0001

0800e7a8 <_fwalk_reent>:
 800e7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	4688      	mov	r8, r1
 800e7b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7b4:	2700      	movs	r7, #0
 800e7b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7ba:	f1b9 0901 	subs.w	r9, r9, #1
 800e7be:	d505      	bpl.n	800e7cc <_fwalk_reent+0x24>
 800e7c0:	6824      	ldr	r4, [r4, #0]
 800e7c2:	2c00      	cmp	r4, #0
 800e7c4:	d1f7      	bne.n	800e7b6 <_fwalk_reent+0xe>
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7cc:	89ab      	ldrh	r3, [r5, #12]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d907      	bls.n	800e7e2 <_fwalk_reent+0x3a>
 800e7d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	d003      	beq.n	800e7e2 <_fwalk_reent+0x3a>
 800e7da:	4629      	mov	r1, r5
 800e7dc:	4630      	mov	r0, r6
 800e7de:	47c0      	blx	r8
 800e7e0:	4307      	orrs	r7, r0
 800e7e2:	3568      	adds	r5, #104	; 0x68
 800e7e4:	e7e9      	b.n	800e7ba <_fwalk_reent+0x12>

0800e7e6 <__retarget_lock_init_recursive>:
 800e7e6:	4770      	bx	lr

0800e7e8 <__retarget_lock_acquire_recursive>:
 800e7e8:	4770      	bx	lr

0800e7ea <__retarget_lock_release_recursive>:
 800e7ea:	4770      	bx	lr

0800e7ec <__swhatbuf_r>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	460e      	mov	r6, r1
 800e7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f4:	2900      	cmp	r1, #0
 800e7f6:	b096      	sub	sp, #88	; 0x58
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	461d      	mov	r5, r3
 800e7fc:	da08      	bge.n	800e810 <__swhatbuf_r+0x24>
 800e7fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	602a      	str	r2, [r5, #0]
 800e806:	061a      	lsls	r2, r3, #24
 800e808:	d410      	bmi.n	800e82c <__swhatbuf_r+0x40>
 800e80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e80e:	e00e      	b.n	800e82e <__swhatbuf_r+0x42>
 800e810:	466a      	mov	r2, sp
 800e812:	f000 f96f 	bl	800eaf4 <_fstat_r>
 800e816:	2800      	cmp	r0, #0
 800e818:	dbf1      	blt.n	800e7fe <__swhatbuf_r+0x12>
 800e81a:	9a01      	ldr	r2, [sp, #4]
 800e81c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e824:	425a      	negs	r2, r3
 800e826:	415a      	adcs	r2, r3
 800e828:	602a      	str	r2, [r5, #0]
 800e82a:	e7ee      	b.n	800e80a <__swhatbuf_r+0x1e>
 800e82c:	2340      	movs	r3, #64	; 0x40
 800e82e:	2000      	movs	r0, #0
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	b016      	add	sp, #88	; 0x58
 800e834:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e838 <__smakebuf_r>:
 800e838:	898b      	ldrh	r3, [r1, #12]
 800e83a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e83c:	079d      	lsls	r5, r3, #30
 800e83e:	4606      	mov	r6, r0
 800e840:	460c      	mov	r4, r1
 800e842:	d507      	bpl.n	800e854 <__smakebuf_r+0x1c>
 800e844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	2301      	movs	r3, #1
 800e84e:	6163      	str	r3, [r4, #20]
 800e850:	b002      	add	sp, #8
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	ab01      	add	r3, sp, #4
 800e856:	466a      	mov	r2, sp
 800e858:	f7ff ffc8 	bl	800e7ec <__swhatbuf_r>
 800e85c:	9900      	ldr	r1, [sp, #0]
 800e85e:	4605      	mov	r5, r0
 800e860:	4630      	mov	r0, r6
 800e862:	f7ff fa07 	bl	800dc74 <_malloc_r>
 800e866:	b948      	cbnz	r0, 800e87c <__smakebuf_r+0x44>
 800e868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e86c:	059a      	lsls	r2, r3, #22
 800e86e:	d4ef      	bmi.n	800e850 <__smakebuf_r+0x18>
 800e870:	f023 0303 	bic.w	r3, r3, #3
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	e7e3      	b.n	800e844 <__smakebuf_r+0xc>
 800e87c:	4b0d      	ldr	r3, [pc, #52]	; (800e8b4 <__smakebuf_r+0x7c>)
 800e87e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e888:	81a3      	strh	r3, [r4, #12]
 800e88a:	9b00      	ldr	r3, [sp, #0]
 800e88c:	6163      	str	r3, [r4, #20]
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	6120      	str	r0, [r4, #16]
 800e892:	b15b      	cbz	r3, 800e8ac <__smakebuf_r+0x74>
 800e894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e898:	4630      	mov	r0, r6
 800e89a:	f000 f93d 	bl	800eb18 <_isatty_r>
 800e89e:	b128      	cbz	r0, 800e8ac <__smakebuf_r+0x74>
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	f043 0301 	orr.w	r3, r3, #1
 800e8aa:	81a3      	strh	r3, [r4, #12]
 800e8ac:	89a0      	ldrh	r0, [r4, #12]
 800e8ae:	4305      	orrs	r5, r0
 800e8b0:	81a5      	strh	r5, [r4, #12]
 800e8b2:	e7cd      	b.n	800e850 <__smakebuf_r+0x18>
 800e8b4:	0800e645 	.word	0x0800e645

0800e8b8 <__ascii_mbtowc>:
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	b901      	cbnz	r1, 800e8be <__ascii_mbtowc+0x6>
 800e8bc:	a901      	add	r1, sp, #4
 800e8be:	b142      	cbz	r2, 800e8d2 <__ascii_mbtowc+0x1a>
 800e8c0:	b14b      	cbz	r3, 800e8d6 <__ascii_mbtowc+0x1e>
 800e8c2:	7813      	ldrb	r3, [r2, #0]
 800e8c4:	600b      	str	r3, [r1, #0]
 800e8c6:	7812      	ldrb	r2, [r2, #0]
 800e8c8:	1e10      	subs	r0, r2, #0
 800e8ca:	bf18      	it	ne
 800e8cc:	2001      	movne	r0, #1
 800e8ce:	b002      	add	sp, #8
 800e8d0:	4770      	bx	lr
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	e7fb      	b.n	800e8ce <__ascii_mbtowc+0x16>
 800e8d6:	f06f 0001 	mvn.w	r0, #1
 800e8da:	e7f8      	b.n	800e8ce <__ascii_mbtowc+0x16>

0800e8dc <memmove>:
 800e8dc:	4288      	cmp	r0, r1
 800e8de:	b510      	push	{r4, lr}
 800e8e0:	eb01 0402 	add.w	r4, r1, r2
 800e8e4:	d902      	bls.n	800e8ec <memmove+0x10>
 800e8e6:	4284      	cmp	r4, r0
 800e8e8:	4623      	mov	r3, r4
 800e8ea:	d807      	bhi.n	800e8fc <memmove+0x20>
 800e8ec:	1e43      	subs	r3, r0, #1
 800e8ee:	42a1      	cmp	r1, r4
 800e8f0:	d008      	beq.n	800e904 <memmove+0x28>
 800e8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8fa:	e7f8      	b.n	800e8ee <memmove+0x12>
 800e8fc:	4402      	add	r2, r0
 800e8fe:	4601      	mov	r1, r0
 800e900:	428a      	cmp	r2, r1
 800e902:	d100      	bne.n	800e906 <memmove+0x2a>
 800e904:	bd10      	pop	{r4, pc}
 800e906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e90e:	e7f7      	b.n	800e900 <memmove+0x24>

0800e910 <__malloc_lock>:
 800e910:	4801      	ldr	r0, [pc, #4]	; (800e918 <__malloc_lock+0x8>)
 800e912:	f7ff bf69 	b.w	800e7e8 <__retarget_lock_acquire_recursive>
 800e916:	bf00      	nop
 800e918:	20005380 	.word	0x20005380

0800e91c <__malloc_unlock>:
 800e91c:	4801      	ldr	r0, [pc, #4]	; (800e924 <__malloc_unlock+0x8>)
 800e91e:	f7ff bf64 	b.w	800e7ea <__retarget_lock_release_recursive>
 800e922:	bf00      	nop
 800e924:	20005380 	.word	0x20005380

0800e928 <_realloc_r>:
 800e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92c:	4680      	mov	r8, r0
 800e92e:	4614      	mov	r4, r2
 800e930:	460e      	mov	r6, r1
 800e932:	b921      	cbnz	r1, 800e93e <_realloc_r+0x16>
 800e934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	4611      	mov	r1, r2
 800e93a:	f7ff b99b 	b.w	800dc74 <_malloc_r>
 800e93e:	b92a      	cbnz	r2, 800e94c <_realloc_r+0x24>
 800e940:	f7ff f92c 	bl	800db9c <_free_r>
 800e944:	4625      	mov	r5, r4
 800e946:	4628      	mov	r0, r5
 800e948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e94c:	f000 f906 	bl	800eb5c <_malloc_usable_size_r>
 800e950:	4284      	cmp	r4, r0
 800e952:	4607      	mov	r7, r0
 800e954:	d802      	bhi.n	800e95c <_realloc_r+0x34>
 800e956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e95a:	d812      	bhi.n	800e982 <_realloc_r+0x5a>
 800e95c:	4621      	mov	r1, r4
 800e95e:	4640      	mov	r0, r8
 800e960:	f7ff f988 	bl	800dc74 <_malloc_r>
 800e964:	4605      	mov	r5, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	d0ed      	beq.n	800e946 <_realloc_r+0x1e>
 800e96a:	42bc      	cmp	r4, r7
 800e96c:	4622      	mov	r2, r4
 800e96e:	4631      	mov	r1, r6
 800e970:	bf28      	it	cs
 800e972:	463a      	movcs	r2, r7
 800e974:	f7fd f930 	bl	800bbd8 <memcpy>
 800e978:	4631      	mov	r1, r6
 800e97a:	4640      	mov	r0, r8
 800e97c:	f7ff f90e 	bl	800db9c <_free_r>
 800e980:	e7e1      	b.n	800e946 <_realloc_r+0x1e>
 800e982:	4635      	mov	r5, r6
 800e984:	e7df      	b.n	800e946 <_realloc_r+0x1e>

0800e986 <_raise_r>:
 800e986:	291f      	cmp	r1, #31
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4604      	mov	r4, r0
 800e98c:	460d      	mov	r5, r1
 800e98e:	d904      	bls.n	800e99a <_raise_r+0x14>
 800e990:	2316      	movs	r3, #22
 800e992:	6003      	str	r3, [r0, #0]
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e99c:	b112      	cbz	r2, 800e9a4 <_raise_r+0x1e>
 800e99e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9a2:	b94b      	cbnz	r3, 800e9b8 <_raise_r+0x32>
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 f831 	bl	800ea0c <_getpid_r>
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9b4:	f000 b818 	b.w	800e9e8 <_kill_r>
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d00a      	beq.n	800e9d2 <_raise_r+0x4c>
 800e9bc:	1c59      	adds	r1, r3, #1
 800e9be:	d103      	bne.n	800e9c8 <_raise_r+0x42>
 800e9c0:	2316      	movs	r3, #22
 800e9c2:	6003      	str	r3, [r0, #0]
 800e9c4:	2001      	movs	r0, #1
 800e9c6:	e7e7      	b.n	800e998 <_raise_r+0x12>
 800e9c8:	2400      	movs	r4, #0
 800e9ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	4798      	blx	r3
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e7e0      	b.n	800e998 <_raise_r+0x12>
	...

0800e9d8 <raise>:
 800e9d8:	4b02      	ldr	r3, [pc, #8]	; (800e9e4 <raise+0xc>)
 800e9da:	4601      	mov	r1, r0
 800e9dc:	6818      	ldr	r0, [r3, #0]
 800e9de:	f7ff bfd2 	b.w	800e986 <_raise_r>
 800e9e2:	bf00      	nop
 800e9e4:	20000040 	.word	0x20000040

0800e9e8 <_kill_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d07      	ldr	r5, [pc, #28]	; (800ea08 <_kill_r+0x20>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	f7f5 fbd1 	bl	800419c <_kill>
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	d102      	bne.n	800ea04 <_kill_r+0x1c>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b103      	cbz	r3, 800ea04 <_kill_r+0x1c>
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	bf00      	nop
 800ea08:	20005384 	.word	0x20005384

0800ea0c <_getpid_r>:
 800ea0c:	f7f5 bbbe 	b.w	800418c <_getpid>

0800ea10 <__sread>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	460c      	mov	r4, r1
 800ea14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea18:	f000 f8a8 	bl	800eb6c <_read_r>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	bfab      	itete	ge
 800ea20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea22:	89a3      	ldrhlt	r3, [r4, #12]
 800ea24:	181b      	addge	r3, r3, r0
 800ea26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea2a:	bfac      	ite	ge
 800ea2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea2e:	81a3      	strhlt	r3, [r4, #12]
 800ea30:	bd10      	pop	{r4, pc}

0800ea32 <__swrite>:
 800ea32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea36:	461f      	mov	r7, r3
 800ea38:	898b      	ldrh	r3, [r1, #12]
 800ea3a:	05db      	lsls	r3, r3, #23
 800ea3c:	4605      	mov	r5, r0
 800ea3e:	460c      	mov	r4, r1
 800ea40:	4616      	mov	r6, r2
 800ea42:	d505      	bpl.n	800ea50 <__swrite+0x1e>
 800ea44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea48:	2302      	movs	r3, #2
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f000 f874 	bl	800eb38 <_lseek_r>
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea5a:	81a3      	strh	r3, [r4, #12]
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	463b      	mov	r3, r7
 800ea60:	4628      	mov	r0, r5
 800ea62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea66:	f000 b823 	b.w	800eab0 <_write_r>

0800ea6a <__sseek>:
 800ea6a:	b510      	push	{r4, lr}
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea72:	f000 f861 	bl	800eb38 <_lseek_r>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	89a3      	ldrh	r3, [r4, #12]
 800ea7a:	bf15      	itete	ne
 800ea7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea86:	81a3      	strheq	r3, [r4, #12]
 800ea88:	bf18      	it	ne
 800ea8a:	81a3      	strhne	r3, [r4, #12]
 800ea8c:	bd10      	pop	{r4, pc}

0800ea8e <__sclose>:
 800ea8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea92:	f000 b81f 	b.w	800ead4 <_close_r>

0800ea96 <__ascii_wctomb>:
 800ea96:	b149      	cbz	r1, 800eaac <__ascii_wctomb+0x16>
 800ea98:	2aff      	cmp	r2, #255	; 0xff
 800ea9a:	bf85      	ittet	hi
 800ea9c:	238a      	movhi	r3, #138	; 0x8a
 800ea9e:	6003      	strhi	r3, [r0, #0]
 800eaa0:	700a      	strbls	r2, [r1, #0]
 800eaa2:	f04f 30ff 	movhi.w	r0, #4294967295
 800eaa6:	bf98      	it	ls
 800eaa8:	2001      	movls	r0, #1
 800eaaa:	4770      	bx	lr
 800eaac:	4608      	mov	r0, r1
 800eaae:	4770      	bx	lr

0800eab0 <_write_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4d07      	ldr	r5, [pc, #28]	; (800ead0 <_write_r+0x20>)
 800eab4:	4604      	mov	r4, r0
 800eab6:	4608      	mov	r0, r1
 800eab8:	4611      	mov	r1, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	602a      	str	r2, [r5, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f5 fba3 	bl	800420a <_write>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_write_r+0x1e>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_write_r+0x1e>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20005384 	.word	0x20005384

0800ead4 <_close_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4d06      	ldr	r5, [pc, #24]	; (800eaf0 <_close_r+0x1c>)
 800ead8:	2300      	movs	r3, #0
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	602b      	str	r3, [r5, #0]
 800eae0:	f7f5 fbaf 	bl	8004242 <_close>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_close_r+0x1a>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_close_r+0x1a>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	20005384 	.word	0x20005384

0800eaf4 <_fstat_r>:
 800eaf4:	b538      	push	{r3, r4, r5, lr}
 800eaf6:	4d07      	ldr	r5, [pc, #28]	; (800eb14 <_fstat_r+0x20>)
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4604      	mov	r4, r0
 800eafc:	4608      	mov	r0, r1
 800eafe:	4611      	mov	r1, r2
 800eb00:	602b      	str	r3, [r5, #0]
 800eb02:	f7f5 fbaa 	bl	800425a <_fstat>
 800eb06:	1c43      	adds	r3, r0, #1
 800eb08:	d102      	bne.n	800eb10 <_fstat_r+0x1c>
 800eb0a:	682b      	ldr	r3, [r5, #0]
 800eb0c:	b103      	cbz	r3, 800eb10 <_fstat_r+0x1c>
 800eb0e:	6023      	str	r3, [r4, #0]
 800eb10:	bd38      	pop	{r3, r4, r5, pc}
 800eb12:	bf00      	nop
 800eb14:	20005384 	.word	0x20005384

0800eb18 <_isatty_r>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	4d06      	ldr	r5, [pc, #24]	; (800eb34 <_isatty_r+0x1c>)
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	4604      	mov	r4, r0
 800eb20:	4608      	mov	r0, r1
 800eb22:	602b      	str	r3, [r5, #0]
 800eb24:	f7f5 fba9 	bl	800427a <_isatty>
 800eb28:	1c43      	adds	r3, r0, #1
 800eb2a:	d102      	bne.n	800eb32 <_isatty_r+0x1a>
 800eb2c:	682b      	ldr	r3, [r5, #0]
 800eb2e:	b103      	cbz	r3, 800eb32 <_isatty_r+0x1a>
 800eb30:	6023      	str	r3, [r4, #0]
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	20005384 	.word	0x20005384

0800eb38 <_lseek_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d07      	ldr	r5, [pc, #28]	; (800eb58 <_lseek_r+0x20>)
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	4608      	mov	r0, r1
 800eb40:	4611      	mov	r1, r2
 800eb42:	2200      	movs	r2, #0
 800eb44:	602a      	str	r2, [r5, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	f7f5 fba2 	bl	8004290 <_lseek>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d102      	bne.n	800eb56 <_lseek_r+0x1e>
 800eb50:	682b      	ldr	r3, [r5, #0]
 800eb52:	b103      	cbz	r3, 800eb56 <_lseek_r+0x1e>
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	20005384 	.word	0x20005384

0800eb5c <_malloc_usable_size_r>:
 800eb5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb60:	1f18      	subs	r0, r3, #4
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	bfbc      	itt	lt
 800eb66:	580b      	ldrlt	r3, [r1, r0]
 800eb68:	18c0      	addlt	r0, r0, r3
 800eb6a:	4770      	bx	lr

0800eb6c <_read_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d07      	ldr	r5, [pc, #28]	; (800eb8c <_read_r+0x20>)
 800eb70:	4604      	mov	r4, r0
 800eb72:	4608      	mov	r0, r1
 800eb74:	4611      	mov	r1, r2
 800eb76:	2200      	movs	r2, #0
 800eb78:	602a      	str	r2, [r5, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	f7f5 fb28 	bl	80041d0 <_read>
 800eb80:	1c43      	adds	r3, r0, #1
 800eb82:	d102      	bne.n	800eb8a <_read_r+0x1e>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	b103      	cbz	r3, 800eb8a <_read_r+0x1e>
 800eb88:	6023      	str	r3, [r4, #0]
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}
 800eb8c:	20005384 	.word	0x20005384

0800eb90 <_init>:
 800eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb92:	bf00      	nop
 800eb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb96:	bc08      	pop	{r3}
 800eb98:	469e      	mov	lr, r3
 800eb9a:	4770      	bx	lr

0800eb9c <_fini>:
 800eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9e:	bf00      	nop
 800eba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eba2:	bc08      	pop	{r3}
 800eba4:	469e      	mov	lr, r3
 800eba6:	4770      	bx	lr
